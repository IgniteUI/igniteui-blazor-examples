parameters:
  - name: igVersion
  - name: igNuGetFeedUrl
  - name: projectToBuild
  - name: isVerbose
    default: false
  - name: shouldCleanPostExectuion

steps:
  - task: NodeTool@0
    displayName: 'Install Node'
    inputs:
      versionSource: 'spec'
      versionSpec: '16.x'

  - task: Npm@1
    displayName: 'npm ci'
    inputs:
      command: custom
      workingDir: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
      verbose: ${{ parameters.isVerbose }}
      customCommand: ci

  - task: CmdLine@2
    displayName: 'npx gulp copySamplesTo${{ parameters.projectToBuild }}CI'
    inputs:
      script: 'npx gulp copySamplesTo${{ parameters.projectToBuild }}CI'
      workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
      failOnStderr: true

  - task: NuGetToolInstaller@1
    displayName: 'Use specific version of NuGet cli'
    inputs:
      versionSpec: '6.2.x' # we are using a legacy (according to Microsoft) feed so we don't want the newest nuget.exe

  - task: NuGetAuthenticate@1
    inputs:
      nuGetServiceConnections: 'IG ProGet IgniteUINuGet - Staging'

  - task: UseDotNet@2
    displayName: 'Install dotnet if not already present'
    inputs:
      packageType: 'sdk'
      version: '8.0.100' # we are currently building a 8.0 app. TODO: Try upgrading to 8.x in the future
      performMultiLevelLookup: false

  # (part 1/2) This circumvents the AllowInsecureConnections option's current limitations. Install IgniteUI* packages to a temp dir
  - task: PowerShell@2
    displayName: 'Identify trial packages and use licensed ones instead'
    inputs:
      targetType: 'inline'
      script: |
        $xml = [XML](Get-Content '.\IgBlazorSamples.${{ parameters.projectToBuild }}.csproj');
        
        $nodes = $xml.SelectNodes("//PackageReference[starts-with(@Include,'IgniteUI')]") | 
          ForEach-Object { 
              Write-Host "Found $($_.Include), version $($_.Version) - using version ${{ parameters.igVersion }}"
              $_.SetAttribute("Include",$_.Include.Replace(".Trial",""));
              $_.SetAttribute("Version", "${{ parameters.igVersion }}");

              $nugetInstallCommand = "nuget install $($_.Include) -Version $($_.Version) -DependencyVersion Ignore -OutputDirectory $(Build.SourcesDirectory)\tempLocalFeed"
              Write-Host $nugetInstallCommand
              Invoke-Expression -Command $nugetInstallCommand
          }
        $xml.Save('.\IgBlazorSamples.${{ parameters.projectToBuild }}.csproj')
      failOnStderr: true
      showWarnings: true
      workingDirectory: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.${{ parameters.projectToBuild }}'


  - task: PowerShell@2
    displayName: 'Generate NuGet.config for IG ProGet NuGet feed an'
    inputs:
      targetType: 'inline'
      script: |
        dotnet new nugetconfig --force
         # The name of the source doesn't currently matter as the credentials are attached thanks to URL matching - according to MS docs
         # dotnet nuget add source ${{ parameters.igNuGetFeedUrl }} --name "IG ProGet NuGet" 

         # (part 2/2) This circumvents the AllowInsecureConnections option's current limitations. Add the temp dir as a local feed
        dotnet nuget add source $(Build.SourcesDirectory)\tempLocalFeed --name "Local temp feed"
      failOnStderr: true
      showWarnings: true
      workingDirectory: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.${{ parameters.projectToBuild }}'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: 'restore'
      projects: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.${{ parameters.projectToBuild }}'
      # We want the dependency tree to be evaluated each time and to be sure that the dependencies are freshly downloaded
      restoreArguments: '--ignore-failed-sources --no-cache --force'
      feedsToUse: 'config'
      nugetConfigPath: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.${{ parameters.projectToBuild }}\NuGet.Config'
      # This task cannot use an apiKey directly (yet) so use any other service connection not based on an api key
      externalFeedCredentials: 'IG ProGet IgniteUINuGet - Staging'
      ${{ if eq(parameters.isVerbose, true) }}:
        verbosityRestore: 'Diagnostic'
      ${{ else }}:
        verbosityRestore: 'Normal'


  - task: DeleteFiles@1
    displayName: 'Delete NuGet.config file - used only at build time'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.${{ parameters.projectToBuild }}\'
      Contents: '**/NuGet.config'

  - task: CmdLine@2
    # Using a CmldLine call for this opeation, because I couldn't get it to work as expected with the DotNetCoreCLI task
    displayName: 'dotnet publish'
    inputs:
      # Skip the restore process as it is already done. Got an error when I tried skipping the build process (which is already done as well) 
      script: 'dotnet publish --no-restore -c release -o $(Build.SourcesDirectory)\browser\IgBlazorSamples.${{ parameters.projectToBuild }}\publish'
      workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.${{ parameters.projectToBuild }}'

  - task: ArchiveFiles@2
    displayName: 'Package samples browser'
    inputs:
      verbose: ${{ parameters.isVerbose }}
      rootFolderOrFile: '$(Build.SourcesDirectory)/browser/IgBlazorSamples.${{ parameters.projectToBuild }}/publish'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/BlazorSamples${{ parameters.projectToBuild }}.zip'
      replaceExistingArchive: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish pipeline artifact'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/BlazorSamples${{ parameters.projectToBuild }}.zip'
      artifact: 'BlazorSamples${{ parameters.projectToBuild }}'

  - task: PostBuildCleanup@4
    condition: ${{ parameters.shouldCleanPostExectuion }}