variables:
  - name: BuildConfiguration
    value: Release
  - name: BuildPlatform
    value: "Any CPU"
  - name: mainBuildNumber
    value: 2024.1.x
  - name: SrcRoot
    value: $(Build.SourcesDirectory)
  - name: VolumeReleaseNumber
    value: "2024.1"
  - name: msbuildLoggingVerbosity
    value: normal
  - name: BuildToolsFolder
    value: D:\Build Tools
  - name: chromeVersion
    value: stable  
  - name: targetBranch
    ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:    
      value: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
    ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
      value: $[ replace(variables['System.PullRequest.TargetBranch'], 'refs/heads/', '') ]

trigger: none

resources:
  pipelines:
  - pipeline: web-pr
    source: web-pr
    trigger: 
      stages:
      - Build_Blazor

jobs:
- job: Test_Blazor
  displayName: Test Blazor Samples
  timeoutInMinutes: 120
  pool:
    name: DEVTOOLS-XPLATPROD
  steps:
  - checkout: self
    path: ./$(Build.Repository.Name)
    clean: true
    fetchDepth: 1
    persistCredentials: True

  - task: PowerShell@1
    displayName: Gather trial info
    inputs:
      scriptType: inlineScript
      arguments: $(BuildConfiguration)
      inlineScript: >-
          $configuration = $args[0]

          $trial = "false"

          $r = $configuration;


          if ($configuration -eq "Debug") {
            $trial = "true";
          }

          if ($configuration -eq "Release") {
            $trial = "true";
          }

          if ($configuration -eq "Licensed") {
            $r = "Release";
          }


          Write-Host ("##vso[task.setvariable variable=isTrial;]$trial")

          Write-Host ("##vso[task.setvariable variable=resolvedConfig;]$r")
  - task: DeleteFiles@1
    displayName: Clear the contents of $(Build.BinariesDirectory)
    inputs:
      SourceFolder: $(Build.BinariesDirectory)
      Contents: '**/*'
  - task: DownloadBuildArtifacts@1
    displayName: 'Fetch Artifact: Blazor NuGet'
    inputs:
      artifactName: Blazor_NuGet
      buildType: 'specific'
      project: 'edba4b16-462e-42a0-9fa0-254d6d8a0f41'
      pipeline: 321 # web-pr
      specificBuildWithTriggering: true
      downloadPath: $(Pipeline.Workspace)\$(Build.Repository.Name)\dependencies\blazor
  - task: Npm@0
    name: Npm_1
    displayName: Install Samples Browser
    inputs:
      cwd: $(Pipeline.Workspace)\$(Build.Repository.Name)\browser\IgBlazorSamples.Gulp
  - task: PowerShell@1
    displayName: Gulp Samples Browser
    inputs:
      scriptType: 'inlineScript'
      inlineScript: gulp copySamplesToClient
      failOnStandardError: false
      workingFolder: $(Pipeline.Workspace)\$(Build.Repository.Name)\browser\IgBlazorSamples.Gulp
  - task: NuGetCommand@2
    displayName: Restore Samples Browser
    inputs:
      command: 'restore'
      restoreSolution: '$(Pipeline.Workspace)\$(Build.Repository.Name)\browser\*.sln'
      feedsToUse: 'config'
      nugetConfigPath: '$(Pipeline.Workspace)\$(Build.Repository.Name)\azure-pipelines\NuGet.config'
  - task: PowerShell@1
    displayName: Build Samples Browser
    inputs:
      scriptType: 'inlineScript'
      inlineScript: dotnet build IgBlazorSamplesBrowser.sln
      workingFolder: $(Pipeline.Workspace)\$(Build.Repository.Name)\browser\
      failOnStandardError: false
  - task: PowerShell@1
    displayName: Run Samples Browser
    inputs:
      scriptType: 'inlineScript'
      inlineScript: dotnet run
      workingFolder: $(Pipeline.Workspace)\$(Build.Repository.Name)\browser\IgBlazorSamples.Client
      failOnStandardError: false
  - task: PowerShell@1
    displayName: Run Samples Browser
    inputs:
      scriptType: 'inlineScript'
      inlineScript: dotnet test
      workingFolder: $(Pipeline.Workspace)\$(Build.Repository.Name)\browser\IgBlazorSamples.Test
      failOnStandardError: false
  - task: PostBuildCleanup@3
    displayName: Clean Agent Directories
    condition: always()
    continueOnError: True
