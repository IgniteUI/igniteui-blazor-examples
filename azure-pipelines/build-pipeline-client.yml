trigger:
  branches:
    include:
    - vnext
    - master
    - azure-pipelines

pr:
  branches:
    exclude:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

parameters:
- name: isVerbose
  displayName: 'Get verbose output from steps - where configurable'
  type: boolean
  default: false

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

stages:
- stage: Build
  pool:
    name: BuildAgentOnPrem
    demands: npm
  jobs:
  - job: BuildSamples
    steps:
      - checkout: 'self' 
        path: $(Build.Repository.Name)

      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSource: 'spec'
          versionSpec: '16.x'

      - task: Npm@1
        displayName: 'npm ci'
        inputs:
          command: custom
          workingDir: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
          verbose: ${{ parameters.isVerbose }}
          customCommand: ci

      - task: CmdLine@2
        displayName: 'npx gulp copySamplesToClient'
        inputs:
          script: 'npx gulp copySamplesToClient'
          workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
          failOnStderr: true

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            dotnet new nugetconfig --force
            
            #$pathToConfig = "C:\Work\git\igniteui-blazor-examples\browser\IgBlazorSamples.Gulp\nuget.config" #put your path here
            
            $xml = [System.Xml.XmlDocument](Get-Content 'NuGet.Config');
            
            
            #    <add key="enabled" value="True" />
            #    <add key="automatic" value="True" />
            $newXmlElement = $xml.configuration.AppendChild($xml.CreateElement("packageRestore"));
            #$xml.configuration.AppendChild($xml.CreateElement("packageRestore"));
            $newNode = $newXmlElement.AppendChild($xml.CreateElement("add"));
            $newNode.SetAttribute("key","enabled");
            $newNode.SetAttribute("value","true");
            
            $newNode = $newXmlElement.AppendChild($xml.CreateElement("add"));
            $newNode.SetAttribute("key","automatic");
            $newNode.SetAttribute("value","true");
            
            
            #<add key="IGProgetTrial" value="http://proget.infragistics.local:81/nuget/IgniteUINuGetTrial/" />
            
            $newNode = $xml.configuration.packageSources.AppendChild($xml.CreateElement("add"));
            $newNode.SetAttribute("key","IG ProGet NuGet Trial");
            $newNode.SetAttribute("value","http://proget.infragistics.local:81/nuget/IgniteUINuGetTrial/");
            
            $newNode2.SetAttribute("value","Val1dateD0wnl0ads");
            
            #add new node AFTER the configsections node
            #$newNode = $xml.ImportNode($newNode.appSettings,$true)
            #$xml.configuration.InsertAfter($newNode,$foundNode) |out-null
            
            #save file
            $xml.Save('NuGet.Config')
          failOnStderr: true
          showWarnings: true
          workingDirectory: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
          feedsToUse: 'config'
          nugetConfigPath: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\NuGet.config'
          externalFeedCredentials: 'IG ProGet NuGet Trial'

      - task: CmdLine@2
        displayName: 'dotnet restore'
        inputs:
          script: 'dotnet restore'
          workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
          failOnStderr: true

      - task: CmdLine@2
        displayName: 'dotnet build'
        inputs:
          script: 'dotnet build'
          workingDir:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
          workingDirectory: true


      - task: CmdLine@2
        displayName: 'dotnet publish'
        inputs:
          script: 'dotnet publish -c release -o $(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\publish'
          workingDir:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
          workingDirectory: true


      - task: PowerShell@2
        displayName: 'npm install igniteui-dockmanager (licensed)'
        inputs:
          targetType: 'inline'
          script: |
            cd $(Build.SourcesDirectory)\browser
            npm install igniteui-dockmanager@npm:@infragistics/igniteui-dockmanager@$($(jq '.dependencies.\"igniteui-dockmanager\"' .\package.json).Trim('"'))

      - task: ArchiveFiles@2
        displayName: 'Package samples browser'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          rootFolderOrFile: '$(Build.SourcesDirectory)/browser/IgBlazorSamples.Client/publish'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/BlazorSamplesClient.zip'
          replaceExistingArchive: true

      - task: PublishPipelineArtifact@1
        displayName: 'Publish pipeline artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/BlazorSamplesClient.zip'
          artifact: 'ReactSamplesBrowser'