trigger:
  branches:
    include:
    - vnext
    - master
    - azure-pipelines

pr:
  branches:
    exclude:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

parameters:
- name: isVerbose
  displayName: 'Get verbose output from steps - where configurable'
  type: boolean
  default: false

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)



stages:
- stage: Build
  pool:
    name: BuildAgentOnPrem
    demands: npm
  jobs:
  - job: BuildSamples
    variables:
      - name: IGVersion
        value: '22.2.52'

    steps:
      - checkout: 'self' 
        path: $(Build.Repository.Name)

      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSource: 'spec'
          versionSpec: '16.x'

      - task: Npm@1
        displayName: 'npm ci'
        inputs:
          command: custom
          workingDir: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
          verbose: ${{ parameters.isVerbose }}
          customCommand: ci

      
      - task: CmdLine@2
        displayName: 'npx gulp copySamplesToClient'
        inputs:
          script: 'npx gulp copySamplesToClient'
          workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
          failOnStderr: true

      - task: UseDotNet@2
        displayName: 'Install dotnet if not already present'
        inputs:
          packageType: 'sdk'
          version: '6.x'
          performMultiLevelLookup: true

      - task: PowerShell@2
        env:
          IGNUGET_FEED_URL: $(IG_Nuget_Feed_URL)
        displayName: 'Generate NuGet.config'
        inputs:
          targetType: 'inline'
          script: |
            dotnet new nugetconfig --force

            dotnet nuget add source $env:IGNUGET_FEED_URL --name "IG ProGet NuGet" 

            $xml = [XML](gc '.\IgBlazorSamples.Client.csproj');

            $nodes = $xml.SelectNodes("//PackageReference[starts-with(@Include,'IgniteUI')]") | 
              ForEach-Object { 
                  $_.SetAttribute("Include",$_.Include.Replace(".Trial",""));
                  $_.SetAttribute("Version",$env:IGVersion);
                  Write-Host $_.Version
              }
            $xml.Save('.\IgBlazorSamples.Client.csproj')
          failOnStderr: true
          showWarnings: true
          workingDirectory: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'

      - task: NuGetAuthenticate@1
        inputs:
          nuGetServiceConnections: 'IG ProGet NuGet'
          forceReinstallCredentialProvider: true

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
          feedsToUse: 'config'
          nugetConfigPath: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\NuGet.Config'
          verbosityRestore: 'Diagnostic'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'

      - task: DeleteFiles@1
        displayName: 'Delete NuGet.config file - used only at build time'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\'
          Contents: '**/NuGet.config'

      - task: CmdLine@2
        # Using a CmldLine call for this opeation, because I couldn't get it to work as expected with the DotNetCoreCLI task
        displayName: 'dotnet publish'
        inputs:
          script: 'dotnet publish -c release -o $(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\publish'
          workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'

      - task: ArchiveFiles@2
        displayName: 'Package samples browser'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          rootFolderOrFile: '$(Build.SourcesDirectory)/browser/IgBlazorSamples.Client/publish'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/BlazorSamplesClient.zip'
          replaceExistingArchive: true

      - task: PublishPipelineArtifact@1
        displayName: 'Publish pipeline artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/BlazorSamplesClient.zip'
          artifact: 'BlazorSamplesClient'