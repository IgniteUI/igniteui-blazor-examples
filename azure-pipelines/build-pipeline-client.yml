trigger:
  branches:
    include:
    - vnext
    - master
    - azure-pipelines

pr:
  branches:
    exclude:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

parameters:
- name: isVerbose
  displayName: 'Get verbose output from steps - where configurable'
  type: boolean
  default: false

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

stages:
- stage: Build
  pool:
    name: BuildAgentOnPrem
    demands: npm
  jobs:
  - job: BuildSamples
    steps:
      - checkout: 'self' 
        path: $(Build.Repository.Name)

      - task: NodeTool@0
        displayName: 'Install Node'
        inputs:
          versionSource: 'spec'
          versionSpec: '16.x'

#      - task: Npm@1
#        displayName: 'npm ci'
#        inputs:
#          command: custom
#          workingDir: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
#          verbose: ${{ parameters.isVerbose }}
#          customCommand: ci
#
#      - task: CmdLine@2
#        displayName: 'npx gulp copySamplesToClient'
#        inputs:
#          script: 'npx gulp copySamplesToClient'
#          workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Gulp'
#          failOnStderr: true

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            dotnet new nugetconfig --force

            $xml = [System.Xml.XmlDocument](Get-Content '.\NuGet.Config');

            $newXmlElement = $xml.configuration.AppendChild($xml.CreateElement("packageRestore"));
            #$xml.configuration.AppendChild($xml.CreateElement("packageRestore"));
            $newNode = $newXmlElement.AppendChild($xml.CreateElement("add"));
            $newNode.SetAttribute("key","enabled");
            $newNode.SetAttribute("value","true");

            $newNode = $newXmlElement.AppendChild($xml.CreateElement("add"));
            $newNode.SetAttribute("key","automatic");
            $newNode.SetAttribute("value","true");


            #<add key="IGProgetTrial" value="http://proget.infragistics.local:81/nuget/IgniteUINuGetTrial/" />

            $newNode = $xml.configuration.packageSources.AppendChild($xml.CreateElement("add"));
            $newNode.SetAttribute("key","IGProgetTrial");
            $newNode.SetAttribute("value","http://proget.infragistics.local:81/nuget/IgniteUINuGetTrial/");

          failOnStderr: true
          showWarnings: true
          workingDirectory: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
# TODO add --ignore-failed-sources to 'dotnet restore'
      - task: CmdLine@2
#        displayName: 'dotnet restore - cmd'
#        inputs:
#          script: 'dotnet restore $(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\ --configFile $(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\NuGet.Config'
#          workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'
          restoreArguments: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client --ignore-failed-sources'
          feedsToUse: 'config'
          nugetConfigPath: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\NuGet.Config'
          externalFeedCredentials: 'IG ProGet NuGet Trial'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'

      - task: CmdLine@2
        displayName: 'dotnet publish #2'
        inputs:
          script: 'dotnet publish -c release -o $(Build.SourcesDirectory)\browser\IgBlazorSamples.Client\publish'
          workingDirectory:  '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '-c release'
          modifyOutputPath: false
          workingDirectory: '$(Build.SourcesDirectory)\browser\IgBlazorSamples.Client'

      - task: ArchiveFiles@2
        displayName: 'Package samples browser'
        inputs:
          verbose: ${{ parameters.isVerbose }}
          rootFolderOrFile: '$(Build.SourcesDirectory)/browser/IgBlazorSamples.Client/publish'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/BlazorSamplesClient.zip'
          replaceExistingArchive: true

      - task: PublishPipelineArtifact@1
        displayName: 'Publish pipeline artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/BlazorSamplesClient.zip'
          artifact: 'ReactSamplesBrowser'