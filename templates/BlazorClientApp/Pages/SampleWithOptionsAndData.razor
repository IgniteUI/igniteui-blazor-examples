@* this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject IJSRuntime JSRuntime;
@inject HttpClient Http

@* NOTE use this HTML code to design a sample *@
<div class="igContainer">
    <div class="igOptions">
        @* TODO add options (if any) for IG control here otherwise remove DIV with igOptions *@
        <button class="btn btn-primary" @onclick="OnButtonClick">Click me</button>
    </div>

    <div class="igComponent">

        @* NOTE making sure data is loaded before we can render it *@
        @if (DataSource != null)
        {
            @* TODO add IG control here *@
            <p>Current count: @CurrentCount</p>

            @* NOTE here is an example of displaying DataSource: *@
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Country</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dataItem in DataSource)
                    {
                        <tr>
                            <td>@dataItem.name</td>
                            <td>@dataItem.country</td>
                            <td>@dataItem.lat</td>
                            <td>@dataItem.lon</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>

@* NOTE you can change this C# code to affect behaviour of this page: *@
@code {

    // NOTE here, you can add properties to store values and data for this component
    private int CurrentCount;
    private WorldCity[] DataSource;

    // NOTE here, you can Initialize properties/state/data of the sample
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Sample OnInitializedAsync...");

        CurrentCount = 10;

        // NOTE samples should be loading data from CDN URLs:
        // DataSource = await Http.GetJsonAsync<WorldCity[]>("http://static.infragistics.com/xplatform/data/WorldCities.json");
        // DataSource = DataSource.Take(20).ToArray();
        // DataSource = await Http.GetJsonAsync<WeatherForecast[]>("data/WeatherForecast.json");
        DataSource = new WorldCity[] { new WorldCity() };

        await Task.Delay(10);
    }

    // NOTE here is example of even handler that update a field that is bound in HTML code above
    protected void OnButtonClick()
    {
        Console.WriteLine("Sample OnButtonClick");

        CurrentCount++;

        // NOTE you can also call this function to force rending of the component
        // this.StateHasChanged();
    }
}
