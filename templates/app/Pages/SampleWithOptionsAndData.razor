@* TODO set routing paths for a sample, see: URLs in React sample browser,
e.g. https://staging.infragistics.com/react-demos/samples/charts/category-chart-annotations *@
@page "/samples/charts/category-chart-annotations"
@page         "/charts/category-chart-annotations"

@* NOTE this lines is need only for samples that load data *@
@inject HttpClient Http

@* NOTE this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls

@* NOTE you can change this HTML code to re-design this page.
however, use igContainer, igOptions, or igComponent as class styles of DIV containers *@
<div class="igContainer">
    <div class="igOptions">

        @* TODO add options (if any) for IG control here otherwise remove DIV with igOptions *@
        <button class="btn btn-primary" @onclick="OnButtonClick">Click me</button>
    </div>

    <div class="igComponent">

        @* NOTE this is example of displaying data loaded from code behind *@
        @if (DataSource != null)
        {
            @* TODO add IG control here *@
            <p>Current count: @CurrentCount</p>

             @* NOTE at this point DataSource is ready to be displayed: *@
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Country</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dataItem in DataSource)
                    {
                        <tr>
                            <td>@dataItem.name</td>
                            <td>@dataItem.country</td>
                            <td>@dataItem.lat</td>
                            <td>@dataItem.lon</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>

@* NOTE you can change this C# code to affect behaviour of this page: *@
@code {

    // NOTE here, you can add properties to store values and data for this component
    private int CurrentCount;
    private WorldCity[] DataSource;

    // NOTE here, you can Initialize properties/state/data of the sample
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync is called");

        CurrentCount = 10;

        // TODO samples loading data should be using CDN URLs to fetch data
        DataSource = await Http.GetJsonAsync<WorldCity[]>("http://static.infragistics.com/xplatform/data/WorldCities.json");
        DataSource = DataSource.Take(20).ToArray();
        // DataSource = await Http.GetJsonAsync<WeatherForecast[]>("data/WeatherForecast.json");

        await Task.Delay(100);
    }

    // NOTE here is example of even handler that update a field that is bound in HTML code above
    protected void OnButtonClick()
    {
        Console.WriteLine("OnButtonClick is called");

        CurrentCount++;

        // NOTE you can also call this function to force rending of the component
        // this.StateHasChanged();
    }
}
