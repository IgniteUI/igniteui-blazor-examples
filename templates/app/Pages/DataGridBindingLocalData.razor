@* this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls
@* @inject IInfragisticsBlazor InfragisticsBlazor; *@

@* NOTE use this HTML code to design a sample *@
<div class="igContainer">

    <div class="igComponent">

        @* NOTE making sure data is loaded before we can render it *@
        @if (DataSource != null)
        {
            @* NOTE here is an example of binding data to IG control *@
            <DataGrid Height="500"
                      Width="600"
                      DataSource="@DataSource"
                      AutoGenerateColumns="false">
                <TextColumn PropertyPath="Country" />
                <NumericColumn PropertyPath="OrderValue" PositivePrefix="$" ShowGroupingSeparator="true" MaxFractionDigits="2" MinFractionDigits="2" />

            </DataGrid>
            @*<TextColumn PropertyPath="Country" Width="*>125"/>*@
        }

    </div>
</div>

@* NOTE you can change this C# code to affect behaviour of this page: *@
@code {

    // NOTE here, you can add properties to store values and data for this component
    private SaleInfo[] DataSource;

    // NOTE here, you can Initialize properties/state/data of the sample
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Sample OnInitializedAsync...");

        DataSource = generateData();

        await Task.Delay(10);
    }

    protected override void OnInitialized()
    {
        @* DataGridModule.Register(InfragisticsBlazor); *@
    }
    // public Date getRandomDate(): Date {
    //     const today: Date = new Date();
    //     const year: number = today.getFullYear();
    //     const month: number = this.getRandomNumber(0, 8);
    //     const day: number = this.getRandomNumber(10, 27);
    //     return new Date(year, month, day);
    // }

    private Random Rand = new Random();
    public double getRandomNumber(double min, double max)
    {
        return Math.Round(min + (Rand.NextDouble() * (max - min)));
    }

    public string getRandomItem(string[] array)
    {
        var index = (int)Math.Round(getRandomNumber(0, array.Length - 1));
        return array[index];
    }

    public string getCountryFlag(string country)
    {
        var flag = "https://static.infragistics.com/xplatform/images/flags/" + country + ".png";
        return flag;
    }

    public SaleInfo[] generateData() {

        string[] names = new string[] {
            "Intel CPU", "AMD CPU",
            "Intel Motherboard", "AMD Motherboard", "Nvidia Motherboard",
            "Nvidia GPU", "Gigabyte GPU", "Asus GPU", "AMD GPU", "MSI GPU",
            "Corsair Memory", "Patriot Memory", "Skill Memory",
            "Samsung HDD", "WD HDD", "Seagate HDD", "Intel HDD", "Asus HDD",
            "Samsung SSD", "WD SSD", "Seagate SSD", "Intel SSD", "Asus SSD",
            "Samsung Monitor", "Asus Monitor", "LG Monitor", "HP Monitor" };

        string[] countries = new string[] {
            "USA", "UK", "France", "Canada", "Poland",
            "Denmark", "Croatia", "Australia", "Seychelles",
            "Sweden", "Germany", "Japan", "Ireland",
            "Barbados", "Jamaica", "Cuba", "Spain", };
        string[] status = new string[] { "Packing", "Shipped", "Delivered" };

        var sales = new List<SaleInfo>();

        for (var i = 0; i < 200; i++)
        {
            var price = getRandomNumber(10000, 90000) / 100;
            var items = getRandomNumber(4, 30);
            var value = Math.Round(price * items);
            var margin = getRandomNumber(2, 5);
            var profit = Math.Round((price * margin / 100) * items);
            var country = getRandomItem(countries);

            var item = new SaleInfo()
            {
                Country = country,
                CountryFlag = getCountryFlag(country),
                Margin = margin,
                //    OrderDate = getRandomDate(),
                OrderItems = items,
                OrderValue = value,
                ProductID = 1001 + i,
                ProductName = getRandomItem(names),
                ProductPrice = price,
                Profit = Math.Round(profit),
                Status = getRandomItem(status)
            };
            sales.Add(item);
        }

        Console.WriteLine("Sample data " + sales.Count);
        return sales.ToArray();
    }

    public class SaleInfo
    {
        public string Status { get; set; }
        public string ProductName { get; set; }
        public string CountryFlag { get; set; }
        public string Country { get; set; }
        //   public string OrderDate { get; set; }

        public double Profit { get; set; }
        public double ProductPrice { get; set; }
        public double ProductID { get; set; }
        public double OrderValue { get; set; }
        public double OrderItems { get; set; }

        public double Margin { get; set; }
    }
}
