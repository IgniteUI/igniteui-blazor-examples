@* NOTE this lines is need only for samples that load data *@
@inject HttpClient Http

@* this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls

@* NOTE use this HTML code to design a sample *@
<div class="igContainer">
    <div class="igOptions">
        @* TODO add options (if any) for IG control here otherwise remove DIV with igOptions *@
    </div>

    <div class="igComponent">
        @* NOTE making sure data is loaded before we can render it *@
        @if (DataSource != null)
        {
            @* TODO add IG control here *@

            @* NOTE here is an example of displaying DataSource: *@
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Country</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dataItem in DataSource)
                    {
                        <tr>
                            <td>@dataItem.name</td>
                            <td>@dataItem.country</td>
                            <td>@dataItem.lat</td>
                            <td>@dataItem.lon</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>
</div>

@* NOTE you can change this C# code to affect behaviour of this page: *@
@code {

    // NOTE here, you can add properties to store values and data for this component
    private WorldCity[] DataSource;

    // NOTE here, you can Initialize properties/state/data of the sample
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Sample OnInitializedAsync...");

        // NOTE sample is fetching data from CDN http://static.infragistics.com/xplatform/
        DataSource = await Http.GetJsonAsync<WorldCity[]>("http://static.infragistics.com/xplatform/data/WorldCities.json");
        DataSource = DataSource.Take(20).ToArray();

        await Task.Delay(10);
    }

}
