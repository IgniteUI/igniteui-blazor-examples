@page "/gauges/radial-gauge-animation"
@page "/samples/gauges/radial-gauge-animation"

@* this is required for Infragistics controls *@
@using Infragistics.Blazor.Controls
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject IJSRuntime JSRuntime;

@* NOTE use this HTML code to design a sample *@
    <div class="igContainer">
        <div class="igOptions-horizontal">
            <button class="btn btn-primary" @onclick="OnAnimation1Click">Animation 1</button>
            <button class="btn btn-primary" @onclick="OnAnimation2Click">Animation 2</button>
        </div>
        <div class="igComponent">

            @* NOTE example of creating IG component *@
            <RadialGauge Height="100%" Width="100%"
                         MinimumValue="0"
                         MaximumValue="360"
                         Value="90"
                         Interval="30"
                         TransitionDuration="500"
                         LabelInterval="30"
                         LabelExtent="0.85"
                         Font="15px Verdana,Arial"
                         NeedleShape="RadialGaugeNeedleShape.None"
                         NeedlePivotShape="RadialGaugePivotShape.None"
                         ScaleStartAngle="0"
                         ScaleEndAngle="360"
                         ScaleBrush="#e0dfdf"
                         ScaleOversweepShape="RadialGaugeScaleOversweepShape.Circular"
                         ScaleSweepDirection="SweepDirection.Clockwise"
                         ScaleEndExtent="@ScaleEndExtent"
                         ScaleStartExtent="@ScaleStartExtent"
                         MinorTickCount="4"
                         MinorTickStartExtent="@ScaleEndExtent"
                         MinorTickEndExtent="@(ScaleEndExtent + 0.025)"
                         MinorTickStrokeThickness="1"
                         MinorTickBrush="transparent"
                         TickStartExtent="@ScaleEndExtent"
                         TickEndExtent="@(ScaleEndExtent + 0.05)"
                         TickStrokeThickness="1"
                         TickBrush="#79797a"
                         BackingBrush="transparent"
                         BackingOutline="transparent"
                         BackingShape="RadialGaugeBackingShape.Circular">
        @if (Ranges != null)
        {
            @foreach (var range in Ranges)
            {
                <RadialGaugeRange StartValue="@range.StartValue"
                                EndValue="@range.EndValue"
                                Brush="@range.Brush"
                                Outline="@range.Brush">
                </RadialGaugeRange>
            }
        }

            </RadialGauge>
        </div>
    </div>

@* NOTE use this C# code to affect behaviour of this page: *@
@code {

    // NOTE here, you can add properties to store values and data for this component
    double ScaleEndExtent = 0.7;
    double ScaleStartExtent = 0.6;
    public RangeInfo[] Ranges { get; set; }

    public class RangeInfo {
        public double StartValue { get; set; }
        public double EndValue { get; set; }
        public string Brush { get; set; }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        @* Ranges = new List<RangeInfo>(); *@

        // Console.WriteLine("Sample runtime: " + InfragisticsBlazor.JsRuntime);
        Console.WriteLine("Sample OnInitialized...");
        RadialGaugeModule.Register(InfragisticsBlazor);

        OnAnimation2Click();
    }

    protected void OnAnimation1Click()
    {
        this.Ranges = null;
        var range1 = new RangeInfo() { StartValue = 0, EndValue = 180, Brush = "Red" };
        this.Ranges = new RangeInfo[] {range1 };
        this.ScaleEndExtent -= 0.1;
        Console.WriteLine("Sample OnAnimation2Click " + Ranges.Length);

        @* this.StateHasChanged(); *@
    }

    protected void OnAnimation2Click()
    {
        this.Ranges = null;
        var range1 = new RangeInfo() { StartValue = 0, EndValue = 90, Brush = "Red" };
        var range2 = new RangeInfo() { StartValue = 90, EndValue = 180, Brush = "#1e90ff" };
        this.Ranges = new RangeInfo[] {range1, range2 };
        this.ScaleEndExtent += 0.1;
        Console.WriteLine("Sample OnAnimation1Click " + Ranges.Length);

        @* this.StateHasChanged(); *@
    }

}
