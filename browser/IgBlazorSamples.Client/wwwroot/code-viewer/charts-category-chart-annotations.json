{"sampleFiles": [{
      "hasRelativeAssetsUrls": false,
      "path": "src/app/annotations/category-chart-annotations.component.ts",
      "content": "import { ChangeDetectionStrategy, Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: \"app-category-chart-annotations\",\r\n    styleUrls: [\"./category-chart-annotations.component.scss\"],\r\n    templateUrl: \"./category-chart-annotations.component.html\"\r\n})\r\nexport class CategoryChartAnnotationsComponent {\r\n\r\n    public categoryData: WeatherMeasure[];\r\n    public sampleOptions: SampleOptions = new SampleOptions();\r\n    public include: string[];\r\n\r\n    constructor() {\r\n        const year: number = new Date().getFullYear();\r\n        this.categoryData = [\r\n            new WeatherMeasure({ high: 74, low: 65, date: new Date(year, 0, 1) }),\r\n            new WeatherMeasure({ high: 74, low: 71, date: new Date(year, 1, 1) }),\r\n            new WeatherMeasure({ high: 76, low: 73, date: new Date(year, 2, 1) }),\r\n            new WeatherMeasure({ high: 78, low: 74, date: new Date(year, 3, 1) }),\r\n            new WeatherMeasure({ high: 83, low: 76, date: new Date(year, 4, 1) }),\r\n            new WeatherMeasure({ high: 87, low: 82, date: new Date(year, 5, 1) }),\r\n            new WeatherMeasure({ high: 94, low: 87, date: new Date(year, 6, 1) }),\r\n            new WeatherMeasure({ high: 97, low: 92, date: new Date(year, 7, 1) }),\r\n            new WeatherMeasure({ high: 93, low: 88, date: new Date(year, 8, 1) }),\r\n            new WeatherMeasure({ high: 86, low: 83, date: new Date(year, 9, 1) }),\r\n            new WeatherMeasure({ high: 81, low: 78, date: new Date(year, 10, 1) }),\r\n            new WeatherMeasure({ high: 79, low: 71, date: new Date(year, 11, 1) })\r\n        ];\r\n\r\n        this.include = [\"date\", \"high\", \"low\"];\r\n\r\n        const calloutParser: CalloutCategoryDataParser = new CalloutCategoryDataParser(this.categoryData);\r\n        calloutParser.parseForCalloutData();\r\n    }\r\n\r\n    public formatDateLabel(item: any): string {\r\n        return item.date.toLocaleDateString(undefined, {month: \"long\"});\r\n    }\r\n}\r\n\r\nclass WeatherMeasure {\r\n    public date: Date;\r\n    public high: number;\r\n    public low: number;\r\n\r\n    //  Callout Properties\r\n    public index: number;\r\n    public value: number;\r\n    public content: string;\r\n\r\n    public constructor(init?: Partial<WeatherMeasure>) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nclass CalloutCategoryDataParser extends Array {\r\n\r\n    private categoryData: WeatherMeasure[];\r\n\r\n    constructor(categoryData: WeatherMeasure[]) {\r\n        super();\r\n\r\n        this.categoryData = categoryData;\r\n    }\r\n\r\n    public parseForCalloutData = function() {\r\n        let minItem: WeatherMeasure = null;\r\n        let maxItem: WeatherMeasure = null;\r\n        let minVal: number = Number.MAX_VALUE;\r\n        let maxVal: number = Number.MIN_VALUE;\r\n        let idx: number = 0;\r\n\r\n        for (const item of this.categoryData) {\r\n            item.index = idx;\r\n\r\n            if (minVal > item.low) {\r\n                minVal = item.low;\r\n                minItem = item;\r\n                minItem.index = idx + 0.5;\r\n            }\r\n            if (maxVal < item.high) {\r\n                maxVal = item.high;\r\n                maxItem = item;\r\n            }\r\n\r\n            item.value = item.high;\r\n\r\n            switch (item.date.getMonth()) {\r\n                case 11:\r\n                case 0:\r\n                case 1:\r\n                    {\r\n                        item.content = \"WINTER\";\r\n                    }\r\n                    break;\r\n                case 2:\r\n                case 3:\r\n                case 4:\r\n                    {\r\n                        item.content = \"SPRING\";\r\n                    }\r\n                    break;\r\n                case 5:\r\n                case 6:\r\n                case 7:\r\n                    {\r\n                        item.content = \"SUMMER\";\r\n                    }\r\n                    break;\r\n                case 8:\r\n                case 9:\r\n                case 10:\r\n                    {\r\n                        item.content = \"FALL\";\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            // if (item.temperatureHigh - item.averageTemperature > 10) {\r\n            //     this.push({\r\n            //         content: \"Very high over average for \" + item.date.toLocaleDateString(),\r\n            //         index: idx,\r\n            //         yValue: item.temperatureHigh });\r\n            // }\r\n            idx++;\r\n        }\r\n\r\n        minItem.content = \"MIN\";\r\n        minItem.value = minItem.low;\r\n        maxItem.content = \"MAX\";\r\n        maxItem.value = maxItem.high;\r\n    };\r\n}\r\n\r\nclass SampleOptions {\r\n\r\n    public chartType: string = \"Column\";\r\n    public crosshairsDisplay: string = \"Horizontal\";\r\n    public snapCrosshairs: boolean = false;\r\n    public crosshairAnnotations: boolean = true;\r\n\r\n    public finalValuesVisible: boolean = false;\r\n\r\n    public calloutsVisible: boolean = false;\r\n}\r\n",
      "isMain": true,
      "fileExtension": "ts",
      "fileHeader": "ts"
    }, {
      "hasRelativeAssetsUrls": false,
      "path": "src/app/annotations/category-chart-annotations.component.html",
      "content": "<div class=\"sample-wrapper container\">\r\n    <div class=\"options\">\r\n        <div>\r\n            <label width=\"130px\" class=\"optionLabel\" >Chart Type: </label>\r\n            <select class=\"optionSelector\" [(ngModel)]=\"sampleOptions.chartType\">\r\n                <option>Column</option>\r\n                <option>Area</option>\r\n                <option>Line</option>\r\n                <option>Point</option>\r\n                <option>Spline</option>\r\n                <option>SplineArea</option>\r\n                <option>StepArea</option>\r\n                <option>StepLine</option>\r\n            </select>\r\n\r\n            <label class=\"optionItem\"><input [(ngModel)]=\"sampleOptions.calloutsVisible\" type=\"checkbox\" />Enable Callouts</label>\r\n            <label class=\"optionItem\"><input [(ngModel)]=\"sampleOptions.finalValuesVisible\" type=\"checkbox\" />Enable Final Value Annotations</label>\r\n        </div>\r\n        <div>\r\n            <label width=\"130px\" class=\"optionLabel\">Crosshairs: </label>\r\n            <select class=\"optionSelector\" [(ngModel)]=\"sampleOptions.crosshairsDisplay\">\r\n                <option>Default</option>\r\n                <option>None</option>\r\n                <option>Horizontal</option>\r\n                <option>Vertical</option>\r\n                <option>Both</option>\r\n            </select>\r\n\r\n            <label class=\"optionItem\"><input [(ngModel)]=\"sampleOptions.snapCrosshairs\" type=\"checkbox\" />Snap Crosshairs to Data</label>\r\n            <label class=\"optionItem\"><input [(ngModel)]=\"sampleOptions.crosshairAnnotations\" type=\"checkbox\" />Enable Crosshairs Annotations</label>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"chart\">\r\n        <igx-category-chart height=\"calc(100% - 60px)\" width=\"100%\"\r\n            [dataSource]=\"categoryData\"\r\n            [chartType]=\"sampleOptions.chartType\"\r\n            chartTitle=\"Weather Data\"\r\n            subtitle=\"(High, Low)\"\r\n            xAxisInterval=\"1\"\r\n            yAxisMinimumValue=\"60\"\r\n            yAxisMaximumValue=\"110\"\r\n            [xAxisFormatLabel]=\"formatDateLabel\"\r\n            [includedProperties]=\"include\"\r\n\r\n            [crosshairsDisplayMode]=\"sampleOptions.crosshairsDisplay\"\r\n            [crosshairsSnapToData]=\"sampleOptions.snapCrosshairs\"\r\n            [crosshairsAnnotationEnabled]=\"sampleOptions.crosshairAnnotations\"\r\n\r\n            [finalValueAnnotationsVisible]=\"sampleOptions.finalValuesVisible\"\r\n\r\n            [calloutsVisible]=\"sampleOptions.calloutsVisible\"\r\n            [calloutsDataSource]=\"categoryData\"\r\n            calloutsXMemberPath=\"index\"\r\n            calloutsYMemberPath=\"value\"\r\n            calloutsLabelMemberPath=\"content\">\r\n        </igx-category-chart>\r\n\r\n    </div>\r\n</div>\r\n",
      "isMain": true,
      "fileExtension": "html",
      "fileHeader": "html"
    }, {
      "hasRelativeAssetsUrls": false,
      "path": "src/app/annotations/category-chart-annotations.component.scss",
      "content": ".container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 100%;\r\n    min-width: 300px;\r\n}\r\n\r\n.chart {\r\n    flex: 1;\r\n    overflow: hidden;\r\n}\r\n.options {\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    margin-right: 10px;\r\n    margin-left: 10px;\r\n    width:100%;\r\n    font-size: 1rem;\r\n    font-family: sans-serif;\r\n}\r\n\r\n.optionLabel {\r\n    margin-left: 15px;\r\n    margin-right: 5px;\r\n    font-size: 1rem;\r\n    font-family: sans-serif;\r\n}\r\n\r\n.optionItem {\r\n    margin-left: 10px;\r\n    display: inline-block;\r\n    vertical-align: center;\r\n}\r\n\r\n.optionSelector {\r\n    margin-left: 10px;\r\n    display: inline-block;\r\n    vertical-align: center;\r\n    width: 120px;\r\n}\r\n\r\ninput {\r\n    width: 15px;\r\n    height: 15px;\r\n    margin-bottom: 6px;\r\n    margin-left: 4px;\r\n    vertical-align: bottom;\r\n}\r\n",
      "isMain": true,
      "fileExtension": "scss",
      "fileHeader": "scss"
    }, {
      "hasRelativeAssetsUrls": false,
      "path": "src/app/app.module.ts",
      "content": "import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { CategoryChartAnnotationsComponent } from \"./annotations/category-chart-annotations.component\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tCategoryChartAnnotationsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxCategoryChartModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n",
      "isMain": true,
      "fileExtension": "ts",
      "fileHeader": "modules"
    }, {
      "hasRelativeAssetsUrls": false,
      "path": "src/app/app.component.html",
      "content": "<app-category-chart-annotations></app-category-chart-annotations>"
    }
  ],
 "sampleDependencies": "{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.0.7\",\"igniteui-angular-charts\":\"11.1.0\",\"igniteui-angular-core\":\"11.1.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"
}