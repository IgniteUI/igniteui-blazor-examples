@page "/charts/pie-chart-selecion"
@page "/samples/charts/pie-chart-selecion"

@* this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject IJSRuntime JSRuntime;

@* NOTE use this HTML code to design a sample *@
<div class="igContainer">
    <div class="igOptions-horizontal">
        @* TODO add options (if any) for IG control here otherwise remove DIV with igOptions *@
    </div>

    <div class="igComponent">

        @* NOTE making sure data is loaded before we can render it *@
        @if (DataSource != null)
        {
            @* TODO add SliceClick event handler *@
            <PieChart Height="100%" Width="100%"
                      DataSource="@DataSource"
                      LabelMemberPath="Summary"
                      ValueMemberPath="MarketShare"
                      LegendLabelMemberPath="Company"
                      Outlines="white"
                      SelectionMode="SliceSelectionMode.Multiple"
                      SelectedSliceStroke="white"
                      SelectedSliceFill="rgb(143,143,143)"
                      SelectedSliceOpacity="1.0"
                      SelectedSliceStrokeThickness="2"
                      RadiusFactor="0.9"
                      StartAngle="0">
            </PieChart>
        }

    </div>
</div>

@* NOTE you can change this C# code to affect behaviour of this page: *@
@code {

    // NOTE here, you can add properties to store values and data for this component
    private List<DataItem> DataSource;
    // TODO uncomment
    // private string SelectedSlices = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Console.WriteLine("Sample runtime: " + InfragisticsBlazor.JsRuntime);
        Console.WriteLine("Sample OnInitialized...");
        PieChartModule.Register(InfragisticsBlazor);
    }

    // NOTE here, you can Initialize properties/state/data of the sample
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Sample OnInitializedAsync...");

        var dataItems = new List<DataItem>();
        dataItems.Add(new DataItem() { MarketShare = 30, Company = "Google", });
        dataItems.Add(new DataItem() { MarketShare = 25, Company = "Apple", });
        dataItems.Add(new DataItem() { MarketShare = 20, Company = "Microsoft", });
        dataItems.Add(new DataItem() { MarketShare = 15, Company = "Samsung", });
        dataItems.Add(new DataItem() { MarketShare = 10, Company = "Other", });

        DataSource = dataItems;

        await Task.Delay(10);
    }

    public class DataItem
    {
        public string Company { get; set; }
        public double MarketShare { get; set; }

        public string Summary { get { return Company + " " + MarketShare + "%"; } }
    }

    // NOTE here is example of even handler that update a field that is bound in HTML code above
    protected void OnSliceClick()
    {
        Console.WriteLine("Sample OnButtonClick");

        // TODO get Selected Slices and update SelectedSlices variable
        // SelectedSlices = "";
    }
}
