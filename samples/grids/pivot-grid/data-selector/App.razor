@using IgniteUI.Blazor.Controls;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container horizontal">

    <div class="container vertical">
        <IgbPivotGrid Data="PivotSalesData"
                      Height="100%"
                      DefaultExpandState=true
                      PivotConfiguration="PivotConfiguration"
                      Name="grid"
                      @ref="grid">
        </IgbPivotGrid>
    </div>
    <div class="container vertical" style="width: auto;">
        <IgbPivotDataSelector @ref="selector" Grid=@grid></IgbPivotDataSelector>
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(1);
    }
    public IgbPivotGrid grid;
    private IgbPivotDataSelector selector;
    private IgbPivotConfiguration _pivotConfiguration = null;
    public IgbPivotConfiguration PivotConfiguration
    {
        get
        {
            if (this._pivotConfiguration == null)
            {
                IgbPivotConfiguration pivotConfiguration = new IgbPivotConfiguration();
                IgbPivotDimension pivotDimension1 = new IgbPivotDimension()
                    {
                        MemberName = "Product",
                        Enabled = true
                    };

                IgbPivotDimension pivotDimension2 = new IgbPivotDimension()
                    {
                        MemberName = "Country",
                        Enabled = true
                    };

                IgbPivotDateDimension pivotDimension3 = new IgbPivotDateDimension();
                pivotDimension3.BaseDimension = new IgbPivotDimension()
                    {
                        MemberName = "Date",
                        Enabled = true
                    };
                pivotDimension3.Options = new IgbPivotDateDimensionOptions()
                    {
                        Months = false
                    };

                IgbPivotDimension pivotDimension4 = new IgbPivotDimension()
                    {
                        MemberName = "MonthName",
                        Enabled = false
                    };

                pivotConfiguration.Columns.Add(pivotDimension1);
                pivotConfiguration.Columns.Add(pivotDimension2);
                pivotConfiguration.Rows.Add(pivotDimension3);
                pivotConfiguration.Filters.Add(pivotDimension4);

                IgbPivotValue pivotValue1 = new IgbPivotValue()
                    {

                        Member = "Sales",
                        Enabled = false,
                        DataType = GridColumnDataType.Currency,
                        Aggregate = new IgbPivotAggregator()
                        {
                            AggregatorName = PivotAggregationType.SUM,
                            Key = "SUM",
                            Label = "Sum"
                        }
                    };


                IgbPivotValue pivotValue2 = new IgbPivotValue()
                    {

                        Member = "Profit",
                        Enabled = true,
                        DataType = GridColumnDataType.Currency,
                        Aggregate = new IgbPivotAggregator()
                        {
                            AggregatorName = PivotAggregationType.SUM,
                            Key = "SUM",
                            Label = "Sum"
                        }
                    };

                pivotConfiguration.Values.Add(pivotValue1);
                pivotConfiguration.Values.Add(pivotValue2);

                this._pivotConfiguration = pivotConfiguration;
            }
            return this._pivotConfiguration;
        }
    }

    private PivotSalesData _pivotSalesData = null;
    public PivotSalesData PivotSalesData
    {
        get
        {
            if (_pivotSalesData == null)
            {
                _pivotSalesData = new PivotSalesData();
            }
            return _pivotSalesData;
        }
    }

}