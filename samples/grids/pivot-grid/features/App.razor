@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbPivotGrid
        Data="PivotDataFlat"
        Name="grid"
        @ref="grid"
        RowSelection="GridSelectionMode.Single"
        SuperCompactMode="true"
        PivotConfiguration="PivotConfiguration1">
        </IgbPivotGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;

    }

    private IgbPivotGrid grid;
    private IgbPivotConfiguration _pivotConfiguration1 = null;
    public IgbPivotConfiguration PivotConfiguration1
    {
        get
        {
            if (this._pivotConfiguration1 == null)
            {
                var pivotConfiguration1 = new IgbPivotConfiguration();
                var pivotDateDimension1 = new IgbPivotDateDimension();
                pivotDateDimension1.MemberName = "Date";
                pivotDateDimension1.Enabled = true;
                pivotDateDimension1.Name = "pivotDateDimension1";var pivotDimension1 = new IgbPivotDimension();
                pivotDimension1.MemberName = "Date";
                pivotDimension1.Enabled = true;
                pivotDimension1.Name = "pivotDimension1";pivotDateDimension1.BaseDimension = pivotDimension1;
                var pivotDateDimensionOptions1 = new IgbPivotDateDimensionOptions();
                pivotDateDimensionOptions1.Years = true;
                pivotDateDimensionOptions1.Months = false;
                pivotDateDimensionOptions1.Quarters = true;
                pivotDateDimensionOptions1.FullDate = false;
                pivotDateDimensionOptions1.Name = "pivotDateDimensionOptions1";pivotDateDimension1.Options = pivotDateDimensionOptions1;
                pivotConfiguration1.Columns = [pivotDateDimension1];
                var pivotDimension2 = new IgbPivotDimension();
                pivotDimension2.MemberName = "ProductName";
                pivotDimension2.SortDirection = SortingDirection.Asc;
                pivotDimension2.Enabled = true;
                pivotDimension2.Name = "pivotDimension2";var pivotDimension3 = new IgbPivotDimension();
                pivotDimension3.MemberName = "SellerCity";
                pivotDimension3.Enabled = true;
                pivotDimension3.Name = "pivotDimension3";pivotConfiguration1.Rows = [pivotDimension2,pivotDimension3];
                var pivotDimension4 = new IgbPivotDimension();
                pivotDimension4.MemberName = "SellerName";
                pivotDimension4.Enabled = true;
                pivotDimension4.Name = "pivotDimension4";pivotConfiguration1.Filters = [pivotDimension4];
                var pivotValue1 = new IgbPivotValue();
                pivotValue1.Member = "AmountofSale";
                pivotValue1.DisplayName = "Amount of Sale";
                pivotValue1.Enabled = true;
                pivotValue1.Name = "pivotValue1";var SumOfSale = new IgbPivotAggregator();
                SumOfSale.Key = "SUM";
                SumOfSale.Label = "Sum of Sale";
                SumOfSale.AggregatorScript = "PivotDataFlatAggregateSumSale";
                SumOfSale.AggregatorName = PivotAggregationType.SUM;
                SumOfSale.Name = "SumOfSale";var MinOfSale = new IgbPivotAggregator();
                MinOfSale.Key = "MIN";
                MinOfSale.Label = "Minimum of Sale";
                MinOfSale.AggregatorScript = "PivotDataFlatAggregateMinSale";
                MinOfSale.AggregatorName = PivotAggregationType.MIN;
                MinOfSale.Name = "MinOfSale";var MaxOfSale = new IgbPivotAggregator();
                MaxOfSale.Key = "MAX";
                MaxOfSale.Label = "Maximum of Sale";
                MaxOfSale.AggregatorName = PivotAggregationType.MAX;
                MaxOfSale.AggregatorScript = "PivotDataFlatAggregateMaxSale";
                MaxOfSale.Name = "MaxOfSale";pivotValue1.AggregateList = [SumOfSale,MinOfSale,MaxOfSale];
                pivotConfiguration1.Values = [pivotValue1];

                this._pivotConfiguration1 = pivotConfiguration1;
            }
            return this._pivotConfiguration1;
        }
    }

    private PivotDataFlat _pivotDataFlat = null;
    public PivotDataFlat PivotDataFlat
    {
        get
        {
            if (_pivotDataFlat == null)
            {
                _pivotDataFlat = new PivotDataFlat();
            }
            return _pivotDataFlat;
        }
    }

}