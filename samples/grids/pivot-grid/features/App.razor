@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical">

    <div class="container vertical fill">
        <IgbPivotGrid
        Data="PivotDataFlat"
        Name="grid"
        @ref="grid"
        RowSelection="GridSelectionMode.Single"
        SuperCompactMode="true"
        PivotConfiguration="PivotConfiguration1">
        </IgbPivotGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;

    }

    private IgbPivotGrid grid;
    private IgbPivotConfiguration _pivotConfiguration1 = null;
    public IgbPivotConfiguration PivotConfiguration1
    {
        get
        {
            if (this._pivotConfiguration1 == null)
            {
                var pivotConfiguration1 = new IgbPivotConfiguration();
                var pivotDateDimension1 = new IgbPivotDateDimension();
                pivotDateDimension1.MemberName = "Date";
                pivotDateDimension1.Enabled = true;
                pivotDateDimension1.Name = "pivotDateDimension1";var pivotDimension1 = new IgbPivotDimension();
                pivotDimension1.MemberName = "Date";
                pivotDimension1.Enabled = true;
                pivotDimension1.Name = "pivotDimension1";pivotDateDimension1.BaseDimension = pivotDimension1;
                var pivotDateDimensionOptions1 = new IgbPivotDateDimensionOptions();
                pivotDateDimensionOptions1.Years = true;
                pivotDateDimensionOptions1.Months = false;
                pivotDateDimensionOptions1.Quarters = true;
                pivotDateDimensionOptions1.FullDate = false;
                pivotDateDimensionOptions1.Name = "pivotDateDimensionOptions1";pivotDateDimension1.Options = pivotDateDimensionOptions1;
                pivotConfiguration1.Columns.Add(pivotDateDimension1);
                var pivotDimension2 = new IgbPivotDimension();
                pivotDimension2.MemberName = "ProductName";
                pivotDimension2.SortDirection = SortingDirection.Asc;
                pivotDimension2.Enabled = true;
                pivotDimension2.Name = "pivotDimension2";pivotConfiguration1.Rows.Add(pivotDimension2);
                var pivotDimension3 = new IgbPivotDimension();
                pivotDimension3.MemberName = "SellerCity";
                pivotDimension3.Enabled = true;
                pivotDimension3.Name = "pivotDimension3";pivotConfiguration1.Rows.Add(pivotDimension3);
                var pivotDimension4 = new IgbPivotDimension();
                pivotDimension4.MemberName = "SellerName";
                pivotDimension4.Enabled = true;
                pivotDimension4.Name = "pivotDimension4";pivotConfiguration1.Filters.Add(pivotDimension4);
                var pivotValue1 = new IgbPivotValue();
                pivotValue1.Member = "AmountofSale";
                pivotValue1.DisplayName = "Amount of Sale";
                pivotValue1.DataType = GridColumnDataType.Currency;
                pivotValue1.Enabled = true;
                pivotValue1.Name = "pivotValue1";var pivotAggregator1 = new IgbPivotAggregator();
                pivotAggregator1.Key = "SUM";
                pivotAggregator1.Label = "Sum of Sale";
                pivotAggregator1.AggregatorScript = "PivotDataFlatAggregateSumSale";
                pivotAggregator1.Name = "pivotAggregator1";pivotValue1.Aggregate = pivotAggregator1;
                var pivotAggregator2 = new IgbPivotAggregator();
                pivotAggregator2.Key = "SUM";
                pivotAggregator2.Label = "Sum of Sale";
                pivotAggregator2.AggregatorScript = "PivotDataFlatAggregateSumSale";
                pivotAggregator2.Name = "pivotAggregator2";pivotValue1.AggregateList.Add(pivotAggregator2);
                var pivotAggregator3 = new IgbPivotAggregator();
                pivotAggregator3.Key = "MIN";
                pivotAggregator3.Label = "Minimum of Sale";
                pivotAggregator3.AggregatorScript = "PivotDataFlatAggregateMinSale";
                pivotAggregator3.Name = "pivotAggregator3";pivotValue1.AggregateList.Add(pivotAggregator3);
                var pivotAggregator4 = new IgbPivotAggregator();
                pivotAggregator4.Key = "MAX";
                pivotAggregator4.Label = "Maximum of Sale";
                pivotAggregator4.AggregatorScript = "PivotDataFlatAggregateMaxSale";
                pivotAggregator4.Name = "pivotAggregator4";pivotValue1.AggregateList.Add(pivotAggregator4);
                pivotConfiguration1.Values.Add(pivotValue1);

                this._pivotConfiguration1 = pivotConfiguration1;
            }
            return this._pivotConfiguration1;
        }
    }

    private PivotDataFlat _pivotDataFlat = null;
    public PivotDataFlat PivotDataFlat
    {
        get
        {
            if (_pivotDataFlat == null)
            {
                _pivotDataFlat = new PivotDataFlat();
            }
            return _pivotDataFlat;
        }
    }

}