@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical ig-typography">
    <div class="options vertical">
        <IgbPropertyEditorPanel
        Name="PropertyEditorHierarchicalGrid"
        @ref="propertyEditorHierarchicalGrid"

        DescriptionType="WebHierarchicalGrid"
        IsHorizontal="true"
        IsWrappingEnabled="true">
            <IgbPropertyEditorPropertyDescription
            Label="Hierarchical Grid Cell Selection"
            PropertyPath="CellSelection"
            Name="CellSelectionEditorHierarchicalGrid"
            @ref="cellSelectionEditorHierarchicalGrid"
            ValueType="PropertyEditorValueType.EnumValue">
            </IgbPropertyEditorPropertyDescription>

            <IgbPropertyEditorPropertyDescription
            Label="Row Island Cell Selection"
            PropertyPath=""
            Name="CellSelectionEditorRowIsland"
            @ref="cellSelectionEditorRowIsland"
            ValueType="PropertyEditorValueType.EnumValue"
            DropDownNames="@(new string[] { "None", "Single", "Multiple", "MultipleCascade" })"
            DropDownValues="@(new string[] { "None", "Single", "Multiple", "MultipleCascade" })"
            ChangedScript="WebRowIslandCellSelectionChange">
            </IgbPropertyEditorPropertyDescription>

        </IgbPropertyEditorPanel>

    </div>
    <div class="container vertical fill">
        <IgbHierarchicalGrid
        AutoGenerate="false"
        Data="SingersData"
        PrimaryKey="ID"
        Id="hierarchicalGrid"
        Name="hierarchicalGrid"
        @ref="hierarchicalGrid">
            <IgbColumn
            Field="Artist"
            Header="Artist"
            DataType="GridColumnDataType.String">
            </IgbColumn>

            <IgbColumn
            Field="HasGrammyAward"
            Header="Has Grammy Award"
            DataType="GridColumnDataType.Boolean">
            </IgbColumn>

            <IgbColumn
            Field="Debut"
            Header="Debut"
            DataType="GridColumnDataType.Number">
            </IgbColumn>

            <IgbColumn
            Field="GrammyNominations"
            Header="Grammy Nominations"
            DataType="GridColumnDataType.Number"
            HasSummary="true">
            </IgbColumn>

            <IgbColumn
            Field="GrammyAwards"
            Header="Grammy Awards"
            DataType="GridColumnDataType.Number"
            HasSummary="true">
            </IgbColumn>

            <IgbRowIsland
            ChildDataKey="Albums"
            AutoGenerate="false"
            Name="rowIsland"
            @ref="rowIsland">
                <IgbColumn
                Field="Album"
                Header="Album"
                DataType="GridColumnDataType.String">
                </IgbColumn>

                <IgbColumn
                Field="LaunchDate"
                Header="Launch Date"
                DataType="GridColumnDataType.Date">
                </IgbColumn>

                <IgbColumn
                Field="BillboardReview"
                Header="Billboard Review"
                DataType="GridColumnDataType.String">
                </IgbColumn>

                <IgbColumn
                Field="USBillboard200"
                Header="US Billboard 200"
                DataType="GridColumnDataType.String">
                </IgbColumn>

            </IgbRowIsland>

        </IgbHierarchicalGrid>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditorHierarchicalGrid = this.propertyEditorHierarchicalGrid;
        var cellSelectionEditorHierarchicalGrid = this.cellSelectionEditorHierarchicalGrid;
        var cellSelectionEditorRowIsland = this.cellSelectionEditorRowIsland;
        var hierarchicalGrid = this.hierarchicalGrid;
        var rowIsland = this.rowIsland;

        this.BindElements = () => {
            propertyEditorHierarchicalGrid.Target = this.hierarchicalGrid;
        };
        this.BindElements();

    }

    private IgbPropertyEditorPanel propertyEditorHierarchicalGrid;
    private IgbPropertyEditorPropertyDescription cellSelectionEditorHierarchicalGrid;
    private IgbPropertyEditorPropertyDescription cellSelectionEditorRowIsland;
    private IgbHierarchicalGrid hierarchicalGrid;
    private IgbRowIsland rowIsland;

    private SingersData _singersData = null;
    public SingersData SingersData
    {
        get
        {
            if (_singersData == null)
            {
                _singersData = new SingersData();
            }
            return _singersData;
        }
    }

}