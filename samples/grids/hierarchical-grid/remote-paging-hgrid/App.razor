@using IgniteUI.Blazor.Controls
@inject NwindDataRecords NwindDataService

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbHierarchicalGrid @ref="grid1" AutoGenerate="false" Moving="true" PagingMode="GridPagingMode.Remote">
            <IgbPaginator @ref="pager" PageChange="OnPageChange" PerPageChange="OnPerPageChange" TotalRecords="totalRecordsCount"></IgbPaginator>
            <IgbColumn Name="OrderDate" Field="OrderDate" Header="Order Date"></IgbColumn>
            <IgbColumn Name="ProductName" Field="ProductName" Header="Product Name"></IgbColumn>
            <IgbColumn Name="QuantityPerUnit" Field="QuantityPerUnit" Header="Quantity Per Unit"></IgbColumn>
            <IgbColumn Name="UnitPrice" Field="UnitPrice" Header="Unit Price"></IgbColumn>
            <IgbColumn Name="SupplierID" Field="SupplierID" Header="Supplier ID"></IgbColumn>
            <IgbColumn Name="UnitsInStock" Field="UnitsInStock" Header="Units In Stock"></IgbColumn>
            <IgbColumn Name="UnitsOnOrder" Field="UnitsOnOrder" Header="Units On Order"></IgbColumn>
            <IgbRowIsland ChildDataKey="Locations" AutoGenerate="false" PrimaryKey="Shop" RowEditable="true">
                <IgbColumn Name="Shop" Field="Shop" Header="Shop"></IgbColumn>
                <IgbColumn Name="LastInventory" Field="LastInventory" Header="Last Inventory"></IgbColumn>
            </IgbRowIsland>
        </IgbHierarchicalGrid>
    </div>
</div>

@code {
    private List<NwindDataItem> data = new List<NwindDataItem>();
    private IgbHierarchicalGrid grid1;
    private int totalRecordsCount;
    private double page = 0;
    private double _perPage = 15;
    private IgbPaginator pager;
    private bool isLoading = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Paginate(0, PerPage);
            totalRecordsCount = await NwindDataService.GetDataLength();
            StateHasChanged();
        }
    }

    private async Task Paginate(double page, double perPage)
    {
        this.page = page;
        double skip = this.page * PerPage;
        double top = PerPage;

        try
        {
            data = await NwindDataService.GetData(Convert.ToInt32(skip), Convert.ToInt32(perPage));
            isLoading = false;
            UpdateUI();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void UpdateUI()
    {
        if (grid1 != null && data != null)
        {
            grid1.Data = data;
        }
    }

    private double PerPage
    {
        get => _perPage;
        set
        {
            _perPage = value;
            new Task(async () => await Paginate(page, PerPage)).Start();
        }
    }

    private async void OnPerPageChange(IgbNumberEventArgs e)
    {
        PerPage = e.Detail;
        await Paginate(0, e.Detail);
    }

    private async void OnPageChange(IgbNumberEventArgs e)
    {
        await Paginate(e.Detail, PerPage);
    }
}