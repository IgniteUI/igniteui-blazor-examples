

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbTreeGrid
        AutoGenerate="false"
        Data="OrdersTreeData"
        Name="grid"
        @ref="grid"
        SortingExpressions="SortingExpression1"
        Id="grid"
        PrimaryKey="ID"
        ForeignKey="ParentID">
            <IgbColumn
            Field="ID"
            Header="Order ID"
            Groupable="true"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Name"
            Header="Name"
            DataType="GridColumnDataType.String"
            Groupable="true"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Category"
            Header="Category"
            DataType="GridColumnDataType.String"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="OrderDate"
            Header="Order Date"
            DataType="GridColumnDataType.Date"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Price"
            DataType="GridColumnDataType.Currency"
            Sortable="true"
            PipeArgs="ColumnPipeArgs1"
            Name="column1"
            @ref="column1">
            </IgbColumn>

            <IgbColumn
            Field="Units"
            Header="Units"
            DataType="GridColumnDataType.Number"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Delivered"
            Header="Units"
            DataType="GridColumnDataType.Boolean"
            Sortable="true">
            </IgbColumn>

        </IgbTreeGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var column1 = this.column1;

    }

    private IgbTreeGrid grid;
    private IgbSortingExpression[] _sortingExpression1 = null;
    public IgbSortingExpression[] SortingExpression1
    {
        get
        {
            if (this._sortingExpression1 == null)
            {
                var sortingExpression1 = new IgbSortingExpression[7];
                var sortingExpression2 = new IgbSortingExpression();
                sortingExpression2.Dir = SortingDirection.Asc;
                sortingExpression2.FieldName = "ID";
                sortingExpression2.IgnoreCase = true;
                sortingExpression1[0] = sortingExpression2;
                var sortingExpression3 = new IgbSortingExpression();
                sortingExpression3.Dir = SortingDirection.Desc;
                sortingExpression3.FieldName = "Name";
                sortingExpression3.IgnoreCase = true;
                sortingExpression1[1] = sortingExpression3;
                var sortingExpression4 = new IgbSortingExpression();
                sortingExpression4.Dir = SortingDirection.Asc;
                sortingExpression4.FieldName = "Category";
                sortingExpression4.IgnoreCase = true;
                sortingExpression1[2] = sortingExpression4;
                var sortingExpression5 = new IgbSortingExpression();
                sortingExpression5.Dir = SortingDirection.Asc;
                sortingExpression5.FieldName = "OrderDate";
                sortingExpression5.IgnoreCase = true;
                sortingExpression1[3] = sortingExpression5;
                var sortingExpression6 = new IgbSortingExpression();
                sortingExpression6.Dir = SortingDirection.Asc;
                sortingExpression6.FieldName = "Price";
                sortingExpression6.IgnoreCase = true;
                sortingExpression1[4] = sortingExpression6;
                var sortingExpression7 = new IgbSortingExpression();
                sortingExpression7.Dir = SortingDirection.Asc;
                sortingExpression7.FieldName = "Units";
                sortingExpression7.IgnoreCase = true;
                sortingExpression1[5] = sortingExpression7;
                var sortingExpression8 = new IgbSortingExpression();
                sortingExpression8.Dir = SortingDirection.Asc;
                sortingExpression8.FieldName = "Delivered";
                sortingExpression8.IgnoreCase = true;
                sortingExpression1[6] = sortingExpression8;
                this._sortingExpression1 = sortingExpression1;
            }
            return this._sortingExpression1;
        }
    }
    private IgbColumn column1;
    private IgbColumnPipeArgs _columnPipeArgs1 = null;
    public IgbColumnPipeArgs ColumnPipeArgs1
    {
        get
        {
            if (this._columnPipeArgs1 == null)
            {
                var columnPipeArgs1 = new IgbColumnPipeArgs();
                columnPipeArgs1.CurrencyCode = "USD";
                columnPipeArgs1.DigitsInfo = "1.2-2";
                this._columnPipeArgs1 = columnPipeArgs1;
            }
            return this._columnPipeArgs1;
        }
    }

    private OrdersTreeData _ordersTreeData = null;
    public OrdersTreeData OrdersTreeData
    {
        get
        {
            if (_ordersTreeData == null)
            {
                _ordersTreeData = new OrdersTreeData();
            }
            return _ordersTreeData;
        }
    }

}