@using Infragistics.Blazor.Controls
@inject IInfragisticsBlazor InfragisticsBlazor;

<div class="igContainer">

    <div class="igOptions-horizontal">
        <div class="igOptions-vertical" style="width: auto">
            <div class="igOptions-button-box" style="width: 150px; background-color: @liveSomePricesBackground">
                <button class="igOptions-button" @onclick="onLiveSomePricesClicked">@liveSomePricesText</button>
            </div>
            <div class="igOptions-button-box" style="width: 150px; background-color: @liveAllPricesBackground">
                <button class="igOptions-button" @onclick="onLiveAllPricesClicked">@liveAllPricesText</button>
            </div>
        </div>

        <div class="igOptions-vertical" style="width: auto">
            <div class="igOptions-horizontal">
                <Switch OnToggle="onToggleGrouping" />
                <label>Grouping</label>
            </div>
            <div class="igOptions-horizontal">
                <Switch OnToggle="onToggleHeat" />
                <label>Heat</label>
            </div>
        </div>

    </div>

    <div class="igComponent">

        @if (data != null)
        {
            <DataGrid Height="calc(100% - 5rem)" Width="100%" @ref="DataGridRef"
                      DataSource="@data"
                      AutoGenerateColumns="false"
                      SelectionMode="@GridSelectionMode.MultipleRow"
                      IsGroupCollapsable="true"
                      RowHeight="32"
                      HeaderClickAction="@HeaderClickAction.SortByMultipleColumnsTriState"
                      ActivationMode="GridActivationMode.Cell"
                      DefaultColumnMinWidth="100">

                <TextColumn Width="140" Field="ID" IsHidden="true" />
                <TextColumn Width="120" Field="Category" />
                <TextColumn Width="110" Field="Type" />
                <TextColumn Width="110" Field="Risk" />

                <NumericColumn Width="120" Field="Open" HeaderText="Open" ShowGroupingSeparator="true" PositivePrefix="$" MinFractionDigits="2" MaxFractionDigits="2" />
                <NumericColumn Width="120" Field="Price" HeaderText="Close" ShowGroupingSeparator="true" PositivePrefix="$" MinFractionDigits="2" MaxFractionDigits="2" />
                <NumericColumn Width="120" Field="Change" MinFractionDigits="2" MaxFractionDigits="2" />
                <NumericColumn Width="180" Field="ChangePercent" NegativeSuffix="%" PositiveSuffix="%" MinFractionDigits="2" MaxFractionDigits="2" />

                <TextColumn Width="120" Field="Contract" />
                <TextColumn Width="130" Field="Settlement" />
                <TextColumn Width="130" Field="Region" />
                <TextColumn Width="120" Field="Country" />

                <NumericColumn Width="110" Field="Buy" ShowGroupingSeparator="true" PositivePrefix="$" MinFractionDigits="2" MaxFractionDigits="2" />
                <NumericColumn Width="110" Field="Sell" ShowGroupingSeparator="true" PositivePrefix="$" MinFractionDigits="2" MaxFractionDigits="2" />
                <NumericColumn Width="130" Field="Spread" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" />
                <NumericColumn Width="130" Field="Volume" ShowGroupingSeparator="true" MinFractionDigits="0" MaxFractionDigits="0" />
                <NumericColumn Width="130" Field="DailyHigh" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                <NumericColumn Width="130" Field="DailyLow" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                <NumericColumn Width="130" Field="YearlyHigh" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                <NumericColumn Width="130" Field="YearlyLow" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                <NumericColumn Width="130" Field="YearlyStart" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />

                <DateTimeColumn Width="140" Field="Maturity" HorizontalAlignment="@CellContentHorizontalAlignment.Right" />
                <TextColumn Width="120" Field="Currency" />
                <TextColumn Width="130" Field="Sector" />
                <TextColumn Width="130" Field="Security" />
                <TextColumn Width="170" Field="Issuer" />

                @*<TemplateColumn Width="130" name="ChangePer" Field="ChangePercent"
                    CellStyleKeyRequested="@onPricePercentStyleKey"
                    CellUpdating="@onPricePercentCellUpdating" />*@
            </DataGrid>
        }


    </div>
</div>

@code {


    public List<PortfolioInfo> data;

    public DateTime lastUpdateTime = new DateTime();
    public int frequency = 1000; // 15
    public int dataVolume = 500;
    public bool isTimerTicking = false;
    public bool isUpdatingAllPrices = false;
    public bool isUpdatingSomePrices = false;
    public string valuesIncreasedColor = "#4EB862";
    public string valuesDecreasedColor = "#FF134A";
    public string valuesDecreasedBorder = "4px solid #FF134A";
    public string valuesIncreasedBorder = "4px solid #4EB862";
    
    public string liveSomePricesBackground = "#5E28E9";
    public string liveAllPricesBackground = "#EF2B76";

    public string liveAllPricesText = "Live All Prices";
    public string liveSomePricesText = "Live Prices";
    public bool liveSomePricesDisabled = false;
    public bool liveAllPricesDisabled = false;
    public bool canvasChecked = false;
    public bool chartOpen = false;
    public bool IsGroupingRows = true;
    public bool IsHeatRows = true;
    public string[] hiddenColumns;
    public string[] allColumns;

    private DataGrid grid;
    public DataGrid DataGridRef
    {
        get { return grid; }
        set { grid = value; StateHasChanged(); this.onGridGroupingAdd(); }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataGridModule.Register(InfragisticsBlazor);

        this.data = PortfolioData.Create(this.dataVolume);
    }

    private void onLiveAllPricesClicked()
    {
        if (this.liveAllPricesDisabled) return;

        Console.WriteLine(">>> onLiveAllPricesClicked");
        this.isUpdatingAllPrices = !this.isUpdatingAllPrices;
        this.isUpdatingSomePrices = false;

        if (this.isTimerTicking)
        {
            this.isTimerTicking = false;
            this.liveAllPricesText = "Live All Prices";
            this.liveAllPricesDisabled = false;
            this.liveSomePricesDisabled = false;
        }
        else
        {
            this.startTicking();
            this.liveAllPricesText = "Stop All Prices";
            this.liveAllPricesDisabled = false;
            this.liveSomePricesDisabled = true;            
        }

        this.liveSomePricesBackground = liveSomePricesDisabled ? "lightgray" : "#5E28E9";
        this.liveAllPricesBackground = liveAllPricesDisabled ? "lightgray" : "#EF2B76";
    }

    private void onLiveSomePricesClicked()
    {
        if (this.liveSomePricesDisabled) return;

        Console.WriteLine(">>> onLiveSomePricesClicked");
        this.isUpdatingAllPrices = false;
        this.isUpdatingSomePrices = !this.isUpdatingSomePrices;

        if (this.isTimerTicking)
        {
            this.isTimerTicking = false;
            this.liveSomePricesText = "Live Prices";
            this.liveSomePricesDisabled = false;
            this.liveAllPricesDisabled = false;
        }
        else
        {
            this.startTicking();
            this.liveSomePricesText = "Stop Prices";
            this.liveSomePricesDisabled = false;
            this.liveAllPricesDisabled = true;
        }

        this.liveSomePricesBackground = liveSomePricesDisabled ? "lightgray" : "#5E28E9";
        this.liveAllPricesBackground = liveAllPricesDisabled ? "lightgray" : "#EF2B76";
    }

    public void stopTicking()
    {
        Console.WriteLine(">>> stopTicking");
        if (this.isTimerTicking)
        {
            this.isTimerTicking = false;
        }
    }

    public void startTicking()
    {
        Console.WriteLine(">>> startTicking");
        if (!this.isTimerTicking)
        {
            this.isTimerTicking = true;
            //Task.Delay(16).ContinueWith((t) => onTimerTick());
            Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());
        }
    }

    public static Random random = new Random();
    public void onTimerTick()
    {
        //Console.WriteLine(">>> onTimerTick");
        if (!this.isTimerTicking)
        { 
            return;
        }
        if (this.grid == null)
        { 
            //Task.Delay(16).ContinueWith((t) => onTimerTick());
            Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());
            return;
        }

        var stillAnimating = false;

        var useClear = this.isUpdatingAllPrices;
        var updateAll = this.isUpdatingAllPrices;

        var toChangeIndexes = new List<bool>();
        foreach (var item in this.data)
        {
            toChangeIndexes.Add(false);
            if (item.PriceHeat != 0)
            {
                stillAnimating = true;
            }
        }

        var toChange = (int)Math.Round(this.dataVolume / 10.0);
        if (updateAll)
        {
            toChange = this.data.Count;
        }
        else
        {
            toChange = (int)(random.Next(2, this.data.Count - 1));
        }
        //Console.WriteLine(">>> onTimerTick toChange " + toChange);

        var sortingByPrice = false;
        for (var i = 0; i < this.grid.SortDescriptions.Count; i++)
        {
            if (this.grid.SortDescriptions[i].Field == "Price" ||
                this.grid.SortDescriptions[i].Field.Contains("Change"))
            {
                sortingByPrice = true;
            }
        }

        var changing = false;
        var toChangeCount = 0;

        var now = DateTime.Now;
        var elapsedTime = now.Subtract(this.lastUpdateTime);
        var elapsedInterval = elapsedTime.TotalMilliseconds > this.frequency;
        if (elapsedInterval)
        {
            Console.WriteLine(">>> onTimerTick elapsedInterval " + elapsedTime);

            this.lastUpdateTime = DateTime.Now;
            for (var i = 0; i < toChange; i++)
            {
                var index = (int)(random.Next(0, this.data.Count - 1));
                //while (toChangeIndexes[index] != true)
                //{
                //    index = (int)Math.Round(random.NextDouble() * this.data.Count - 1);
                //}
                //Console.WriteLine(">>> onTimerTick toChangeIndexes " + index);

                toChangeIndexes[index] = true;
                toChangeCount++;
                changing = true;

            }
            Console.WriteLine(">>> onTimerTick toChangeIndexes " + toChangeCount);
        } 
         
        var dataUpdated = false;

        for (var i = 0; i < this.data.Count; i++)
        {
            var item = this.data[i];
            if (toChangeIndexes[i] == true)
            {
                if (sortingByPrice && !useClear)
                {

                    Console.WriteLine(">>> onTimerTick NotifyInsertItem");

                    this.grid.NotifyRemoveItem(this.data, i, item);
                    PortfolioData.RandomizeDataValues(item);
                    this.grid.NotifyInsertItem(this.data, i, item);
                }
                else
                {
                    PortfolioData.RandomizeDataValues(item);
                }
                dataUpdated = true;

                if (item.Change > 0)
                {
                    item.PriceHeat = 1;
                }
                else
                {
                    item.PriceHeat = -1;
                }
            }
            else
            {
                if (item.PriceHeat > 0)
                {
                    item.PriceHeat -= .06;
                    if (item.PriceHeat < 0)
                    {
                        item.PriceHeat = 0;
                    }
                }
                if (item.PriceHeat < 0)
                {
                    item.PriceHeat += .06;
                    if (item.PriceHeat > 0)
                    {
                        item.PriceHeat = 0;
                    }
                }
            }
        }

        if (dataUpdated)
            Console.WriteLine(">>> onTimerTick dataUpdated");

        if (sortingByPrice && useClear && elapsedInterval)
        {
            this.grid.ActualDataSource.QueueAutoRefresh();
        }

        // if (!useClear) {
        if (!sortingByPrice || !elapsedInterval)
        {
            this.grid.InvalidateVisibleRows();
        }
        // }
        // this.grid.invalidateVisibleRows();

        if (elapsedInterval && this.chartOpen)
        {
            //this.updatePricesByCountry();
            //this.chart.NotifyClearItems(this.pricesByCountry);
        }

        Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());
        this.StateHasChanged();
    }

    private void onToggleHeat(bool isCheched)
    {
        Console.WriteLine(">>> onToggleHeat " + isCheched);
        this.IsHeatRows = isCheched;
    }

    private void onToggleGrouping(bool isCheched)
    {
        Console.WriteLine(">>> onToggleGrouping " + isCheched);

        this.IsGroupingRows = isCheched;
        if (this.IsGroupingRows)
            this.onGridGroupingAdd();
        else
            this.onGridGroupingRemove();
    }

    private void onGridGroupingRemove()
    {
        this.grid.GroupDescriptions.Clear();
        this.grid.Flush();
    }

    private void onGridGroupingAdd()
    {
        var g = new ColumnGroupDescription();
        g.Field = "Category";
        g.SortDirection = ListSortDirection.Descending;
        this.grid.GroupDescriptions.Add(g);

        g = new ColumnGroupDescription();
        g.Field = "Type";
        g.SortDirection = ListSortDirection.Descending;
        this.grid.GroupDescriptions.Add(g);

        g = new ColumnGroupDescription();
        g.Field = "Contract";
        g.SortDirection = ListSortDirection.Descending;
        this.grid.GroupDescriptions.Add(g);
    }
}


@*<Button BackgroundColor="green" DisplayType="@ButtonDisplayStyle.Fab"> </Button>
    <Button BackgroundColor="#FF418A" DisplayType="@ButtonDisplayStyle.Flat"> </Button>
    <Checkbox Checked="true">Checkbox </Checkbox>*@
