@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;

<div class="container vertical">

    <div class="options horizotnal">
        <input type="button" class="options-item" disabled=@IsPinningToLeftDisabled  @onclick="OnPinLeft" value="Pin Left" />
        <input type="button" class="options-item" disabled=@IsPinningToRightDisabled @onclick="OnPinRight" value="Pin Right" />
        <input type="button" class="options-item" @onclick="OnUnPin" value="Unpin Columns" />
    </div>

    <div class="container vertical">

        @if (Data != null)
        {
            <div style="overflow: hidden">
                <IgbDataGrid Height="100%" Width="100%"
                    DefaultColumnMinWidth="120"
                    DataSource="Data"
                    AutoGenerateColumns="false"
                    @ref="DataGridRef">
                    <IgbTextColumn Field="ID" Pinned="PinnedPositions.Left" Width="@("*>110")" />
                    <IgbTextColumn Field="FirstName" Pinned="PinnedPositions.Left" Width="@("*>190")" />
                    <IgbTextColumn Field="LastName" Pinned="PinnedPositions.Left" Width="@("*>190")" />
                    <IgbDateTimeColumn Field="Birthday" Width="@("*>170")" />
                    <IgbNumericColumn Field="Age" Width="@("*>120")" />
                    <IgbImageColumn IsEditable="false" Field="CountryFlag" />
                    <IgbTextColumn Field="Street" Width="@("*>160")" />
                    <IgbTextColumn Field="City" Width="260" />
                    <IgbTextColumn Field="Country" Width="@("*>170")" />
                    <IgbNumericColumn Field="Salary" Width="@("*>170")" />
                    <IgbNumericColumn Field="Sales" Width="@("*>120")" />
                    <IgbNumericColumn Field="Salary" Width="@("*>120")" PositivePrefix="$"
                                ShowGroupingSeparator="true"
                                MaxFractionDigits="0"
                                MinFractionDigits="0" />
                </IgbDataGrid>
            </div>
        }

    </div>
</div>

@code {

    private List<Employee> Data;
    public IgbDataGrid grid;
    public IgbDataGrid DataGridRef
    {
        get
        {
            return grid;
        }
        set
        {
            grid = value;
            StateHasChanged();
        }
    }
    public Boolean IsPinningToLeftDisabled { get; set; } = false;
    public Boolean IsPinningToRightDisabled { get; set; } = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbDataGridModule.Register(IgniteUIBlazor);

        this.Data = EmployeeData.Create(200, false);

    }

    private async Task OnPinLeft()
    {
        IsPinningToLeftDisabled = true;
        IsPinningToRightDisabled = true;

        var idColumn = this.grid.ActualColumns[0];
        var firstNameColumn = this.grid.ActualColumns[1];
        var lastNameColumn = this.grid.ActualColumns[2];
        await this.grid.PinColumnAsync(idColumn, PinnedPositions.Left);
        await this.grid.PinColumnAsync(firstNameColumn, PinnedPositions.Left);
        await this.grid.PinColumnAsync(lastNameColumn, PinnedPositions.Left);
    }

    private async Task OnPinRight()
    {
        IsPinningToLeftDisabled = true;
        IsPinningToRightDisabled = true;

        var streetColumn = this.grid.ActualColumns[6];
        var cityColumn = this.grid.ActualColumns[7];
        var countryColumn = this.grid.ActualColumns[8];
        await this.grid.PinColumnAsync(streetColumn, PinnedPositions.Right);
        await this.grid.PinColumnAsync(cityColumn, PinnedPositions.Right);
        await this.grid.PinColumnAsync(countryColumn, PinnedPositions.Right);
    }

    private async Task OnUnPin()
    {
        IsPinningToLeftDisabled = false;
        IsPinningToRightDisabled = false;

        var idColumn = this.grid.ActualColumns[0];
        var firstNameColumn = this.grid.ActualColumns[1];
        var lastNameColumn = this.grid.ActualColumns[2];
        await this.grid.PinColumnAsync(idColumn, PinnedPositions.None);
        await this.grid.PinColumnAsync(firstNameColumn, PinnedPositions.None);
        await this.grid.PinColumnAsync(lastNameColumn, PinnedPositions.None);

        var streetColumn = this.grid.ActualColumns[6];
        var cityColumn = this.grid.ActualColumns[7];
        var countryColumn = this.grid.ActualColumns[8];
        await this.grid.PinColumnAsync(streetColumn, PinnedPositions.None);
        await this.grid.PinColumnAsync(cityColumn, PinnedPositions.None);
        await this.grid.PinColumnAsync(countryColumn, PinnedPositions.None);
    }

}
