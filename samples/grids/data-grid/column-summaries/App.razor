@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="container vertical">
    <div class="options horizotnal">
        <span class="options-item">Summary Scope:</span>
        <select class="options-item" @bind="GridSummaryScope">
            <option>@DataSourceSummaryScope.Root</option>
            <option>@DataSourceSummaryScope.Groups</option>
            <option>@DataSourceSummaryScope.Both</option>
            <option>@DataSourceSummaryScope.None</option>
        </select>
        <span class="options-item" >Group Summary Display Mode:</span>
        <select class="options-item" @bind="GridGroupSummaryDisplayMode">
            <option>@GroupSummaryDisplayMode.List</option>
            <option>@GroupSummaryDisplayMode.Cells</option>
            <option>@GroupSummaryDisplayMode.RowTop</option>
            <option>@GroupSummaryDisplayMode.RowBottom</option>
            <option>@GroupSummaryDisplayMode.None</option>
        </select>
    </div>
    <div class="container vertical">
        @if (Data != null)
        {
            <div style="overflow: hidden">
                <DataGrid Height="100%" Width="100%" @ref="@DataGridRef"
                        SummaryScope="@GridSummaryScope"
                        GroupSummaryDisplayMode="@GridGroupSummaryDisplayMode"
                        AutoGenerateColumns="false"
                        IsGroupCollapsable="true"
                        GroupHeaderDisplayMode="@DataSourceSectionHeaderDisplayMode.Combined"
                        IsColumnOptionsEnabled="true"
                        DataSource="Data">
                    <NumericColumn Field="ID" Width="@("*>120")" HeaderText="ID" HorizontalAlignment="@CellContentHorizontalAlignment.Center" />
                    <TextColumn Field="ProductName" Width="@("*>130")" HeaderText="Product" />
                    <NumericColumn Field="BundlePrice" PositivePrefix="$" Width="@("*>120")" ShowGroupingSeparator="true" HeaderText="Price" />
                    <NumericColumn Field="OrderItems" Width="@("*>140")" HeaderText="Orders" />
                    <NumericColumn Field="OrderValue" Width="@("*>160")" ShowGroupingSeparator="true" HeaderText="Order Totals" PositivePrefix="$" />
                    <DateTimeColumn Field="OrderDate" Width="@("*>150")" HeaderText="Order Date" HorizontalAlignment="@CellContentHorizontalAlignment.Right" />
                    <NumericColumn Field="Profit" Width="@("*>140")" ShowGroupingSeparator="true" HeaderText="Profit" PositivePrefix="$" />
                    <TextColumn Field="Country" Width="@("*>170")" HeaderText="Ship Country" />
                </DataGrid>
            </div>
        }
    </div>
</div>

@code {

    private List<Sale> Data;
    private DataSourceSummaryScope GridSummaryScope;
    private GroupSummaryDisplayMode GridGroupSummaryDisplayMode;

    private DataGrid _grid;
    private DataGrid DataGridRef
    {
        get { return _grid; }
        set
        {
            _grid = value;
            this.OnDataGridRef();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DataGridModule.Register(IgniteUIBlazor);
        GridColumnOptionsModule.Register(IgniteUIBlazor);

        this.Data = SalesData.Create(50);

        this.GridSummaryScope = DataSourceSummaryScope.Root;
        this.GridGroupSummaryDisplayMode = GroupSummaryDisplayMode.RowBottom;
    }

    private void OnDataGridRef()
    {
        var productGroup = new ColumnGroupDescription()
        {
            Field = "ProductName",
            DisplayName = "ProductName"
        };

        var productCount = new ColumnSummaryDescription()
        {
            Field = "ProductName",
            Operand = SummaryOperand.Count
        };

        var priceMin = new ColumnSummaryDescription()
        {
            Field = "BundlePrice",
            Operand = SummaryOperand.Min
        };

        var priceMax = new ColumnSummaryDescription()
        {
            Field = "BundlePrice",
            Operand = SummaryOperand.Max
        };

        var orderSum = new ColumnSummaryDescription()
        {
            Field = "OrderItems",
            Operand = SummaryOperand.Sum
        };

        var orderValueSum = new ColumnSummaryDescription()
        {
            Field = "OrderValue",
            Operand = SummaryOperand.Sum
        };

        var orderValueAvg = new ColumnSummaryDescription()
        {
            Field = "OrderValue",
            Operand = SummaryOperand.Average
        };

        var orderDateMin = new ColumnSummaryDescription()
        {
            Field = "OrderDate",
            Operand = SummaryOperand.Min,
            CalculatorDisplayName = "First"
        };

        var orderDateMax = new ColumnSummaryDescription()
        {
            Field = "OrderDate",
            Operand = SummaryOperand.Max,
            CalculatorDisplayName = "Last"
        };

        var sum1 = new ColumnSummaryDescription()
        {
            Field = "Profit",
            Operand = SummaryOperand.Sum
        };

        var avg2 = new ColumnSummaryDescription()
        {
            Field = "Profit",
            Operand = SummaryOperand.Average
        };

        //var countryCustomSummary = new ColumnSummaryDescription()
        //{
        //    Field = "Country",
        //    Operand = SummaryOperand.Custom,
        //    //ProvideCalculatorScript = "onProvideCalculator" // <= This seems like what needs to be done, but how do you specify the logic that the calculator uses?
        //};

        //TODO CUSTOM SUMMARY

        this.DataGridRef.GroupDescriptions.Add(productGroup);

        this.DataGridRef.SummaryDescriptions.Add(productCount);
        this.DataGridRef.SummaryDescriptions.Add(priceMin);
        this.DataGridRef.SummaryDescriptions.Add(priceMax);
        this.DataGridRef.SummaryDescriptions.Add(orderSum);
        this.DataGridRef.SummaryDescriptions.Add(orderValueSum);
        this.DataGridRef.SummaryDescriptions.Add(orderValueAvg);
        this.DataGridRef.SummaryDescriptions.Add(orderDateMin);
        this.DataGridRef.SummaryDescriptions.Add(orderDateMax);
        this.DataGridRef.SummaryDescriptions.Add(sum1);
        this.DataGridRef.SummaryDescriptions.Add(avg2);
        //this.DataGridRef.SummaryDescriptions.Add(countryCustomSummary);
    }
}
