@using IgniteUI.Blazor.Controls
@inject IJSRuntime JSRuntime;

<div class="container vertical">
    <div class="options horizontal">
        <span class="options-item">Header Click Action: </span>
        <select class="options-item" @bind="GridHeaderClickAction">
            <option>@HeaderClickAction.SortByMultipleColumns</option>
            <option>@HeaderClickAction.SortByMultipleColumnsTriState</option>
            <option>@HeaderClickAction.SortByOneColumnOnly</option>
            <option>@HeaderClickAction.SortByOneColumnOnlyTriState</option>
        </select>
    </div>

    <div class="container vertical">
        @if (Data != null)
        {
            <div style="overflow: hidden">
                <IgbDataGrid Height="100%" Width="100%"
                      @ref="DataGridRef"
                      HeaderClickAction="@GridHeaderClickAction"
                      AutoGenerateColumns="false"
                      DataSource="Data"
                      DefaultColumnMinWidth="100"
                      IsColumnOptionsEnabled="true">
                    <IgbTextColumn Field="ID" Width="@("*>110")" HorizontalAlignment="@CellContentHorizontalAlignment.Center" />
                    <IgbTextColumn Field="Property" Width="@("*>150")" HeaderText="Property" />
                    <IgbImageColumn IsEditable="false" Field="CountryFlag" HeaderText="Country" Width="@("*>160")" ContentOpacity="1"
                                HorizontalAlignment="@CellContentHorizontalAlignment.Center" PaddingTop="5" PaddingBottom="5" />
                    <IgbTextColumn Field="City" Width="@("*>150")" />
                    <IgbNumericColumn Field="Price" Width="@("*>130")" PositivePrefix="$" ShowGroupingSeparator="true" />
                    <IgbNumericColumn Field="Rooms" Width="@("*>110")" />
                </IgbDataGrid>
            </div>
        }
    </div>
</div>

@code {

    private List<RealEstate> Data;
    private HeaderClickAction GridHeaderClickAction;

    private IgbDataGrid grid;
    private IgbDataGrid DataGridRef
    {
        get { return grid; }
        set { grid = value; OnGridRefChanged(); StateHasChanged(); }
    }

    protected override void OnInitialized()
    {
        this.Data = RealEstateData.Create(100);
        this.GridHeaderClickAction = HeaderClickAction.SortByMultipleColumnsTriState;
    }

    private void OnGridRefChanged()
    {
        if (this.DataGridRef != null)
        {
            this.DataGridRef.SortDescriptions.Add(new IgbColumnSortDescription()
            {
                Field = "Property",
                SortDirection = ListSortDirection.Descending
            });
        }
    }
}
