@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <span class="igOptions-item">Header Click Action: </span>
        <select class="igOptions-item" @bind="GridHeaderClickAction">
            <option>@HeaderClickAction.SortByMultipleColumns</option>
            <option>@HeaderClickAction.SortByMultipleColumnsTriState</option>
            <option>@HeaderClickAction.SortByOneColumnOnly</option>
            <option>@HeaderClickAction.SortByOneColumnOnlyTriState</option>
        </select>
    </div>

    <div class="igComponent">
        @if (DataSource != null)
        {
            <DataGrid Height="100%" Width="100%" @ref="DataGridRef"
                      HeaderClickAction="@GridHeaderClickAction"
                      AutoGenerateColumns="false"
                      DataSource="@DataSource"
                      DefaultColumnMinWidth="100"
                      IsColumnOptionsEnabled="true">
                <TextColumn Field="ID" Width="@("*>110")" HorizontalAlignment="@CellContentHorizontalAlignment.Center" />
                <TextColumn Field="Property" Width="@("*>150")" HeaderText="Property" />
                <ImageColumn IsEditable="false" Field="CountryFlag" HeaderText="Country" Width="@("*>160")" ContentOpacity="1"
                             HorizontalAlignment="@CellContentHorizontalAlignment.Center" PaddingTop="5" PaddingBottom="5" />
                <TextColumn Field="City" Width="@("*>150")" />
                <NumericColumn Field="Price" Width="@("*>130")" PositivePrefix="$" ShowGroupingSeparator="true" />
                <NumericColumn Field="Rooms" Width="@("*>110")" />
            </DataGrid>
        }
    </div>
</div>

@code {

    private List<RealEstate> DataSource;
    private HeaderClickAction GridHeaderClickAction;

    private DataGrid grid;
    private DataGrid DataGridRef
    {
        get { return grid; }
        set { grid = value; OnGridRefChanged(); StateHasChanged(); }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DataGridModule.Register(IgniteUIBlazor);

        this.DataSource = RealEstateData.Create(100);
        this.GridHeaderClickAction = HeaderClickAction.SortByMultipleColumnsTriState;
    }

    private void OnGridRefChanged()
    {
        if (this.DataGridRef != null)
        {
            this.DataGridRef.SortDescriptions.Add(new ColumnSortDescription()
            {
                Field = "Property",
                SortDirection = ListSortDirection.Descending
            });
        }
    }
}
