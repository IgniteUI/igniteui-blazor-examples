@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http;

@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">

    <div class="options horizontal">
    <select @onchange="@((args) => OnLanguageChanged(args.Value.ToString()))">
        <option value="en">English</option>
        <option value="fr">French</option>
        <option value="ja">Japanese</option>
    </select>
    </div>
    <div class="container vertical">
        
        @if (Employees != null)
        {
            <div style="overflow: hidden">
                <IgbDataGrid Height="100%" Width="100%"
                      @ref="@DataGridRef"
                      RowHeight="50" 
                      DataSource="Employees"
                      AutoGenerateColumns="false"
                      IsColumnOptionsEnabled="true"
                      IsGroupCollapsable="true"
                      ActivationMode="GridActivationMode.Cell"
                      SummaryScope="@SummaryScope.Root"
                      GroupSummaryDisplayMode="@GroupSummaryDisplayMode.RowBottom"
                      GroupHeaderDisplayMode="@GroupHeaderDisplayMode.Combined"
                      CornerRadiusTopLeft="0"
                      CornerRadiusTopRight="0"
                      ColumnMovingSeparatorWidth="2"
                      ColumnMovingMode="ColumnMovingMode.Deferred"
                      ColumnMovingAnimationMode="ColumnMovingAnimationMode.SlideOver"
                      ColumnShowingAnimationMode="ColumnShowingAnimationMode.SlideFromRightAndFadeIn"
                      ColumnHidingAnimationMode="ColumnHidingAnimationMode.SlideToRightAndFadeOut"
                      SelectionMode="GridSelectionMode.SingleRow">

                    <IgbImageColumn IsEditable="false" Width="@("*>120")" Field="Photo" PaddingTop="5" PaddingBottom="5" PaddingRight="10"
                                HorizontalAlignment="@CellContentHorizontalAlignment.Stretch"  />

                    <IgbTextColumn Width="@("*>130")" Field="Name" />

                    @*NOTE: CellUpdatingScript is implemented in wwwroot/*.js file *@
                    <IgbTemplateColumn Width="@("*>160")" Field="Sales" CellUpdatingScript="onUpdatingSalesColumn"
                                    HorizontalAlignment="@CellContentHorizontalAlignment.Center" />

                    <IgbNumericColumn Width="@("*>130")" Field="Salary" PositivePrefix="$"
                                ShowGroupingSeparator="true"
                                MaxFractionDigits="0"
                                MinFractionDigits="0" />

                    <IgbNumericColumn Width="100" Field="Age" HorizontalAlignment="@CellContentHorizontalAlignment.Center"/>
                    <IgbDateTimeColumn Width="@("*>140")" Field="Birthday" HeaderText="Date of Birth" />

                    <IgbImageColumn IsEditable="false" Width="@("*>110")" Field="CountryFlag" HeaderText="Country" PaddingTop="5" PaddingBottom="5" PaddingRight="10"
                                HorizontalAlignment="@CellContentHorizontalAlignment.Stretch" />

                    @*NOTE: CellUpdatingScript is implemented in wwwroot/*.js file *@
                    <IgbTemplateColumn Width="@("*>170")" Field="Address" CellUpdatingScript="onUpdatingAddressColumn" />
                    <IgbTemplateColumn Width="@("*>130")" Field="Phone" CellUpdatingScript="onUpdatingPhoneColumn" />

                    <IgbTextColumn Width="@("*>120")" Field="Income" />
                    <IgbTextColumn Width="@("*>120")" Field="Email" IsEditable="false" />

                </IgbDataGrid>
            </div>
        }


    </div>
</div>

@code {

    private List<Employee> Employees;

    private IgbDataGrid _grid;
    private IgbDataGrid DataGridRef
    {
        get { return _grid; }
        set { _grid = value; this.OnDataGridRef(); StateHasChanged(); }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbDataGridModule.Register(IgniteUIBlazor);
        IgbColumnChooserModule.Register(IgniteUIBlazor);

        this.Employees = EmployeeData.Create(100, false);

        Console.WriteLine("Data " + this.Employees.Count);
    }

    private void OnDataGridRef()
    {
        var peopleGroup = new IgbColumnGroupDescription() { Field = "Country", DisplayName = "Country" };
        var incomeGroup = new IgbColumnGroupDescription() { Field = "Income", DisplayName = "Income" };
        this._grid.GroupDescriptions.Add(peopleGroup);
        this._grid.GroupDescriptions.Add(incomeGroup);

        var ageSummary = new IgbColumnSummaryDescription() { Field = "Age", Operand = SummaryOperand.Average };
        var peopleSummary = new IgbColumnSummaryDescription() { Field = "Photo", Operand = SummaryOperand.Count };
        var salarySummary = new IgbColumnSummaryDescription() { Field = "Salary", Operand = SummaryOperand.Sum };
        var saleSummary = new IgbColumnSummaryDescription() { Field = "Sales", Operand = SummaryOperand.Max };

        this._grid.SummaryDescriptions.Add(ageSummary);
        this._grid.SummaryDescriptions.Add(peopleSummary);
        this._grid.SummaryDescriptions.Add(salarySummary);
        this._grid.SummaryDescriptions.Add(saleSummary);
    }

    private async void OnLanguageChanged(string language)
    {
        if (language != null)
        {
      
            var strings = await Http.GetStringAsync("resources/data-grid." + language + ".json");
            await DataGridRef.SetCustomizedStringAsync("en", strings);

            // Strings for the summary text within a cell come from the datasource resource set so we will replace those values with the desired ones
            // directly on the datasource.
            var dataSourceStrings = await Http.GetStringAsync("resources/data-source." + language + ".json");
            await DataGridRef.ActualDataSource.SetCustomizedStringAsync("en", dataSourceStrings);

            // This helps redraw the grid cells which will update any visible summary cells so their text updates to show the new language.
            await DataGridRef.InvalidateVisibleRowsAsync();

            // There is another way to update text if all you desire is updating one or two specific strings. This option requires that you load the locale module for the desired
            // language because it will replace specific values within the resource set and if the resource set has not been loaded then it can't replace it. With this method
            // you can target a specific string by key, in this case the "Apply" key, and replace it with whatever text you like. For IgbDataGrid this method is not useful for anything
            // besides English since we do not provide any other languages yet however it is useful for charts since we do provide multiple languages.
            
            //await DataGridRef.SetCustomizedStringAsync("en", "Apply", "Hello World");
        }
    }

}