@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http;

@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    @if (Employees != null)
    {
        <div style="overflow: hidden">
            <IgbDataGrid Height="100%" Width="100%"
                    @ref="@DataGridRef"
                    RowHeight="50"
                    DataSource="Employees"
                    AutoGenerateColumns="false"
                    IsColumnOptionsEnabled="true"
                    IsGroupCollapsable="true"
                    ActivationMode="GridActivationMode.Cell"
                    SummaryScope="@SummaryScope.Root"
                    SelectionMode="GridSelectionMode.Single">

                <IgbImageColumn IsEditable="false" Width="@("*>120")" Field="Photo" HeaderText="写真" PaddingTop="5" PaddingBottom="5" PaddingRight="10"
                            HorizontalAlignment="@CellContentHorizontalAlignment.Stretch"  />

                <IgbTextColumn Width="@("*>130")" Field="Name" HeaderText="名前" />

                <IgbNumericColumn Width="@("*>130")" Field="Sales"
                                HorizontalAlignment="@CellContentHorizontalAlignment.Center" HeaderText="売上高" />

                <IgbNumericColumn Width="@("*>130")" Field="Salary" PositivePrefix="$"
                            ShowGroupingSeparator="true"
                            MaxFractionDigits="0"
                            MinFractionDigits="0"
                            HeaderText="給料"/>

                <IgbNumericColumn Width="100" Field="Age" HorizontalAlignment="@CellContentHorizontalAlignment.Center" HeaderText="年齢"/>
                <IgbDateTimeColumn Width="@("*>140")" Field="Birthday" HeaderText="生年月日" />

                <IgbImageColumn IsEditable="false" Width="@("*>110")" Field="CountryFlag" HeaderText="国旗" PaddingTop="5" PaddingBottom="5" PaddingRight="10"
                            HorizontalAlignment="@CellContentHorizontalAlignment.Stretch" />

                <IgbTextColumn Width="@("*>170")" Field="Address" HeaderText="住所"/>
                <IgbTextColumn Width="@("*>130")" Field="Phone" HeaderText="電話"/>

                <IgbTextColumn Width="@("*>120")" Field="Income" HeaderText="所得"/>

            </IgbDataGrid>
        </div>
    }
</div>

@code {

    private List<EmployeeJA> Employees;
    private String GridStrings;
    private IgbDataGrid _grid;
    private IgbDataGrid DataGridRef
    {
        get { return _grid; }
        set { _grid = value; Task.Delay(1).ContinueWith((t) => this.OnDataGridRef()); StateHasChanged(); }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbDataGridModule.Register(IgniteUIBlazor);
        IgbColumnChooserModule.Register(IgniteUIBlazor);

        this.Employees = EmployeeDataJA.Create(100, false);
    }

    private async Task OnDataGridRef()
    {
        var countryGroup = new IgbColumnGroupDescription() { Field = "Country", DisplayName = "国" };
        var incomeGroup = new IgbColumnGroupDescription() { Field = "Income", DisplayName = "所得" };
        this._grid.GroupDescriptions.Add(countryGroup);
        this._grid.GroupDescriptions.Add(incomeGroup);

        var ageSummary = new IgbColumnSummaryDescription() { Field = "Age", Operand = SummaryOperand.Average };
        var photoSummary = new IgbColumnSummaryDescription() { Field = "Photo", Operand = SummaryOperand.Count };
        var salarySummary = new IgbColumnSummaryDescription() { Field = "Salary", Operand = SummaryOperand.Sum };
        var saleSummary = new IgbColumnSummaryDescription() { Field = "Sales", Operand = SummaryOperand.Max };

        this._grid.SummaryDescriptions.Add(ageSummary);
        this._grid.SummaryDescriptions.Add(photoSummary);
        this._grid.SummaryDescriptions.Add(salarySummary);
        this._grid.SummaryDescriptions.Add(saleSummary);

        //Specific resource strings for Column-Options
        await DataGridRef.SetCustomizedStringAsync("en", DataGridResourceStrings());
        //Specific resource strings for Summaries
        await DataGridRef.ActualDataSource.SetCustomizedStringAsync("en", DataGridResourceStrings());
        await DataGridRef.InvalidateVisibleRowsAsync();
    }

    public string DataGridResourceStrings()
    {
        GridStrings =
            "{\"Apply\":\"適用\"," +
            "\"Cancel\":\"キャンセル\"," +
            "\"Clear_Column_Filter\":\"列フィルターをクリア\"," +
            "\"Column_Move\":\"移動\"," +
            "\"Column_Move_Left\":\"左\"," +
            "\"Column_Move_Right\":\"右\"," +
            "\"Column_Options_Summaries\":\"集計\"," +
            "\"Column_Options_Summary_Average\":\"平均\"," +
            "\"Column_Options_Summary_Count\":\"カウント\"," +
            "\"Column_Options_Summary_Maximum\":\"最大値\"," +
            "\"Column_Options_Summary_Minimum\":\"最小値\"," +
            "\"Column_Options_Summary_Sum\":\"合計値\"," +
            "\"Column_Pin\":\"ピン固定\"," +
            "\"Column_Pin_Left\":\"左\"," +
            "\"Column_Pin_Right\":\"右\"," +
            "\"Column_Sort\":\"ソート\"," +
            "\"Column_Sort_Ascending\":\"昇順\"," +
            "\"Column_Sort_Descending\":\"降順\"," +
            "\"ComparisonOperator_Bottom\":\"下\"," +
            "\"ComparisonOperator_BottomPercentile\":\"下位の百分位数\"," +
            "\"ComparisonOperator_Contains\":\"～を含む\"," +
            "\"ComparisonOperator_DoesNotContain\":\"～を含まない\"," +
            "\"ComparisonOperator_DoesNotEndWith\":\"～で終わらない\"," +
            "\"ComparisonOperator_DoesNotMatch\":\"～と一致しない\"," +
            "\"ComparisonOperator_DoesNotStartWith\":\"～で始まらない\"," +
            "\"ComparisonOperator_Empty\":\"空\"," +
            "\"ComparisonOperator_EndsWith\":\"次の値で終わる\"," +
            "\"ComparisonOperator_Equals\":\"等しい\"," +
            "\"ComparisonOperator_False\":\"False\"," +
            "\"ComparisonOperator_GreaterThan\":\"次の値より大きい\"," +
            "\"ComparisonOperator_GreaterThanOrEqualTo\":\"次の値より大きいまたは等しい\"," +
            "\"ComparisonOperator_LastMonth\":\"先月\"," +
            "\"ComparisonOperator_LastQuater\":\"前四半期\"," +
            "\"ComparisonOperator_LastWeek\":\"先週\"," +
            "\"ComparisonOperator_LastYear\":\"昨年\"," +
            "\"ComparisonOperator_LessThan\":\"次の値より小さい\"," +
            "\"ComparisonOperator_LessThanOrEqualTo\":\"次の値より小さいまたは等しい\"," +
            "\"ComparisonOperator_NextMonth\":\"翌月\"," +
            "\"ComparisonOperator_NextQuater\":\"翌四半期\"," +
            "\"ComparisonOperator_NextWeek\":\"来週\"," +
            "\"ComparisonOperator_NextYear\":\"翌年\"," +
            "\"ComparisonOperator_NotEmpty\":\"空ではない\"," +
            "\"ComparisonOperator_NotEquals\":\"次の値に等しくない\"," +
            "\"ComparisonOperator_StartsWith\":\"～で始まる\"," +
            "\"ComparisonOperator_ThisMonth\":\"今月\"," +
            "\"ComparisonOperator_ThisQuarter\":\"本四半期\"," +
            "\"ComparisonOperator_ThisWeek\":\"今週\"," +
            "\"ComparisonOperator_ThisYear\":\"今年\"," +
            "\"ComparisonOperator_Today\":\"今日\"," +
            "\"ComparisonOperator_Tomorrow\":\"明日\"," +
            "\"ComparisonOperator_Top\":\"上\"," +
            "\"ComparisonOperator_TopPercentile\":\"上位の百分位数\"," +
            "\"ComparisonOperator_True\":\"True\"," +
            "\"ComparisonOperator_Yesterday\":\"昨日\"," +
            "\"Filter_Columns_List\":\"列リストのフィルター...\"," +
            "\"Search\":\"検索\"," +
            "\"Select_All\":\"(すべて選択)\"," +
            "\"DataSource_Summary_Avg\":\"平均\"," +
            "\"DataSource_Summary_Count\":\"カウント\"," +
            "\"DataSource_Summary_Max\":\"最大値\"," +
            "\"DataSource_Summary_Min\":\"最小値\"," +
            "\"DataSource_Summary_Sum\":\"合計値\"}";
        return GridStrings;
    }
}
