@* this namespace is required for Infragistics controls *@
@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;

<div class="igContainer">
    <div class="igOptions">
        <button @onclick="OnButtonClick">CLICK ME</button>
    </div>
    <div class="igComponent">

        @if (DataSource != null)
        {
            <DataGrid @ref="GridRef" Height="100%" Width="100%"
                      DataSource="@MyDataSource"
                      AutoGenerateColumns="true">
            </DataGrid>
        }

    </div>
</div>

@code {

    private List<SaleInfo> DataSource;

    public List<dynamic> MyDataSource { get; set; }

    public System.Data.DataTable Data { get; set; }

    private Random Rand = new Random();

    public DataGrid GridRef { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataGridModule.Register(IgniteUIBlazor);
        GenerateData();

        System.Data.DataTable table = new System.Data.DataTable();
        table.Columns.Add("ID", typeof(int));
        table.Columns.Add("Label", typeof(string));

        for(int i=0; i<10; i++)
        {
            System.Data.DataRow row = table.NewRow();
            row[0] = i;
            row[1] = "Item " + i.ToString();
            table.Rows.Add(row);
        }

        this.Data = table;

        this.MyDataSource = ListFromDataTable(table);

        Console.WriteLine(this.MyDataSource.Count);

        StateHasChanged();
    }

    public List<dynamic> ListFromDataTable(System.Data.DataTable table)
    {
        List<dynamic> tableList = new List<dynamic>();
        foreach (System.Data.DataRow row in table.Rows)
        {
            var expandoDict = new System.Dynamic.ExpandoObject() as IDictionary<String, Object>;
            foreach (System.Data.DataColumn col in table.Columns)
            {
                expandoDict.Add(col.ToString(), row[col.ColumnName]);
            }
            tableList.Add(expandoDict);
        }
        return tableList;
    }


    public void OnButtonClick(MouseEventArgs e)
    {
        var x = this.GridRef.ActualDataSource.ActualCount;

        Console.WriteLine("Count = " + x);
    }

    public void GenerateData()
    {
        string[] names = new string[] {
            "Intel CPU", "AMD CPU",
            "Intel Motherboard", "AMD Motherboard", "Nvidia Motherboard",
            "Nvidia GPU", "Gigabyte GPU", "Asus GPU", "AMD GPU", "MSI GPU",
            "Corsair Memory", "Patriot Memory", "Skill Memory",
            "Samsung HDD", "WD HDD", "Seagate HDD", "Intel HDD", "Asus HDD",
            "Samsung SSD", "WD SSD", "Seagate SSD", "Intel SSD", "Asus SSD",
            "Samsung Monitor", "Asus Monitor", "LG Monitor", "HP Monitor" };

        string[] countries = new string[] {
            "USA", "UK", "France", "Canada", "Poland",
            "Denmark", "Croatia", "Australia", "Seychelles",
            "Sweden", "Germany", "Japan", "Ireland",
            "Barbados", "Jamaica", "Cuba", "Spain", };
        string[] status = new string[] { "Packing", "Shipped", "Delivered" };

        var sales = new List<SaleInfo>();

        for (var i = 0; i < 200; i++)
        {
            var price = GetRandomNumber(10000, 90000) / 100;
            var items = GetRandomNumber(4, 30);
            var value = Math.Round(price * items);
            var margin = GetRandomNumber(2, 5);
            var profit = Math.Round((price * margin / 100) * items);
            var country = GetRandomItem(countries);

            var item = new SaleInfo()
            {
                Country = country,
                CountryFlag = GetCountryFlag(country),
                Margin = margin,
                OrderDate = GetRandomDate(),
                OrderItems = items,
                OrderValue = value,
                ProductID = 1001 + i,
                ProductName = GetRandomItem(names),
                ProductPrice = price,
                Profit = Math.Round(profit),
                Status = GetRandomItem(status)
            };
            sales.Add(item);
        }

        this.DataSource = sales;
    }

    public double GetRandomNumber(double min, double max)
    {
        return Math.Round(min + (Rand.NextDouble() * (max - min)));
    }

    public string GetRandomItem(string[] array)
    {
        var index = (int)Math.Round(GetRandomNumber(0, array.Length - 1));
        return array[index];
    }

    public DateTime GetRandomDate() {
        var today = new DateTime();
        var year = today.Year;
        var month = this.GetRandomNumber(1, 9);
        var day = this.GetRandomNumber(10, 27);
        return new DateTime(year, (int)month, (int)day);
    }

    public string GetCountryFlag(string country)
    {
        var flag = "https://static.infragistics.com/xplatform/images/flags/" + country + ".png";
        return flag;
    }

    public class SaleInfo
    {
        public string Status { get; set; }
        public string ProductName { get; set; }
        public string CountryFlag { get; set; }
        public string Country { get; set; }
        public DateTime OrderDate { get; set; }
        public double Profit { get; set; }
        public double ProductPrice { get; set; }
        public double ProductID { get; set; }
        public double OrderValue { get; set; }
        public double OrderItems { get; set; }
        public double Margin { get; set; }
    }
}
