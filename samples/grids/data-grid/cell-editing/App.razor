@using System.Collections.ObjectModel
@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="container vertical">
    <div class="options horizontal">
        <button @onclick="OnCommitClick" disabled="@ButtonsDisabled">Commit</button>
        <button @onclick="OnUndoClick" disabled="@ButtonsDisabled">Undo</button>
        <button @onclick="OnRedoClick" disabled="@ButtonsDisabled">Redo</button>
        <label>
            Edit Mode:
            <select @bind="GridEditMode">
                <option>@EditModeType.None</option>
                <option>@EditModeType.Cell</option>
                <option>@EditModeType.CellBatch</option>
                <option>@EditModeType.Row</option>
            </select>
        </label>
        <label>
            Excel-style Editing
            <select @bind="GridEditModeClickAction">
                <option>@EditModeClickAction.SingleClick</option>
                <option>@EditModeClickAction.DoubleClick</option>
            </select>
        </label>
    </div>
    <div class="container vertical">
        @if (Data != null)
        {
            <div style="overflow: hidden">
                <IgbDataGrid Height="100%" Width="100%" @ref="DataGridRef"
                             EditModeClickAction="@GridEditModeClickAction"
                             DefaultColumnMinWidth="120"
                             AutoGenerateColumns="false"
                             DataSource="Data"
                             EditMode="@GridEditMode"
                             ActivationMode="@GridActivationMode.Cell"
                             SelectionMode="@GridSelectionMode.Single"
                             SelectionBehavior="@GridSelectionBehavior.ModifierBased"
                             IsColumnOptionsEnabled="true"
                             RowEditStarted="OnRowEditStarted"
                             RowEditEnded="OnRowEditEnded">
                    <IgbTextColumn Field="Name" Width="@("*>150")" />
                    <IgbTextColumn Field="Street" HeaderText="Street" Width="@("*>160")" />
                    <IgbTextColumn Field="City" HeaderText="City" Width="@("*>120")" />
                    <IgbNumericColumn Field="Salary" HeaderText="Salary" PositivePrefix="$" ShowGroupingSeparator="true" Width="@("*>120")" />
                    <IgbImageColumn IsEditable="false" Field="Photo" HeaderText="Photo" ContentOpacity="1" HorizontalAlignment="@CellContentHorizontalAlignment.Center" Width="@("*>110")" />
                    <IgbDateTimeColumn Field="Birthday" HeaderText="Date of Birth" Width="@("*>170")" />
                    <IgbTemplateColumn Field="ButtonColumn" HeaderText="Delete Row" CellUpdatingScript="onUpdatingTemplateColumn" />
                </IgbDataGrid>
            </div>
        }
    </div>
</div>

@code {

    public static IgbDataGrid DataGridRef;
    private EditModeClickAction GridEditModeClickAction = EditModeClickAction.SingleClick;
    private EditModeType _editMode;
    public EditModeType GridEditMode
    {
        get { return _editMode; }
        set
        {
            _editMode = value;
            if (_editMode == EditModeType.CellBatch)
            {
                ButtonsDisabled = false;
            }
            else
            {
                ButtonsDisabled = true;
            }
        }
    }

    private bool ButtonsDisabled { get; set; }

    public static ObservableCollection<ObsEmployeeInfo> Data { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        IgbDataGridModule.Register(IgniteUIBlazor);

        Data = ObsEmployeeData.Create(100, false);
        this.GridEditMode = EditModeType.Cell;
    }

    private void OnCommitClick(MouseEventArgs e)
    {
        DataGridRef.CommitEdits();
        StateHasChanged();

    }

    private void OnUndoClick(MouseEventArgs e)
    {
        DataGridRef.Undo();
        StateHasChanged();

    }

    private void OnRedoClick(MouseEventArgs e)
    {
        DataGridRef.Redo();
        StateHasChanged();

    }

    private void OnRowEditEnded(IgbGridRowEditEndedEventArgs e)
    {
        if (_editMode == EditModeType.CellBatch)
        {
            ButtonsDisabled = false;
        }
        else
        {
            ButtonsDisabled = true;
        }
        StateHasChanged();
    }
    private void OnRowEditStarted(IgbGridRowEditStartedEventArgs e)
    {
        if (_editMode == EditModeType.CellBatch)
        {
            ButtonsDisabled = true;
        }
        else
        {
            ButtonsDisabled = false;
        }
        StateHasChanged();
    }

    [JSInvokable]
    public static void ButtonClickActionAtBlazorLevel(object parameter)
    {
        int param = int.Parse(parameter.ToString());
        var rowItem = DataGridRef.ActualDataSource.GetItemAtIndex(param);
        DataGridRef.RemoveItem(rowItem);
    }
}
