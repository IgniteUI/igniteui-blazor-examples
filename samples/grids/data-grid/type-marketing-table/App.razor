@using IgniteUI.Blazor.Controls
;

<div class="container vertical">
    <div class="container vertical">
        @if (Data != null)
        {
            <div style="overflow: hidden">
                <IgbDataGrid Height="100%" Width="100%"
                      @ref="DataGridRef"
                      DataSource="Data"
                      AutoGenerateColumns="false"
                      SelectionMode="@DataGridSelectionMode.MultipleRow"
                      IsGroupCollapsable="true"
                      RowHeight="32"
                      HeaderClickAction="@HeaderClickAction.SortByMultipleColumnsTriState"
                      ActivationMode="GridActivationMode.Cell"
                      DefaultColumnMinWidth="100">

                    <IgbTextColumn Width="@("*>140")" Field="ID" IsHidden="true" />
                    <IgbTextColumn Width="@("*>120")" Field="Category" />
                    <IgbTextColumn Width="@("*>110")" Field="Type" />
                    <IgbTextColumn Width="@("*>110")" Field="Risk" />

                    <IgbNumericColumn Width="@("*>120")" Field="Open" HeaderText="Open" ShowGroupingSeparator="true" PositivePrefix="$" MinFractionDigits="2" MaxFractionDigits="2" />
                    <IgbTemplateColumn Width="@("*>120")" Field="Price"
                        CellStyleKeyRequestedScript="onPriceStyleKey"
                        CellUpdatingScript="onPriceCellUpdating"
                        DataBoundScript="onPriceDataBound"
                        HeaderText="Close" />
                    <IgbNumericColumn Width="@("*>120")" Field="Change" HeaderText="Change ($)" MinFractionDigits="2" MaxFractionDigits="2" />
                    <IgbNumericColumn Width="@("*>180")" Field="ChangePercent" HeaderText="Change (%)" NegativeSuffix="%" PositiveSuffix="%" MinFractionDigits="2" MaxFractionDigits="2" />

                    <IgbTextColumn Width="@("*>120")" Field="Contract" />
                    <IgbTextColumn Width="@("*>130")" Field="Settlement" />
                    <IgbTextColumn Width="@("*>130")" Field="Region" />
                    <IgbTextColumn Width="@("*>120")" Field="Country" />

                    <IgbNumericColumn Width="@("*>110")" Field="Buy" ShowGroupingSeparator="true" PositivePrefix="$" MinFractionDigits="2" MaxFractionDigits="2" />
                    <IgbNumericColumn Width="@("*>110")" Field="Sell" ShowGroupingSeparator="true" PositivePrefix="$" MinFractionDigits="2" MaxFractionDigits="2" />
                    <IgbNumericColumn Width="@("*>130")" Field="Spread" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" />
                    <IgbNumericColumn Width="@("*>130")" Field="Volume" ShowGroupingSeparator="true" MinFractionDigits="0" MaxFractionDigits="0" />
                    <IgbNumericColumn Width="@("*>130")" Field="DailyHigh" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                    <IgbNumericColumn Width="@("*>130")" Field="DailyLow" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                    <IgbNumericColumn Width="@("*>130")" Field="YearlyHigh" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                    <IgbNumericColumn Width="@("*>130")" Field="YearlyLow" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />
                    <IgbNumericColumn Width="@("*>130")" Field="YearlyStart" ShowGroupingSeparator="true" MinFractionDigits="2" MaxFractionDigits="2" PositivePrefix="$" />

                    <IgbDateTimeColumn Width="@("*>140")" Field="Maturity" HorizontalAlignment="@CellContentHorizontalAlignment.Right" />
                    <IgbTextColumn Width="@("*>120")" Field="Currency" />
                    <IgbTextColumn Width="@("*>130")" Field="Sector" />
                    <IgbTextColumn Width="@("*>130")" Field="Security" />
                    <IgbTextColumn Width="@("*>170")" Field="Issuer" />

                </IgbDataGrid>
            </div>
        }
    </div>
</div>

@code {

    public List<PortfolioInfo> Data;

    public DateTime lastUpdateTime = new DateTime();
    public int frequency = 1000;
    public int DataVolume = 500;
    public bool isTimerTicking = false;
    public bool isUpdatingAllPrices = false;
    public bool isUpdatingSomePrices = false;

    public bool UseHeatBackground = true;

    private IgbDataGrid grid;
    public IgbDataGrid DataGridRef
    {
        get { return grid; }
        set { grid = value; StateHasChanged(); this.onGridGroupingAdd(); this.startTicking(); }
    }

    protected override void OnInitialized()
    {
        this.Data = PortfolioData.Create(this.DataVolume);
    }

    public void startTicking()
    {
        if (!this.isTimerTicking)
        {
            this.isTimerTicking = true;
            Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());
        }
    }

    public static Random random = new Random();
    public void onTimerTick()
    {
        if (!this.isTimerTicking)
        {
            return;
        }
        if (this.grid == null)
        {
            Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());
            return;
        }

        var stillAnimating = false;

        var useClear = this.isUpdatingAllPrices;
        var updateAll = this.isUpdatingAllPrices;

        var toChangeIndexes = new List<bool>();
        foreach (var item in this.Data)
        {
            toChangeIndexes.Add(false);
            if (!this.UseHeatBackground)
            {
                item.PriceHeat = 0;
            }
            else if (item.PriceHeat != 0)
            {
                stillAnimating = true;
            }
        }

        var toChange = (int)Math.Round(this.DataVolume / 10.0);
        if (updateAll)
        {
            toChange = this.Data.Count;
        }
        else
        {
            toChange = (int)(random.Next(2, this.Data.Count - 1));
        }

        var sortingByPrice = false;
        for (var i = 0; i < this.grid.SortDescriptions.Count; i++)
        {
            if (this.grid.SortDescriptions[i].Field == "Price" ||
                this.grid.SortDescriptions[i].Field.Contains("Change"))
            {
                sortingByPrice = true;
            }
        }

        var changing = false;
        var toChangeCount = 0;

        var now = DateTime.Now;
        var elapsedTime = now.Subtract(this.lastUpdateTime);
        var elapsedInterval = elapsedTime.TotalMilliseconds > this.frequency;
        if (elapsedInterval)
        {
            this.lastUpdateTime = DateTime.Now;
            for (var i = 0; i < toChange; i++)
            {
                var index = (int)(random.Next(0, this.Data.Count - 1));
                toChangeIndexes[index] = true;
                toChangeCount++;
                changing = true;

            }
        }

        for (var i = 0; i < this.Data.Count; i++)
        {
            var item = this.Data[i];
            if (toChangeIndexes[i] == true)
            {
                if (sortingByPrice && !useClear)
                {
                    this.grid.NotifyRemoveItem(this.Data, i, item);
                    PortfolioData.RandomizeDataValues(item);
                    this.grid.NotifyInsertItem(this.Data, i, item);
                }
                else
                {
                    PortfolioData.RandomizeDataValues(item);
                    this.grid.NotifyUpdateItem(this.Data, i, item, true);
                }

                if (this.UseHeatBackground)
                {
                    if (item.Change > 0)
                    {
                        item.PriceHeat = 1;
                    }
                    else
                    {
                        item.PriceHeat = -1;
                    }
                }
            }
            else
            {
                if (this.UseHeatBackground)
                {
                    if (item.PriceHeat > 0)
                    {
                        item.PriceHeat -= .06;
                        if (item.PriceHeat < 0)
                        {
                            item.PriceHeat = 0;
                        }
                    }
                    if (item.PriceHeat < 0)
                    {
                        item.PriceHeat += .06;
                        if (item.PriceHeat > 0)
                        {
                            item.PriceHeat = 0;
                        }
                    }
                }
            }
        }

        if (sortingByPrice && useClear && elapsedInterval)
        {
            this.grid.NotifyClearItems(Data);
        }
        else if (useClear)
        {
            this.grid.NotifyClearItems(Data);
        }

        if (!sortingByPrice || !elapsedInterval)
        {
            this.grid.InvalidateVisibleRows();
        }

        Task.Delay(this.frequency).ContinueWith((t) => onTimerTick());
    }

    private void onGridGroupingAdd()
    {
        var g = new IgbColumnGroupDescription();
        g.Field = "Category";
        g.SortDirection = ListSortDirection.Descending;
        this.grid.GroupDescriptions.Add(g);

        g = new IgbColumnGroupDescription();
        g.Field = "Type";
        g.SortDirection = ListSortDirection.Descending;
        this.grid.GroupDescriptions.Add(g);

        g = new IgbColumnGroupDescription();
        g.Field = "Contract";
        g.SortDirection = ListSortDirection.Descending;
        this.grid.GroupDescriptions.Add(g);
    }
}
