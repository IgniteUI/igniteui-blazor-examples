@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options horizotnal">
        <label class="options-item" style="width: 9rem">Adding Animation: </label>
        <select class="options-item" style="width: 9rem" @bind="ShowingAddingAnimation">
            <option>@ColumnShowingAnimationMode.Auto</option>
            <option>@ColumnShowingAnimationMode.None</option>
            <option>@ColumnShowingAnimationMode.SlideFromLeft</option>
            <option>@ColumnShowingAnimationMode.SlideFromRight</option>
            <option>@ColumnShowingAnimationMode.SlideFromTop</option>
            <option>@ColumnShowingAnimationMode.SlideFromBottom</option>
            <option>@ColumnShowingAnimationMode.FadeIn</option>
            <option>@ColumnShowingAnimationMode.SlideFromLeftAndFadeIn</option>
            <option>@ColumnShowingAnimationMode.SlideFromRightAndFadeIn</option>
            <option>@ColumnShowingAnimationMode.SlideFromTopAndFadeIn</option>
            <option>@ColumnShowingAnimationMode.SlideFromBottomAndFadeIn</option>
        </select>
        <span class="options-item" style="width: 9rem">Exchange Animation: </span>
        <select class="options-item" style="width: 9rem" @bind="ExchangeAnimation">
            <option>@ColumnExchangingAnimationMode.Auto</option>
            <option>@ColumnExchangingAnimationMode.None</option>
            <option>@ColumnExchangingAnimationMode.SlideToLeft</option>
            <option>@ColumnExchangingAnimationMode.SlideToRight</option>
            <option>@ColumnExchangingAnimationMode.SlideToTop</option>
            <option>@ColumnExchangingAnimationMode.SlideToBottom</option>
            <option>@ColumnExchangingAnimationMode.Crossfade</option>
            <option>@ColumnExchangingAnimationMode.SlideToLeftAndCrossfade</option>
            <option>@ColumnExchangingAnimationMode.SlideToRightAndCrossfade</option>
            <option>@ColumnExchangingAnimationMode.SlideToTopAndCrossfade</option>
            <option>@ColumnExchangingAnimationMode.SlideToBottomAndCrossfade</option>
        </select>
    </div>
    <div class="options horizotnal">
        <span class="options-item" style="width: 9rem">Hiding Animation: </span>
        <select class="options-item" style="width: 9rem" @bind="HidingAnimation">
            <option>@ColumnHidingAnimationMode.Auto</option>
            <option>@ColumnHidingAnimationMode.None</option>
            <option>@ColumnHidingAnimationMode.SlideToLeft</option>
            <option>@ColumnHidingAnimationMode.SlideToRight</option>
            <option>@ColumnHidingAnimationMode.SlideToTop</option>
            <option>@ColumnHidingAnimationMode.SlideToBottom</option>
            <option>@ColumnHidingAnimationMode.FadeOut</option>
            <option>@ColumnHidingAnimationMode.SlideToLeftAndFadeOut</option>
            <option>@ColumnHidingAnimationMode.SlideToRightAndFadeOut</option>
            <option>@ColumnHidingAnimationMode.SlideToTopAndFadeOut</option>
            <option>@ColumnHidingAnimationMode.SlideToBottomAndFadeOut</option>
        </select>
        <span class="options-item" style="width: 9rem">Updating Animation: </span>
        <select class="options-item" style="width: 9rem" @bind="UpdatingAnimation">
            <option>@ColumnPropertyUpdatingAnimationMode.Auto</option>
            <option>@ColumnPropertyUpdatingAnimationMode.None</option>
            <option>@ColumnPropertyUpdatingAnimationMode.Interpolate</option>
            <option>@ColumnPropertyUpdatingAnimationMode.InterpolateDeep</option>
        </select>
    </div>
    <div class="options horizotnal">
        <span class="options-item" style="width: 9rem">Moving Animation: </span>
        <select class="options-item" style="width: 9rem" @bind="MovingAnimation">
            <option>@ColumnMovingAnimationMode.Auto</option>
            <option>@ColumnMovingAnimationMode.None</option>
            <option>@ColumnMovingAnimationMode.SlideOver</option>
        </select>
        <button class="options-item" @onclick="OnHideClick">Hide Column</button>
        <button class="options-item" @onclick="OnShowClick">Show Column</button>
        <button class="options-item" @onclick="OnReloadClick">Reload Grid</button>
    </div>

    <div class="container vertical" style="height: calc(100% - 125px)">
        @if (Data != null)
        {
            <div style="overflow: hidden">
                <DataGrid Height="100%" Width="100%" @ref="DataGridRef"
                        DefaultColumnMinWidth="100"
                        ColumnAddingAnimationMode="@ShowingAddingAnimation"
                        ColumnShowingAnimationMode="@ShowingAddingAnimation"
                        ColumnExchangingAnimationMode="@ExchangeAnimation"
                        ColumnHidingAnimationMode="@HidingAnimation"
                        ColumnMovingAnimationMode="@MovingAnimation"
                        ColumnPropertyUpdatingAnimationMode="@UpdatingAnimation"
                        AutoGenerateColumns="false"
                        DataSource="Data"
                        IsColumnOptionsEnabled="true">
                    <TextColumn Field="Name" Width="@("*>170")" />
                    <TextColumn Field="Street" HeaderText="Address" Width="@("*>150")" />
                    <TextColumn Field="City" Width="@("*>120")" />
                    <NumericColumn Field="Salary" Width="@("*>120")" PositivePrefix="$" ShowGroupingSeparator="true" />
                    <DateTimeColumn Field="Birthday" Width="@("*>170")" />
                    <TextColumn Field="Country" Width="@("*>120")" />
                    <NumericColumn Field="Sales" Width="@("*>120")" PositivePrefix="$" ShowGroupingSeparator="true" />
                    <NumericColumn Field="Age" Width="@("*>120")" />
                    <TextColumn Field="Email" Width="@("*>120")" />
                </DataGrid>
            </div>
        }
    </div>
</div>

@code {

    private List<Employee> Data;
    private DataGrid DataGridRef;

    private ColumnShowingAnimationMode ShowingAddingAnimation = ColumnShowingAnimationMode.SlideFromLeft;
    private ColumnExchangingAnimationMode ExchangeAnimation = ColumnExchangingAnimationMode.Crossfade;
    private ColumnHidingAnimationMode HidingAnimation = ColumnHidingAnimationMode.FadeOut;
    private ColumnPropertyUpdatingAnimationMode UpdatingAnimation = ColumnPropertyUpdatingAnimationMode.Interpolate;
    private ColumnMovingAnimationMode MovingAnimation = ColumnMovingAnimationMode.SlideOver;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DataGridModule.Register(IgniteUIBlazor);
        this.Data = EmployeeData.Create(100, false);
    }

    private void OnHideClick(MouseEventArgs e)
    {
        foreach (Column col in this.DataGridRef.ActualColumns)
        {
            if (!col.IsHidden)
            {
                col.IsHidden = true;
                break;
            }
        }
    }

    private void OnReloadClick(MouseEventArgs e)
    {
        List<Employee> newData = EmployeeData.Create(100, false);
        for (int i = 0; i < newData.Count; i++)
        {
            Employee oldData = this.Data[i];
            this.Data[i].Salary = newData[i].Salary;
            this.DataGridRef.NotifySetItem(this.Data, i, oldData, newData[i]);
        }
    }

    private void OnShowClick(MouseEventArgs e)
    {
        IEnumerable<Column> revColumns = this.DataGridRef.ActualColumns.Reverse();

        foreach (Column col in revColumns)
        {
            if (col.IsHidden)
            {
                col.IsHidden = false;
                break;
            }
        }

        this.DataGridRef.ActualColumns.Reverse();
    }
}
