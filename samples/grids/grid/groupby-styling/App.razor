@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Name="grid"
        @ref="grid"
        Id="grid"
        Data="InvoicesData">
            <IgbColumn
            Name="OrderID"
            @ref="orderID"
            Field="OrderID"
            Header="Order ID"
            Hidden="true">
            </IgbColumn>

            <IgbColumn
            Name="ShipCountry"
            @ref="shipCountry"
            Field="ShipCountry"
            Header="Ship Country"
            Width="200px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="OrderDate"
            @ref="orderDate"
            Field="OrderDate"
            Header="Order Date"
            Width="200px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="PostalCode"
            @ref="postalCode"
            Field="PostalCode"
            Header="Postal Code"
            Width="200px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="Discontinued"
            @ref="discontinued"
            Field="Discontinued"
            Header="Discontinued"
            Width="200px"
            Groupable="true"
            BodyTemplateScript="WebGridBooleanCellTemplate">
            </IgbColumn>

            <IgbColumn
            Name="ShipName"
            @ref="shipName"
            Field="ShipName"
            Header="Ship Name"
            Width="250px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="ShipCity"
            @ref="shipCity"
            Field="ShipCity"
            Header="Ship City"
            Width="250px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="ShipperName"
            @ref="shipperName"
            Field="ShipperName"
            Header="Shipper Name"
            Width="250px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="Salesperson"
            @ref="salesperson"
            Field="Salesperson"
            Header="Sales Person"
            Width="250px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="UnitPrice"
            @ref="unitPrice"
            Field="UnitPrice"
            Header="Unit Price"
            Width="150px"
            DataType="GridColumnDataType.Currency"
            PipeArgs="ColumnPipeArgs1"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Name="Quantity"
            @ref="quantity"
            Field="Quantity"
            Header="Quantity"
            Width="150px"
            DataType="GridColumnDataType.Number"
            Groupable="true">
            </IgbColumn>

        </IgbGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var orderID = this.orderID;
        var shipCountry = this.shipCountry;
        var orderDate = this.orderDate;
        var postalCode = this.postalCode;
        var discontinued = this.discontinued;
        var shipName = this.shipName;
        var shipCity = this.shipCity;
        var shipperName = this.shipperName;
        var salesperson = this.salesperson;
        var unitPrice = this.unitPrice;
        var quantity = this.quantity;

    }

    private IgbGrid grid;
    private IgbColumn orderID;
    private IgbColumn shipCountry;
    private IgbColumn orderDate;
    private IgbColumn postalCode;
    private IgbColumn discontinued;
    private IgbColumn shipName;
    private IgbColumn shipCity;
    private IgbColumn shipperName;
    private IgbColumn salesperson;
    private IgbColumn unitPrice;
    private IgbColumnPipeArgs _columnPipeArgs1 = null;
    public IgbColumnPipeArgs ColumnPipeArgs1
    {
        get
        {
            if (this._columnPipeArgs1 == null)
            {
                var columnPipeArgs1 = new IgbColumnPipeArgs();
                columnPipeArgs1.DigitsInfo = "1.2-2";
                this._columnPipeArgs1 = columnPipeArgs1;
            }
            return this._columnPipeArgs1;
        }
    }
    private IgbColumn quantity;

    private InvoicesData _invoicesData = null;
    public InvoicesData InvoicesData
    {
        get
        {
            if (_invoicesData == null)
            {
                _invoicesData = new InvoicesData();
            }
            return _invoicesData;
        }
    }

}