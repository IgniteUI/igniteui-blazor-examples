@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;

<div class="container vertical">
    <div class="container vertical">

        @if (Data != null)
        {
            <div class="options horizontal">
                <IgbRadioGroup Alignment=@RadioGroupAlignment.Horizontal>
                    <IgbRadio Value="RootOnly" Change=OnSummaryCalcModeRadioChange>Root Level Only</IgbRadio>
                    <IgbRadio Value="ChildOnly" Change=OnSummaryCalcModeRadioChange>Child Levels Only</IgbRadio>
                    <IgbRadio Value="Both" Change=OnSummaryCalcModeRadioChange Checked=true>Root and Child Levels</IgbRadio>
                </IgbRadioGroup>
            </div>

            <div class="options horizontal">
                <IgbRadioGroup Alignment=@RadioGroupAlignment.Horizontal>
                    <IgbRadio Value="Top" Change=OnSummaryPositionRadioChange>Top</IgbRadio>
                    <IgbRadio Value="Bottom" Change=OnSummaryPositionRadioChange Checked=true>Bottom</IgbRadio>                    
                </IgbRadioGroup>
            </div>

            <div class="options horizontal">
                <IgbSwitch Change=OnSummaryOnCollapseChanged>Show summary row when group row is collapsed</IgbSwitch>
            </div>

            <div style="overflow: hidden">
                 <IgbGrid Height="500px" Width="100%" Data="Data" AutoGenerate=false SummaryCalculationMode=CalcMode SummaryPosition=SummaryPosition
                          ShowSummaryOnCollapse=SummaryOnCollapse>
                     <IgbGridColumn Field="ShipCountry" Header="Ship Country" Width="250px" Groupable=true/>
                     <IgbGridColumn Field="ShipCity" Header="Ship City" Width="250px" Groupable=true/>
                     <IgbGridColumn Field="UnitPrice" Header="Unit Price" Width="150px" DataType=@GridColumnDataType.Number Groupable=true
                                    HasSummary=true />
                     <IgbGridColumn Field="Quantity" Header="Quantity" Width="150px" DataType=@GridColumnDataType.Number Groupable=true
                                    HasSummary=true />
                </IgbGrid>
            </div>
        }
    </div>
</div>

@code {

    private InvoiceData Data;

    private Random Rand = new Random();

    public IgbGrid GridRef { get; set; }    
    public GridSummaryCalculationMode CalcMode{ get; set; }
    public GridSummaryPosition SummaryPosition{ get; set; }
    public bool SummaryOnCollapse{ get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbGridModule.Register(IgniteUIBlazor);
        IgbRadioModule.Register(IgniteUIBlazor);
        IgbRadioGroupModule.Register(IgniteUIBlazor);
        IgbSwitchModule.Register(IgniteUIBlazor);

        this.CalcMode = GridSummaryCalculationMode.RootAndChildLevels;
        this.SummaryPosition = GridSummaryPosition.Bottom;
        this.SummaryOnCollapse = false;

        this.Data = new InvoiceData();
    }

    public void OnSummaryCalcModeRadioChange(IgbComponentBoolValueChangedEventArgs args)
    {
        IgbRadio radio = args.Parent as IgbRadio;

        switch(radio.Value){
            case "RootOnly":
                {
                    this.CalcMode = GridSummaryCalculationMode.RootLevelOnly;
                    break;
                }
            case "ChildOnly":
                {
                    this.CalcMode = GridSummaryCalculationMode.ChildLevelsOnly;
                    break;
                }
            case "Both":
                {
                    this.CalcMode = GridSummaryCalculationMode.RootAndChildLevels;
                    break;
                }
        }
    }

    public void OnSummaryPositionRadioChange(IgbComponentBoolValueChangedEventArgs args)
    {
        IgbRadio radio = args.Parent as IgbRadio;

        switch(radio.Value){
            case "Top":
                {
                    this.SummaryPosition = GridSummaryPosition.Top;
                    break;
                }
            case "Bottom":
                {
                    this.SummaryPosition = GridSummaryPosition.Bottom;
                    break;
                }
        }
    }

    public void OnSummaryOnCollapseChanged(IgbComponentBoolValueChangedEventArgs args)
    {
        this.SummaryOnCollapse = !this.SummaryOnCollapse;
    }  
}
