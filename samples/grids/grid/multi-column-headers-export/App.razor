@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Id="grid"
        Name="grid"
        @ref="grid"
        Data="CustomersData"
        Moving="true"
        AllowFiltering="true">
            <IgbGridToolbar
            >
                <IgbGridToolbarActions
                >
                    <IgbGridToolbarHiding
                    >
                    </IgbGridToolbarHiding>

                    <IgbGridToolbarPinning
                    >
                    </IgbGridToolbarPinning>

                    <IgbGridToolbarExporter
                    ExportCSV="false"
                    ExportExcel="true"
                    ExportStartedScript="WebGridExportEventMultiColumnHeaders"
                    Name="gridToolbarExporter1"
                    @ref="gridToolbarExporter1">
                    </IgbGridToolbarExporter>

                </IgbGridToolbarActions>

            </IgbGridToolbar>

            <IgbColumn
            Field="ID"
            Header="ID"
            Resizable="true"
            Filterable="false">
            </IgbColumn>

            <IgbColumnGroup
            Name="GeneralInformation"
            @ref="generalInformation"
            Header="General Information"
            Collapsible="true"
            Expanded="true">
                <IgbColumn
                Field="Company"
                VisibleWhenCollapsed="true">
                </IgbColumn>

                <IgbColumnGroup
                Name="PersonalDetails"
                @ref="personalDetails"
                Header="Personal Details"
                Collapsible="true"
                Expanded="false"
                VisibleWhenCollapsed="false">
                    <IgbColumn
                    Field="ContactName">
                    </IgbColumn>

                    <IgbColumn
                    Field="ContactTitle">
                    </IgbColumn>

                </IgbColumnGroup>

            </IgbColumnGroup>

            <IgbColumnGroup
            Name="AddressInformation"
            @ref="addressInformation"
            Header="Address Information">
                <IgbColumnGroup
                Name="Location"
                @ref="location"
                Header="Location"
                Collapsible="true"
                Expanded="false"
                VisibleWhenCollapsed="true">
                    <IgbColumn
                    Field="Country"
                    VisibleWhenCollapsed="true"
                    Hidden="true">
                    </IgbColumn>

                    <IgbColumn
                    Field="Region"
                    VisibleWhenCollapsed="false"
                    Hidden="true">
                    </IgbColumn>

                    <IgbColumn
                    Field="City"
                    VisibleWhenCollapsed="false"
                    Hidden="true">
                    </IgbColumn>

                    <IgbColumn
                    Field="Address"
                    VisibleWhenCollapsed="false"
                    Hidden="true">
                    </IgbColumn>

                </IgbColumnGroup>

                <IgbColumnGroup
                Name="ContactInformation"
                @ref="contactInformation"
                Header="Contact Information">
                    <IgbColumn
                    Field="Phone">
                    </IgbColumn>

                    <IgbColumn
                    Field="Fax">
                    </IgbColumn>

                    <IgbColumn
                    Field="PostalCode">
                    </IgbColumn>

                </IgbColumnGroup>

            </IgbColumnGroup>

        </IgbGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var gridToolbarExporter1 = this.gridToolbarExporter1;
        var generalInformation = this.generalInformation;
        var personalDetails = this.personalDetails;
        var addressInformation = this.addressInformation;
        var location = this.location;
        var contactInformation = this.contactInformation;

    }

    private IgbGrid grid;
    private IgbGridToolbarExporter gridToolbarExporter1;
    private IgbColumnGroup generalInformation;
    private IgbColumnGroup personalDetails;
    private IgbColumnGroup addressInformation;
    private IgbColumnGroup location;
    private IgbColumnGroup contactInformation;

    private CustomersData _customersData = null;
    public CustomersData CustomersData
    {
        get
        {
            if (_customersData == null)
            {
                _customersData = new CustomersData();
            }
            return _customersData;
        }
    }

}