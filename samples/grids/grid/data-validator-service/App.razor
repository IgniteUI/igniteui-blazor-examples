@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical ig-typography">
    <div class="options vertical">
        <IgbPropertyEditorPanel
        Name="PropertyEditor"
        @ref="propertyEditor"

        DescriptionType="WebGrid"
        IsHorizontal="true"
        IsWrappingEnabled="true">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="RowEditable"
            Name="RowEditableEditor"
            @ref="rowEditableEditor"
            ValueType="PropertyEditorValueType.Boolean1"
            PrimitiveValue="true">
            </IgbPropertyEditorPropertyDescription>

        </IgbPropertyEditorPanel>

    </div>
    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Name="grid"
        @ref="grid"
        Data="EmployeesData"
        RowEditable="true"
        PrimaryKey="ID">
            <IgbColumn
            Field="Avatar"
            Header="Avatar"
            DataType="GridColumnDataType.String"
            Editable="false"
            Width="80px"
            BodyTemplateScript="WebGridAvatarCellTemplate"
            Name="column1"
            @ref="column1">
            </IgbColumn>

            <IgbColumn
            Field="Name"
            Header="Name"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="Company"
            Header="Company"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="Email"
            Header="Email"
            Width="190px"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="Fax"
            Header="Phone"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="CreatedOn"
            Header="Date of Registration"
            Width="170px"
            DataType="GridColumnDataType.Date"
            Editable="true"
            PipeArgs="ColumnPipeArgs1"
            Name="column2"
            @ref="column2">
            </IgbColumn>

            <IgbColumn
            Field="LastActivity"
            Header="Last Active"
            Width="170px"
            DataType="GridColumnDataType.Date"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="EstimatedSales"
            Header="Estimated Sales"
            DataType="GridColumnDataType.Number"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="DealsLost"
            Header="Deals Lost"
            DataType="GridColumnDataType.Number"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="DealsWon"
            Header="Deals Won"
            DataType="GridColumnDataType.Number"
            Editable="true">
            </IgbColumn>

            <IgbColumn
            Field="DealsPending"
            Header="Deals Pending"
            DataType="GridColumnDataType.Number"
            Editable="true">
            </IgbColumn>

        </IgbGrid>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditor = this.propertyEditor;
        var rowEditableEditor = this.rowEditableEditor;
        var grid = this.grid;
        var column1 = this.column1;
        var column2 = this.column2;

        this.BindElements = () => {
            propertyEditor.Target = this.grid;
        };
        this.BindElements();

    }

    private IgbPropertyEditorPanel propertyEditor;
    private IgbPropertyEditorPropertyDescription rowEditableEditor;
    private IgbGrid grid;
    private IgbColumn column1;
    private IgbColumn column2;
    private IgbColumnPipeArgs _columnPipeArgs1 = null;
    public IgbColumnPipeArgs ColumnPipeArgs1
    {
        get
        {
            if (this._columnPipeArgs1 == null)
            {
                var columnPipeArgs1 = new IgbColumnPipeArgs();
                columnPipeArgs1.Format = "longDate";
                this._columnPipeArgs1 = columnPipeArgs1;
            }
            return this._columnPipeArgs1;
        }
    }

    private EmployeesData _employeesData = null;
    public EmployeesData EmployeesData
    {
        get
        {
            if (_employeesData == null)
            {
                _employeesData = new EmployeesData();
            }
            return _employeesData;
        }
    }

}