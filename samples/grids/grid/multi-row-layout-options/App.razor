@using IgniteUI.Blazor.Controls;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container vertical">

    <div class="container vertical fill">
        <IgbGrid
        Data="CustomersData"
        GroupingExpressions="GroupingExpression1"
        PrimaryKey="CompanyName"
        RowEditable="true"
        AllowFiltering="true"
        Name="grid"
        @ref="grid">
            <IgbColumnLayout
            Header="ID"
            Pinned="true">
                <IgbColumn
                Field="ID"
                Filterable="false"
                Width="150px"
                RowEnd="3"
                RowStart="1"
                ColStart="1">
                </IgbColumn>
                
            </IgbColumnLayout>
            
            <IgbColumnLayout
            Pinned="true"
            Header="Contact Details">
                <IgbColumn
                Field="CompanyName"
                RowStart="1"
                ColStart="1"
                Width="350px"
                Header="Company"
                ColEnd="3"
                Sortable="true">
                </IgbColumn>
                
                <IgbColumn
                Field="ContactName"
                RowStart="2"
                ColStart="1"
                Header="Name"
                ColEnd="2"
                Groupable="true">
                </IgbColumn>
                
                <IgbColumn
                Field="ContactTitle"
                RowStart="3"
                ColStart="2"
                RowEnd="3"
                Header="Title"
                ColEnd="2"
                Groupable="true">
                </IgbColumn>
                
            </IgbColumnLayout>
            
            <IgbColumnLayout
            Pinned="false"
            Header="Address Details">
                <IgbColumn
                Field="Country"
                RowStart="1"
                ColStart="1"
                Filterable="false"
                Width="220px"
                ColEnd="3"
                Groupable="true">
                </IgbColumn>
                
                <IgbColumn
                Field="Region"
                RowStart="1"
                ColStart="3"
                Filterable="false"
                Width="220px"
                ColEnd="5"
                Groupable="true">
                </IgbColumn>
                
                <IgbColumn
                Field="PostalCode"
                RowStart="1"
                ColStart="5"
                Filterable="false"
                Width="220px"
                ColEnd="7"
                Groupable="true">
                </IgbColumn>
                
                <IgbColumn
                Field="City"
                RowStart="2"
                ColStart="1"
                Filterable="false"
                Width="220px"
                ColEnd="4"
                Groupable="true">
                </IgbColumn>
                
                <IgbColumn
                Field="Address"
                RowStart="2"
                ColStart="4"
                Filterable="false"
                ColEnd="7">
                </IgbColumn>
                
            </IgbColumnLayout>
            
            <IgbColumnLayout
            Header="Phone Details">
                <IgbColumn
                Field="Phone"
                RowStart="1"
                ColStart="1"
                Filterable="false"
                Width="220px"
                ColEnd="2">
                </IgbColumn>
                
                <IgbColumn
                Field="Fax"
                RowStart="2"
                ColStart="1"
                Filterable="false"
                Width="220px"
                ColEnd="2">
                </IgbColumn>
                
            </IgbColumnLayout>
            
        </IgbGrid>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;



	}

    private IgbGrid grid;
    private IgbGroupingExpression[] _groupingExpression1 = null;
    public IgbGroupingExpression[] GroupingExpression1
    {
        get
        {
            if (this._groupingExpression1 == null)
            {
                var groupingExpression1 = new IgbGroupingExpression[1];
                var groupingExpression2 = new IgbGroupingExpression();
                groupingExpression2.FieldName = "Country";
                groupingExpression2.Dir = SortingDirection.Asc;
                groupingExpression2.IgnoreCase = false;
                groupingExpression1[0] = groupingExpression2;
                this._groupingExpression1 = groupingExpression1;
            }
            return this._groupingExpression1;
        }
    }

    private CustomersData _customersData = null;
    public CustomersData CustomersData
    {
        get
        {
            if (_customersData == null)
            {
                _customersData = new CustomersData(); 
            }
            return _customersData;
        }
    }
    
}