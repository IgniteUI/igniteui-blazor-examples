@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbGrid AutoGenerate="false"
                 Data="NwindData"
                 PrimaryKey="ProductID"
                 @onkeydown="keyDownHandler"
                 @ActiveNodeChange="nodeChanged"
                 Name="grid1"
                 @ref="grid1">
            <IgbColumn Field="ProductID"
                       Header="Product ID"
                       Editable="true"
                       Groupable="true"
                       Hidden="true">
            </IgbColumn>

            <IgbColumn Field="ProductName"
                       Header="Product Name"
                       DataType="GridColumnDataType.String"
                       Editable="true">
            </IgbColumn>

            <IgbColumn Field="UnitPrice"
                       Header="Unit Price"
                       DataType="GridColumnDataType.Number"
                       Editable="true">
            </IgbColumn>

            <IgbColumn Field="QuantityPerUnit"
                       Header="Quantity Per Unit"
                       Groupable="true"
                       DataType="GridColumnDataType.String"
                       Editable="true">
            </IgbColumn>

            <IgbColumn Field="ReorderLevel"
                       Header="Reorder Level"
                       DataType="GridColumnDataType.Number"
                       Groupable="true"
                       Editable="true">
            </IgbColumn>

        </IgbGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid1 = this.grid1;

    }

    private IgbGrid grid1;
    private bool shouldAppendValue = false;

    private NwindData _nwindData = null;
    public NwindData NwindData
    {
        get
        {
            if (_nwindData == null)
            {
                _nwindData = new NwindData();
            }
            return _nwindData;
        }
    }

    public async Task nodeChanged()
    {
        var activeElem = grid1.GetSelectedCells()[0];
        activeElem.EditMode = false;
        await JS.invo("getBodyFocus");
    }

    public async Task keyDownHandler(KeyboardEventArgs e)
    {
        var grid1 = this.grid1;

        var code = e.Code;
        var activeElem = grid1.GetSelectedCells()[0];

        if ((string.Compare(e.Code, "Digit0") >= 0 && string.Compare(e.Code, "Digit9") <= 0) ||
        (string.Compare(e.Code, "KeyA") >= 0 && string.Compare(e.Code, "KeyZ") <= 0) &&
        e.Code != "Enter")
        {
            if (activeElem != null && activeElem.EditMode == false)
            {
                activeElem.EditMode = true;
                activeElem.EditValue = e.Key;
                this.shouldAppendValue = true;
                grid1.MarkForCheck();
            }
            else if (activeElem != null && activeElem.EditMode && this.shouldAppendValue)
            {
                await JS.InvokeVoidAsync("preventDefaultForKeyEvent", e);
                activeElem.EditValue = activeElem.EditValue + e.Key;
                this.shouldAppendValue = false;
            }
        }

        if (code == "Backspace")
        {
            if (activeElem == null)
            {
                return;
            }
            var rowIndex = (activeElem.Parent as IgbRowType).Index;
            var columnKey = activeElem.Column.Field;


            var item = NwindData[Convert.ToInt32(rowIndex)];
            var property = item.GetType().GetProperty(columnKey);
            if (property != null && property.CanWrite)
            {
                property.SetValue(item, "");
            }
            grid1.MarkForCheck();
        }

        if (code == "Enter")
        {
            if (activeElem == null)
            {
                return;
            }

            var thisRow = (activeElem.Parent as IgbRowType).Index;
            var dataView = this.grid1.GetDataView();
            var nextRowIndex = await JS.InvokeAsync<int>("getNextEditableRowIndex", thisRow, dataView, e.ShiftKey);

            grid1.navigateTo(nextRowIndex, activeElem.VisibleColumnIndex, (obj) =>
            {
                grid1.clearCellSelection();
                obj.target.activate();
            });
        }
    }
}