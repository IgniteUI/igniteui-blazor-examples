@using IgniteUI.Blazor.Controls;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container vertical">

    <div class="container vertical fill">
        <IgbGrid
        Data="NwindData"
        PrimaryKey="ProductID"
        RowEditable="true"
        AllowFiltering="true"
        BatchEditing="true"
        Name="grid"
        @ref="grid">
            <IgbColumn
            Field="ProductID"
            Header="Product ID"
            Name="ProductID"
            @ref="productID">
            </IgbColumn>
            
            <IgbColumn
            Name="ProductName"
            @ref="productName"
            Field="ProductName"
            Header="Product Name">
            </IgbColumn>
            
            <IgbColumn
            Name="UnitPrice"
            @ref="unitPrice"
            Field="UnitPrice"
            Header="Unit Price">
            </IgbColumn>
            
            <IgbColumn
            Name="UnitsOnOrder"
            @ref="unitsOnOrder"
            Field="UnitsOnOrder"
            Header="Units On Order">
            </IgbColumn>
            
            <IgbColumn
            Name="UnitsInStock"
            @ref="unitsInStock"
            Field="UnitsInStock"
            Header="Units In Stock">
            </IgbColumn>
            
            <IgbColumn
            Name="QuantityPerUnit"
            @ref="quantityPerUnit"
            Field="QuantityPerUnit"
            Header="Quantity Per Unit">
            </IgbColumn>
            
            <IgbColumn
            Name="ReorderLevel"
            @ref="reorderLevel"
            Field="ReorderLevel"
            Header="Reorder Level">
            </IgbColumn>
            
            <IgbColumn
            Name="Discontinued"
            @ref="discontinued"
            Field="Discontinued"
            Header="Discontinued">
            </IgbColumn>
            <IgbActionStrip>
                <IgbGridPinningActions></IgbGridPinningActions>
                <IgbGridEditingActions EditRow="true" DeleteRow="false"></IgbGridEditingActions>
             </IgbActionStrip>
        </IgbGrid>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(1);
    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var productID = this.productID;
        var productName = this.productName;
        var unitPrice = this.unitPrice;
        var unitsOnOrder = this.unitsOnOrder;
        var unitsInStock = this.unitsInStock;
        var quantityPerUnit = this.quantityPerUnit;
        var reorderLevel = this.reorderLevel;
        var discontinued = this.discontinued;

        this.BindElements = () => {
        };
        this.BindElements();

        if (firstRender) {
        }

        await Task.Delay(1);
	}

    private IgbGrid grid;
    private IgbColumn productID;
    private IgbColumn productName;
    private IgbColumn unitPrice;
    private IgbColumn unitsOnOrder;
    private IgbColumn unitsInStock;
    private IgbColumn quantityPerUnit;
    private IgbColumn reorderLevel;
    private IgbColumn discontinued;

    private NwindData _nwindData = null;
    public NwindData NwindData
    {
        get
        {
            if (_nwindData == null)
            {
                _nwindData = new NwindData(); 
            }
            return _nwindData;
        }
    }
    
}