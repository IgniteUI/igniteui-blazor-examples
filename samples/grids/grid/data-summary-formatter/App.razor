@using IgniteUI.Blazor.Controls;


@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<style>
</style>
<div class="container vertical">




    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Id="grid"
        Data="NwindData"
        DisplayDensity="DisplayDensity.Compact"
        Name="grid"
        @ref="grid">
            <IgbColumn
            Field="ProductID"
            Header="Product ID"
            Name="ProductID"
            @ref="productID">
            </IgbColumn>
            
            <IgbColumn
            Field="ProductName"
            Header="Prod. Name"
            HasSummary="true"
            DataType="GridColumnDataType.String">
            </IgbColumn>
            
            <IgbColumn
            Field="UnitPrice"
            Header="Unit Price"
            HasSummary="true"
            DataType="GridColumnDataType.Number"
            BodyTemplate="WebGridNumberToUSDCellTemplate"
            Name="column1"
            @ref="column1">
            </IgbColumn>
            
            <IgbColumn
            Field="UnitsInStock"
            Header="UnitsInStock"
            DataType="GridColumnDataType.Number">
            </IgbColumn>
            
            <IgbColumn
            Field="Discontinued"
            Header="Discontinued"
            HasSummary="true"
            DataType="GridColumnDataType.Boolean">
            </IgbColumn>
            
            <IgbColumn
            Field="OrderDate"
            Header="Order Date"
            HasSummary="true"
            DataType="GridColumnDataType.Date"
            PipeArgs="ColumnPipeArgs1"
            Name="column2"
            @ref="column2">
            </IgbColumn>
            
        </IgbGrid>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {
    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var productID = this.productID;
        var column1 = this.column1;
        var column2 = this.column2;

        this.BindElements = () => {
        };
        this.BindElements();

        if (firstRender) {
        }
	}

    private IgbGrid grid;
    private IgbColumn productID;
    private IgbColumn column1;
    private IgbColumn column2;
    private IgbColumnPipeArgs _columnPipeArgs1 = null;
    public IgbColumnPipeArgs ColumnPipeArgs1
    {
        get
        {
            if (this._columnPipeArgs1 == null)
            {
                var columnPipeArgs1 = new IgbColumnPipeArgs();
                columnPipeArgs1.Format = "mediumDate";
                this._columnPipeArgs1 = columnPipeArgs1;
            }
            return this._columnPipeArgs1;
        }
    }

    
    public RenderFragment<IgbCellTemplateContext> WebGridNumberToUSDCellTemplate = (ctx) => {
        return @<span>@formatNumber(ctx.Cell.Value)</span>;
    };
    	
        private static string formatNumber(object value)
        {
            return "$" + value;
        }
    private NwindData _nwindData = null;
    public NwindData NwindData
    {
        get
        {
            if (_nwindData == null)
            {
                _nwindData = new NwindData(); 
            }
            return _nwindData;
        }
    }
    
}