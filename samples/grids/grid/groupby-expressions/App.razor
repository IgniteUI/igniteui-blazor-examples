@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical">

    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Id="grid"
        Data="InvoicesData"
        GroupingExpressions="@(new IgbGroupingExpression[] { GroupingExpression1, GroupingExpression2 })"
        GroupRowTemplateScript="WebGridGroupByRowTemplate"
        Name="grid"
        @ref="grid">
            <IgbColumn
            Field="OrderID"
            Hidden="true">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipCountry"
            Header="Ship Country"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
            <IgbColumn
            Field="OrderDate"
            Header="Order Date"
            Width="200px"
            Groupable="true"
            DataType="GridColumnDataType.Date">
            </IgbColumn>
            
            <IgbColumn
            Field="PostalCode"
            Header="Postal Code"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
            <IgbColumn
            Field="Discontinued"
            Width="200px"
            Groupable="true"
            DataType="GridColumnDataType.Boolean"
            BodyTemplateScript="WebGridBooleanCellTemplate"
            Name="column1"
            @ref="column1">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipName"
            Header="Ship Name"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipCity"
            Header="Ship City"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipperName"
            Header="Shipper Name"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
            <IgbColumn
            Field="Salesperson"
            Header="Sales Person"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
            <IgbColumn
            Field="UnitPrice"
            Header="Unit Price"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
            <IgbColumn
            Field="Quantity"
            Width="200px"
            Groupable="true">
            </IgbColumn>
            
        </IgbGrid>
        
    </div>
</div>

@code {


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var column1 = this.column1;


    }

    private IgbGrid grid;
    private IgbGroupingExpression _groupingExpression1 = null;
    public IgbGroupingExpression GroupingExpression1
    {
        get
        {
            if (this._groupingExpression1 == null)
            {
                var groupingExpression1 = new IgbGroupingExpression();
                groupingExpression1.FieldName = "ShipCountry";
                groupingExpression1.Dir = SortingDirection.Asc;
                groupingExpression1.IgnoreCase = false;
                this._groupingExpression1 = groupingExpression1;
            }
            return this._groupingExpression1;
        }
    }
    private IgbGroupingExpression _groupingExpression2 = null;
    public IgbGroupingExpression GroupingExpression2
    {
        get
        {
            if (this._groupingExpression2 == null)
            {
                var groupingExpression2 = new IgbGroupingExpression();
                groupingExpression2.FieldName = "ShipCity";
                groupingExpression2.IgnoreCase = false;
                groupingExpression2.Dir = SortingDirection.Asc;
                this._groupingExpression2 = groupingExpression2;
            }
            return this._groupingExpression2;
        }
    }
    private IgbColumn column1;

    private InvoicesData _invoicesData = null;
    public InvoicesData InvoicesData
    {
        get
        {
            if (_invoicesData == null)
            {
                _invoicesData = new InvoicesData(); 
            }
            return _invoicesData;
        }
    }
    
}