@using IgniteUI.Blazor.Controls;


@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<style>
</style>
<div class="container vertical">




    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Id="grid"
        Data="InvoicesData"
        GroupingExpressions="@(new IgbGroupingExpression[] { GroupingExpression1, GroupingExpression2 })"
        GroupRowTemplateScript="WebGridGroupByRowTemplate"
        Name="grid"
        @ref="grid">
            <IgbColumn
            Field="OrderID"
            Hidden="true">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipCountry"
            Header="Ship Country"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="OrderDate"
            Header="Order Date"
            Groupable="true"
            Width="200px"
            DataType="GridColumnDataType.Date">
            </IgbColumn>
            
            <IgbColumn
            Field="PostalCode"
            Header="Postal Code"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="Discontinued"
            Groupable="true"
            Width="200px"
            DataType="GridColumnDataType.Boolean"
            BodyTemplate="WebGridBooleanCellTemplate"
            Name="column1"
            @ref="column1">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipName"
            Header="Ship Name"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipCity"
            Header="Ship City"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipperName"
            Header="Shipper Name"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="Salesperson"
            Header="Sales Person"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="UnitPrice"
            Header="Unit Price"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="Quantity"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
        </IgbGrid>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(1);
    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var column1 = this.column1;

        this.BindElements = () => {
        };
        this.BindElements();

        if (firstRender) {
        }

        await Task.Delay(1);
	}

    private IgbGrid grid;
    private IgbGroupingExpression _groupingExpression1 = null;
    public IgbGroupingExpression GroupingExpression1
    {
        get
        {
            if (this._groupingExpression1 == null)
            {
                var groupingExpression1 = new IgbGroupingExpression();
                groupingExpression1.FieldName = "ShipCountry";
                groupingExpression1.Dir = SortingDirection.Asc;
                groupingExpression1.IgnoreCase = false;
                this._groupingExpression1 = groupingExpression1;
            }
            return this._groupingExpression1;
        }
    }
    private IgbGroupingExpression _groupingExpression2 = null;
    public IgbGroupingExpression GroupingExpression2
    {
        get
        {
            if (this._groupingExpression2 == null)
            {
                var groupingExpression2 = new IgbGroupingExpression();
                groupingExpression2.FieldName = "ShipCity";
                groupingExpression2.IgnoreCase = false;
                groupingExpression2.Dir = SortingDirection.Asc;
                this._groupingExpression2 = groupingExpression2;
            }
            return this._groupingExpression2;
        }
    }
    private IgbColumn column1;

    
    public RenderFragment<IgbCellTemplateContext> WebGridBooleanCellTemplate = (ctx) => {
    	bool value = Convert.ToBoolean(ctx.Cell.Value.ToString());
        return @<div>
    	@if (value == true)
    	{
    		<img src="https://www.infragistics.com/angular-demos-lob/assets/images/grid/active.png" title="Continued" alt="Continued" />
    	}
    	@if (value == false)
    	{
    		<img src="https://www.infragistics.com/angular-demos-lob/assets/images/grid/expired.png" title="Discontinued" alt="Discontinued" />
    	}
    	</div>;
    };
    	
    private InvoicesData _invoicesData = null;
    public InvoicesData InvoicesData
    {
        get
        {
            if (_invoicesData == null)
            {
                _invoicesData = new InvoicesData(); 
            }
            return _invoicesData;
        }
    }
    
}