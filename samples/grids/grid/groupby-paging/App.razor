@using IgniteUI.Blazor.Controls;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container vertical">

    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Id="grid"
        Data="InvoicesData"
        GroupingExpressions="GroupingExpression1"
        GroupRowTemplateScript="WebGridGroupByRowTemplate"
        RowSelection="GridSelectionMode.Multiple"
        Name="grid"
        @ref="grid">
            <IgbPaginator
            PerPage="10">
            </IgbPaginator>
            
            <IgbColumn
            Field="ShipCountry"
            Header="Ship Country"
            Groupable="true"
            Width="200px">
            </IgbColumn>
            
            <IgbColumn
            Field="ShipCity"
            Header="Ship City"
            Groupable="true"
            Width="250px">
            </IgbColumn>
            
            <IgbColumn
            Field="UnitPrice"
            Header="Unit Price"
            Groupable="true"
            Width="150px"
            DataType="GridColumnDataType.Number">
            </IgbColumn>
            
        </IgbGrid>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(1);
    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;

        this.BindElements = () => {
        };
        this.BindElements();

        if (firstRender) {
        }

        await Task.Delay(1);
	}

    private IgbGrid grid;
    private IgbGroupingExpression[] _groupingExpression1 = null;
    public IgbGroupingExpression[] GroupingExpression1
    {
        get
        {
            if (this._groupingExpression1 == null)
            {
                var groupingExpression1 = new IgbGroupingExpression[1];
                var groupingExpression2 = new IgbGroupingExpression();
                groupingExpression2.FieldName = "ShipCountry";
                groupingExpression2.Dir = SortingDirection.Asc;
                groupingExpression2.IgnoreCase = false;
                groupingExpression1[0] = groupingExpression2;
                this._groupingExpression1 = groupingExpression1;
            }
            return this._groupingExpression1;
        }
    }

    private InvoicesData _invoicesData = null;
    public InvoicesData InvoicesData
    {
        get
        {
            if (_invoicesData == null)
            {
                _invoicesData = new InvoicesData(); 
            }
            return _invoicesData;
        }
    }
    
}