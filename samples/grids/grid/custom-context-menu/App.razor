@using IgniteUI.Blazor.Controls
@using Newtonsoft.Json;
<div class="container vertical">
    <div class="wrapper" oncontextmenu="event.preventDefault()" @onclick="CloseMenu">
        <IgbGrid AutoGenerate="false"
                 CellSelection="GridSelectionMode.Multiple"
                 ContextMenu="onMenuShow"
                 @oncontextmenu="RightClick"
                 Name="grid"
                 @ref="grid"
                 Data="NwindData">
            <IgbColumn Field="ProductID"
                       Header="Product ID">
            </IgbColumn>

            <IgbColumn Field="ProductName"
                       Header="Product Name">
            </IgbColumn>

            <IgbColumn Field="UnitsInStock"
                       Header="Units In Stock"
                       DataType="GridColumnDataType.Number">
            </IgbColumn>

            <IgbColumn Field="UnitPrice"
                       Header="Units Price"
                       DataType="GridColumnDataType.Number">
            </IgbColumn>

            <IgbColumn Field="Discontinued"
                       DataType="GridColumnDataType.Boolean">
            </IgbColumn>

            <IgbColumn Field="OrderDate"
                       Header="Order Date"
                       DataType="GridColumnDataType.Date">
            </IgbColumn>

        </IgbGrid>
        <div class="selected-data-area">
            @SelectedData
        </div>
        </div>
        @if (ShowMenu)
        {
            <div id="menu" class="contextmenu" style="left: @MenuX; top: @MenuY">
                <span id="copySingleCell" class="item" @onclick="CopyCellData">
                    <IgbIcon @ref=icon IconName="content_copy" Collection="material"></IgbIcon>Copy Cell Data
                </span>
            <span id="copyRow" class="item" @onclick="CopyRowData">
                    <IgbIcon IconName="content_copy" Collection="material"></IgbIcon>Copy Row Data
                </span>
                <span id="copyMultiCells" class="item" @onclick="CopyCellsData">
                    <IgbIcon IconName="content_copy" Collection="material"></IgbIcon>Copy Cells Data
                </span>
        </div>
        }
    </div>

<style>

    .contextmenu {
        position: absolute;
        width: 180px;
        background: white;
        display: flex;
        cursor: context-menu;
        flex-direction: column;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);
        z-index: 9999;
        font-size: 0.75rem;
        font-weight: 650;
    }

    .item {
        padding: 10px;
        display: flex;
    }

        .item:hover {
            background: rgb(204, 203, 203);
        }

    .icon {
        vertical-align: middle;
        margin-bottom: 5px;
        margin-right: 5px;
    }

    .selected-data-area {
        overflow-y: auto;
        width: 50%;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);
        margin-left: 10px;
    }

    .wrapper {
        margin: 10px;
        display: flex;
        justify-content: space-evenly;
    }
</style>

@code {
    private IgbGrid grid;
    public IgbIcon icon;
    public bool ShowMenu = false;
    public bool? ShowCopyCells = false;
    public string MenuX;
    public string MenuY;
    public IgbCellType ClickedCell;
    public string iconContent = "<svg xmlns='http://www.w3.org/2000/svg' height='48' viewBox='0 -960 960 960' width='48'><path d = 'M180-81q-24 0-42-18t-18-42v-603h60v603h474v60H180Zm120-120q-24 0-42-18t-18-42v-560q0-24 18-42t42-18h440q24 0 42 18t18 42v560q0 24-18 42t-42 18H300Zm0-60h440v-560H300v560Zm0 0v-560 560Z' /></svg >";
    public string SelectedData;

    private NwindData _nwindData = null;
    public NwindData NwindData
    {
        get
        {
            if (_nwindData == null)
            {
                _nwindData = new NwindData();
            }
            return _nwindData;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (this.icon != null)
        {
            this.icon.EnsureReady().ContinueWith(new Action<Task>((e) =>
            {
                this.icon.RegisterIconFromTextAsync("content_copy", iconContent, "material");
            }));
        }
    }

    public void RightClick(MouseEventArgs e)
    {
        this.MenuX = e.ClientX + "px";
        this.MenuY = e.ClientY + "px";
    }

    public void CloseMenu(MouseEventArgs e)
    {
        if (e.Button == 0)
        {
            this.ShowMenu = false;
            StateHasChanged();
        }
    }


    public async void onMenuShow(IgbGridCellEventArgs e)
    {
        IgbGridCellEventArgsDetail detail = e.Detail;
        this.ShowMenu = true;
        this.ClickedCell = detail.Cell;
    }

    public void CopyCellData()
    {
        this.ShowMenu = false;
        this.SelectedData = this.ClickedCell.Value.ToString();
        StateHasChanged();
    }


    public async void CopyRowData()
    {
        this.ShowMenu = false;
        NwindDataItem rowData = this.NwindData.ElementAt(this.ClickedCell.Id.RowIndex);
        this.SelectedData = JsonConvert.SerializeObject(rowData);
        StateHasChanged();
}

    public async void CopyCellsData()
    {
        this.ShowMenu = false;
        var selectedData = await this.grid.GetSelectedDataAsync(false, false);
        List<object> newList = new List<object>();
        //Map to simpler dictionary
        foreach (Dictionary<string, object> item in selectedData)
        {
            Dictionary<string, string> values = new Dictionary<string, string>();
            foreach (var key in item.Keys)
            {
                object value = item[key];
                string rawText = ((System.Text.Json.JsonElement)value).GetRawText().Trim('"');
                values.Add(key, rawText);
            }
            newList.Add(values);
        }
        this.SelectedData = JsonConvert.SerializeObject(newList);
        StateHasChanged();
    }
}