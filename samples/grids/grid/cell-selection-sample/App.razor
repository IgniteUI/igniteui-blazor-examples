@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;

<div class="container vertical">
    <div class="container vertical">

        <IgbRadioGroup id="radioGroup" Alignment="RadioGroupAlignment.Horizontal">
            <IgbRadio Value="None" LabelPosition="RadioLabelPosition.After" Change="CellSelectionRadioButtonChange">None</IgbRadio>
            <IgbRadio Value="Single" LabelPosition="RadioLabelPosition.After" Change="CellSelectionRadioButtonChange">Single</IgbRadio>
            <IgbRadio Value="Multiple" LabelPosition="RadioLabelPosition.After" Checked="true" Change="CellSelectionRadioButtonChange">Multiple</IgbRadio>
        </IgbRadioGroup>

        @if (Data != null)
        {
            <div style="overflow: hidden">
                 <IgbGrid Height="500px" Width="100%" Data="Data" AutoGenerate=false CellSelection=CellSelectionMode>
                     <IgbGridColumn Field="ProductID" />
                     <IgbGridColumn Field="ProductName" />
                     <IgbGridColumn Field="OrderItems" />
                     <IgbGridColumn Field="OrderValue" />
                </IgbGrid>

                <IgbSnackbar Open=true ActionText="Got it. Thanks!">
                    @*<IgbIcon>notification_important</IgbIcon>*@
                    <div class="container">
                        @if (this.CellSelectionMode == GridSelectionMode.Multiple)
                        {
                            <ul>
                                <li><b>This is the default selection behavior.</b></li>
                                <li>
                                    Click on a cell and while pressing the mouse key perform drag action.
                                </li>
                                <li>Select a cell and press Shift + Arrow down key, this will start range selection as well.</li>
                            </ul>
                        }
                        @if (this.CellSelectionMode == GridSelectionMode.Single)
                        {
                            <ul>
                                <li><b>Now you can select only one cell within the grid.</b></li>
                                <li>On single cell click the previous selection state will be cleared.</li>
                                <li>The mouse drag will not work and instead of selecting a cell, this will make default text selection.</li>
                            </ul>
                        }
                        @if (this.CellSelectionMode == GridSelectionMode.None)
                        {
                            <ul>
                                <li><b>Now you are unable to select a cell while interacting with grid UI.</b></li>
                                <li>If you need to select a cell, you can use the grid API methods.</li>
                            </ul>
                        }
                    </div>
                </IgbSnackbar>

            </div>
        }
    </div>
</div>

@code {

    private NWindData Data;
    private Random Rand = new Random();    
    public GridSelectionMode CellSelectionMode{ get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        IgbGridModule.Register(IgniteUIBlazor);
        IgbRadioModule.Register(IgniteUIBlazor);
        IgbRadioGroupModule.Register(IgniteUIBlazor);
        IgbSnackbarModule.Register(IgniteUIBlazor);
        IgbIconModule.Register(IgniteUIBlazor);

        this.Data = new NWindData();

        this.CellSelectionMode = GridSelectionMode.Multiple;
    }

    private void CellSelectionRadioButtonChange(IgbComponentBoolValueChangedEventArgs args)
    {
        IgbRadio radio = args.Parent as IgbRadio;

        switch (radio.Value)
        {
            case "None":
                {
                    this.CellSelectionMode = GridSelectionMode.None;
                    break;
                }
            case "Single":
                {
                    this.CellSelectionMode = GridSelectionMode.Single;
                    break;
                }
            case "Multiple":
                {
                    this.CellSelectionMode = GridSelectionMode.Multiple;
                    break;
                }
        }
    }  
}
