@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;

<div class="container vertical">
    <div class="container vertical">
        @if (Data != null)
        {
            <div class="options vertical">
                <label style="align-self: auto">Change Copy Separator</label>
                <IgbInput DisplayType=@InputType.Text Placeholder="CLIPBOARD OPTIONS DOESNT EXPOSE PROPS YET">
                    <span slot="helper-text">The default value is a single tabulation which is shown as whitespace above. Click the clear icon to reset it back to tabulation.</span>
                </IgbInput>                
            </div>

            <div class="options horizontal">
                <IgbSwitch Value="Enabled" Checked=true Change=OnGridClipboardOptionChanged>Grid Copy Behavior</IgbSwitch>
                <IgbSwitch Value="Headers" Checked=true Change=OnGridClipboardOptionChanged>Copy Header Labels</IgbSwitch>
                <IgbSwitch Value="Formatters" Checked=true Change=OnGridClipboardOptionChanged>Copy Column Formatters</IgbSwitch>
                <IgbButton>Clear Selection</IgbButton>
            </div>

            <div style="overflow: hidden">
                 <IgbGrid @ref=GridRef Height="500px" Width="100%" Data="Data" RowEditable=true ColumnInit=OnColumnInit
                          ClipboardOptions=GridClipboardOptions />
            </div>

            <div class="options vertical">
                <label style="align-self: auto">Paste your data here (or in Excel)</label>
                <textarea cols="30" rows="5"></textarea>                
            </div>
        }
    </div>
</div>

@code {

    private NWindData Data { get; set; }

    private Random Rand = new Random();

    public IgbGrid GridRef { get; set; }   

    private IgbGridClipboardOptions GridClipboardOptions{ get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbGridModule.Register(IgniteUIBlazor);        
        IgbSwitchModule.Register(IgniteUIBlazor);
        IgbInputModule.Register(IgniteUIBlazor);

        this.GridClipboardOptions = new IgbGridClipboardOptions();

        this.Data = new NWindData();        
    }

    public void OnColumnInit(IgbColumnComponentEventArgs args)
    {
        //TO DO THIS EVENT DOESNT FIRE YET
    }

    public void OnGridClipboardOptionChanged(IgbComponentBoolValueChangedEventArgs args)
    {
        IgbSwitch s = args.Parent as IgbSwitch;
        
        //TO DO as it doesn't appear that the IgbGridClipboardOptions exposes the props from the Angular sample
        switch(s.Value){
            case "Enabled":
                {
                    break;
                }
            case "Headers":
                {
                    break;
                }
            case "Formatters":
                {
                    break;
                }
        }
    }   
}
