@using IgniteUI.Blazor.Controls
@inject IDataSource1Service dataSource1Service

<div class="container vertical">

    <div class="container vertical fill">
        <IgbGrid Height="800px"
                 Width="100%"
                 AutoGenerate="false"
                 Data="dataSource1Table1"
                 PrimaryKey="ID"
                 DisplayDensity="DisplayDensity.Cosy"
                 AllowFiltering="true"
                 FilterMode="FilterMode.ExcelStyleFilter"
                 PagingMode="GridPagingMode.Remote"
                 IsLoading="loading"
                 PagingDone="OnPagingDone"
                 Name="grid1"
                 @ref="grid1">
            <IgbPaginator PerPage="PerPage" Page="Page" TotalRecords="TotalRecords">
            </IgbPaginator>
            <IgbColumn Field="ID"
                       Header="Product ID"
                       DataType="GridColumnDataType.Number"
                       Editable="true"
                       Resizable="true">
            </IgbColumn>

            <IgbColumn Field="ProductName"
                       Header="Product Name"
                       DataType="GridColumnDataType.String"
                       Editable="true"
                       Resizable="true">
            </IgbColumn>

            <IgbColumn Field="UnitPrice"
                       Header="Unit Price"
                       DataType="GridColumnDataType.Number"
                       Editable="true"
                       Resizable="true">
            </IgbColumn>

            <IgbColumn Field="UnitsInStock"
                       Header="Units in Stock"
                       DataType="GridColumnDataType.Number"
                       Editable="true"
                       Resizable="true">
            </IgbColumn>

            <IgbColumn Field="OrderDate"
                       Header="Order Date"
                       DataType="GridColumnDataType.Date"
                       Editable="true"
                       Resizable="true">
            </IgbColumn>

            <IgbColumn Field="Discontinued"
                       Header="Discontinued"
                       DataType="GridColumnDataType.Boolean"
                       Editable="true">
            </IgbColumn>

            <IgbColumn Field="ReorderLevel"
                       Header="Reorder Level"
                       DataType="GridColumnDataType.Number"
                       Editable="true"
                       Filterable="true">
            </IgbColumn>
        </IgbGrid>

    </div>
</div>

@code {
    protected List<NwindDataItem> dataSource1Table1 { get; set; }
    protected List<NwindDataItem[]> partitionedProducts { get; set; }
    private IgbGrid grid1;
    Random random = new Random();
    protected int Page { get; set; } = 0;
    protected int PerPage { get; set; } = 5;
    protected int TotalRecords { get; set; } = 77;
    protected bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        dataSource1Table1 = await dataSource1Service.GetTable1();
        partitionedProducts = (from product in dataSource1Table1 select product)
                                 .Chunk(PerPage)
                                 .ToList();
        dataSource1Table1 = partitionedProducts.FirstOrDefault().ToList();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid1 = this.grid1;
        await grid1.EnsureReady();
    }

    public async void OnPagingDone(IgbPageEventArgs e)
    {
        Console.WriteLine($"Page: {e.Detail.Current}");
        this.Page = (int)e.Detail.Current;
        this.loading = true;
        await PopulateData();
    }

    public async Task PopulateData()
    {
        try
        {
            await foreach (var item in FetchItems())
            {
                dataSource1Table1 = partitionedProducts[Page].ToList();
                StateHasChanged();
            }
            loading = false;

        }
        catch (Exception _ex)
        {

        }
    }

    public async IAsyncEnumerable<int> FetchItems()
    {
        for (int i = 1; i <= PerPage; i++)
        {
            yield return (Page) * PerPage + i;
        }
    }

    public class DataSource1Service : IDataSource1Service
    {
        private readonly HttpClient _http;

        public DataSource1Service(HttpClient http)
        {
            _http = http;
        }

        public async Task<List<NwindDataItem>> GetTable1()
        {
            using HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, new Uri("https://www.igniteui.com/api/products", UriKind.RelativeOrAbsolute));
            using HttpResponseMessage response = await _http.SendAsync(request).ConfigureAwait(false);
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<List<NwindDataItem>>().ConfigureAwait(false);
            }

            return new List<NwindDataItem>();
        }
    }

    public interface IDataSource1Service
    {
        Task<List<NwindDataItem>> GetTable1();
    }
}