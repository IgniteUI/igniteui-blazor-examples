@using IgniteUI.Blazor.Controls

<div class="container vertical">
    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Data="FinancialDataAll"
        Name="grid"
        @ref="grid"
        SortingExpressions="SortingExpression1"
        Id="grid">
            <IgbColumn
            Field="Settlement"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Type"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Region"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Country"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Price"
            DataType="GridColumnDataType.Currency"
            Sortable="true">
            </IgbColumn>

            <IgbColumn
            Field="Buy"
            DataType="GridColumnDataType.Currency"
            Sortable="true">
            </IgbColumn>

        </IgbGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;

    }

    private IgbGrid grid;
    private IgbSortingExpression[] _sortingExpression1 = null;
    public IgbSortingExpression[] SortingExpression1
    {
        get
        {
            if (this._sortingExpression1 == null)
            {
                var sortingExpression1 = new IgbSortingExpression[6];
                var sortingExpression2 = new IgbSortingExpression();
                sortingExpression2.Dir = SortingDirection.Asc;
                sortingExpression2.FieldName = "Settlement";
                sortingExpression2.IgnoreCase = true;
                sortingExpression1[0] = sortingExpression2;
                var sortingExpression3 = new IgbSortingExpression();
                sortingExpression3.Dir = SortingDirection.Desc;
                sortingExpression3.FieldName = "Type";
                sortingExpression3.IgnoreCase = true;
                sortingExpression1[1] = sortingExpression3;
                var sortingExpression4 = new IgbSortingExpression();
                sortingExpression4.Dir = SortingDirection.Asc;
                sortingExpression4.FieldName = "Region";
                sortingExpression4.IgnoreCase = true;
                sortingExpression1[2] = sortingExpression4;
                var sortingExpression5 = new IgbSortingExpression();
                sortingExpression5.Dir = SortingDirection.Asc;
                sortingExpression5.FieldName = "Country";
                sortingExpression5.IgnoreCase = true;
                sortingExpression1[3] = sortingExpression5;
                var sortingExpression6 = new IgbSortingExpression();
                sortingExpression6.Dir = SortingDirection.Asc;
                sortingExpression6.FieldName = "Price";
                sortingExpression6.IgnoreCase = true;
                sortingExpression1[4] = sortingExpression6;
                var sortingExpression7 = new IgbSortingExpression();
                sortingExpression7.Dir = SortingDirection.Asc;
                sortingExpression7.FieldName = "Buy";
                sortingExpression7.IgnoreCase = true;
                sortingExpression1[5] = sortingExpression7;
                this._sortingExpression1 = sortingExpression1;
            }
            return this._sortingExpression1;
        }
    }

    private FinancialDataAll _financialDataAll = null;
    public FinancialDataAll FinancialDataAll
    {
        get
        {
            if (_financialDataAll == null)
            {
                _financialDataAll = new FinancialDataAll();
            }
            return _financialDataAll;
        }
    }

}