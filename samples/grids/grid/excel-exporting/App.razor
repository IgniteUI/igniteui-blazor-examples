

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Data="InvoicesData"
        Name="grid"
        @ref="grid"
        Id="grid"
        GroupingExpressions="GroupingExpression1"
        HideGroupedColumns="true">
            <IgbGridToolbar
            >
                <IgbGridToolbarActions
                >
                    <IgbGridToolbarExporter
                    ExportCSV="false"
                    ExportExcel="true">
                    </IgbGridToolbarExporter>

                </IgbGridToolbarActions>

            </IgbGridToolbar>

            <IgbColumn
            Field="ShipCountry"
            Header="Ship Country"
            Width="150px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Field="ShipCity"
            Header="Ship City"
            Width="150px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Field="ShipAddress"
            Header="Ship Address"
            Width="150px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Field="PostalCode"
            Header="Postal Code"
            Width="150px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Field="OrderDate"
            Header="Order Date"
            DataType="GridColumnDataType.Date"
            Width="150px"
            Groupable="true">
            </IgbColumn>

            <IgbColumn
            Field="Quantity"
            Width="150px"
            Groupable="true">
            </IgbColumn>

        </IgbGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;

    }

    private IgbGrid grid;
    private IgbGroupingExpression[] _groupingExpression1 = null;
    public IgbGroupingExpression[] GroupingExpression1
    {
        get
        {
            if (this._groupingExpression1 == null)
            {
                var groupingExpression1 = new IgbGroupingExpression[2];
                var groupingExpression2 = new IgbGroupingExpression();
                groupingExpression2.FieldName = "ShipCountry";
                groupingExpression2.IgnoreCase = false;
                groupingExpression2.Dir = SortingDirection.Asc;
                groupingExpression1[0] = groupingExpression2;
                var groupingExpression3 = new IgbGroupingExpression();
                groupingExpression3.FieldName = "ShipCity";
                groupingExpression3.IgnoreCase = false;
                groupingExpression3.Dir = SortingDirection.Asc;
                groupingExpression1[1] = groupingExpression3;
                this._groupingExpression1 = groupingExpression1;
            }
            return this._groupingExpression1;
        }
    }

    private InvoicesData _invoicesData = null;
    public InvoicesData InvoicesData
    {
        get
        {
            if (_invoicesData == null)
            {
                _invoicesData = new InvoicesData();
            }
            return _invoicesData;
        }
    }

}