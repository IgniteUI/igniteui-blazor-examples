@using IgniteUI.Blazor.Controls

@inject IJSRuntime JS

<div class="container vertical ig-typography">
    <div class="container vertical fill">
        <IgbGrid
        AutoGenerate="false"
        Data="FinancialDataAll"
        Name="grid"
        @ref="grid"
        Id="grid"
        AllowFiltering="true"
        RowStylesScript="WebGridRowStylesHandler">
            <IgbColumn
            Field="Category"
            Width="120px">
            </IgbColumn>

            <IgbColumn
            Field="Type"
            Filterable="false"
            Width="120px">
            </IgbColumn>

            <IgbColumn
            Field="Open"
            Header="Open Price"
            Width="120px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="Price"
            Width="120px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="Change"
            Width="120px"
            DataType="GridColumnDataType.Number"
            BodyTemplateScript="WebGridCurrencyCellTemplate"
            Name="column1"
            @ref="column1">
            </IgbColumn>

            <IgbColumn
            Field="ChangePercent"
            Header="Change(%)"
            Width="120px"
            DataType="GridColumnDataType.Percent"
            BodyTemplateScript="WebGridCurrencyCellTemplate"
            Name="column2"
            @ref="column2">
            </IgbColumn>

            <IgbColumn
            Field="AnnualChange"
            Header="Change On Year(%)"
            Width="150px"
            DataType="GridColumnDataType.Number">
            </IgbColumn>

            <IgbColumn
            Field="Buy"
            Width="130px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="Sell"
            Width="130px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="Spread"
            Width="130px"
            DataType="GridColumnDataType.Number">
            </IgbColumn>

            <IgbColumn
            Field="Volume"
            Width="130px"
            DataType="GridColumnDataType.Number">
            </IgbColumn>

            <IgbColumn
            Field="High"
            Header="High(D)"
            Width="130px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="Low"
            Header="Low(D)"
            Width="130px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="AnnualHigh"
            Header="High(Y)"
            Width="130px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="AnnualLow"
            Header="Low(Y)"
            Width="130px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

            <IgbColumn
            Field="AnnualStart"
            Header="Start(Y)"
            Width="130px"
            DataType="GridColumnDataType.Currency">
            </IgbColumn>

        </IgbGrid>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var grid = this.grid;
        var column1 = this.column1;
        var column2 = this.column2;

    }

    private IgbGrid grid;
    private IgbColumn column1;
    private IgbColumn column2;

    private FinancialDataAll _financialDataAll = null;
    public FinancialDataAll FinancialDataAll
    {
        get
        {
            if (_financialDataAll == null)
            {
                _financialDataAll = new FinancialDataAll();
            }
            return _financialDataAll;
        }
    }

}