@page "/LinearGaugeTypeMultiRange"

@using Infragistics.Blazor.Controls
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">    
    <div class="igComponent">
        <LinearGauge Height="120px" Width="100%"
                     Value="80"
                     MinimumValue="0"
                     MaximumValue="100"
                     Interval="5"
                     LabelInterval="5"
                     LabelExtent="0.15"
                     TransitionDuration="500"
                     ScaleInnerExtent="0.25"
                     ScaleOuterExtent="0.8"
                     ScaleStartExtent="0.05"
                     ScaleEndExtent="0.95"
                     IsNeedleDraggingEnabled="true"
                     NeedleShape="LinearGraphNeedleShape.Triangle"
                     NeedleBrush="#494949"
                     NeedleOutline="#494949"
                     NeedleStrokeThickness="1"
                     NeedleOuterExtent="0.9"
                     NeedleInnerExtent="0.35"
                     NeedleBreadth="10"
                     TickBrush="Gray"
                     TickStartExtent="0.25"
                     TickEndExtent="0.15"
                     TickStrokeThickness="1"
                     MinorTickBrush="transparent"
                     MinorTickStartExtent="0.25"
                     MinorTickEndExtent="0.2"
                     MinorTickStrokeThickness="1"
                     MinorTickCount="9"
                     BackingBrush="transparent"
                     BackingOutline="transparent"
                     ScaleStrokeThickness="0"
                     ScaleBrush="#E0DFDF"
                     ScaleOutline="#E0DFDF">
            @for (int i = 0; i < RangeInfo1.Count; i++)
            {
                GaugeRangeInfo info1 = RangeInfo1[i];
                <LinearGraphRange StartValue=info1.StartValue
                                  EndValue=info1.EndValue
                                  InnerStartExtent=info1.InnerStartExtent
                                  InnerEndExtent=info1.InnerEndExtent
                                  OuterStartExtent=info1.OuterStartExtent
                                  OuterEndExtent=info1.OuterEndExtent
                                  Brush="@info1.Brush"
                                  Outline="@info1.Outline">
                </LinearGraphRange>
            }
        </LinearGauge>
        <LinearGauge Height="120px" Width="100%"
                     Value="50"
                     MinimumValue="0"
                     MaximumValue="100"
                     Interval="5"
                     LabelInterval="5"
                     LabelExtent="0.15"
                     TransitionDuration="500"
                     ScaleInnerExtent="0.25"
                     ScaleOuterExtent="0.8"
                     ScaleStartExtent="0.05"
                     ScaleEndExtent="0.95"
                     IsNeedleDraggingEnabled="true"
                     NeedleShape="LinearGraphNeedleShape.Triangle"
                     NeedleBrush="#494949"
                     NeedleOutline="#494949"
                     NeedleStrokeThickness="1"
                     NeedleOuterExtent="0.9"
                     NeedleInnerExtent="0.35"
                     NeedleBreadth="10"
                     TickBrush="Gray"
                     TickStartExtent="0.25"
                     TickEndExtent="0.15"
                     TickStrokeThickness="1"
                     MinorTickBrush="transparent"
                     MinorTickStartExtent="0.25"
                     MinorTickEndExtent="0.2"
                     MinorTickStrokeThickness="1"
                     MinorTickCount="9"
                     BackingBrush="transparent"
                     BackingOutline="transparent"
                     ScaleStrokeThickness="0"
                     ScaleBrush="#E0DFDF"
                     ScaleOutline="#E0DFDF">
            @for (int i = 0; i < RangeInfo2.Count; i++)
            {
                GaugeRangeInfo info2 = RangeInfo2[i];
                <LinearGraphRange StartValue=info2.StartValue
                                  EndValue=info2.EndValue
                                  InnerStartExtent=info2.InnerStartExtent
                                  InnerEndExtent=info2.InnerEndExtent
                                  OuterStartExtent=info2.OuterStartExtent
                                  OuterEndExtent=info2.OuterEndExtent
                                  Brush="@info2.Brush"
                                  Outline="@info2.Outline">
                </LinearGraphRange>
            }
        </LinearGauge>
        <LinearGauge Height="120px" Width="100%"
                     Value="30"
                     MinimumValue="0"
                     MaximumValue="100"
                     Interval="5"
                     LabelInterval="5"
                     LabelExtent="0.15"
                     TransitionDuration="500"
                     ScaleInnerExtent="0.25"
                     ScaleOuterExtent="0.8"
                     ScaleStartExtent="0.05"
                     ScaleEndExtent="0.95"
                     IsNeedleDraggingEnabled="true"
                     NeedleShape="LinearGraphNeedleShape.Triangle"
                     NeedleBrush="#494949"
                     NeedleOutline="#494949"
                     NeedleStrokeThickness="1"
                     NeedleOuterExtent="0.9"
                     NeedleInnerExtent="0.35"
                     NeedleBreadth="10"
                     TickBrush="Gray"
                     TickStartExtent="0.25"
                     TickEndExtent="0.15"
                     TickStrokeThickness="1"
                     MinorTickBrush="transparent"
                     MinorTickStartExtent="0.25"
                     MinorTickEndExtent="0.2"
                     MinorTickStrokeThickness="1"
                     MinorTickCount="9"
                     BackingBrush="transparent"
                     BackingOutline="transparent"
                     ScaleStrokeThickness="0"
                     ScaleBrush="#E0DFDF"
                     ScaleOutline="#E0DFDF">
            @for (int i = 0; i < RangeInfo3.Count; i++)
            {
                GaugeRangeInfo info3 = RangeInfo3[i];
                <LinearGraphRange StartValue=info3.StartValue
                                  EndValue=info3.EndValue
                                  InnerStartExtent=info3.InnerStartExtent
                                  InnerEndExtent=info3.InnerEndExtent
                                  OuterStartExtent=info3.OuterStartExtent
                                  OuterEndExtent=info3.OuterEndExtent
                                  Brush="@info3.Brush"
                                  Outline="@info3.Outline">
                </LinearGraphRange>
            }
        </LinearGauge>
    </div>
</div>

@code {

    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo1;
    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo2;
    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo3;


    protected override void OnInitialized()
    {
        base.OnInitialized();       
        LinearGaugeModule.Register(InfragisticsBlazor);

        RangeInfo1 = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();
        RangeInfo2 = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();
        RangeInfo3 = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();

        string[] colors1 = "#2EFA2E,#45EC03,#10B401,#008000".Split(',');
        string[] colors2 = "#FDD682,#FDC957,#FDB417,#E29B03".Split(',');
        string[] colors3 = "#FA6363,#FD3939,#FF0000,#CF0000".Split(',');

        CreateGaugeRangeCollection(colors1, RangeInfo1);
        CreateGaugeRangeCollection(colors2, RangeInfo2);
        CreateGaugeRangeCollection(colors3, RangeInfo3);
    }

    private void CreateGaugeRangeCollection(string[] colors, System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> collection)
    {
        double rangeSpan = 100;
        double rangeValueInterval = rangeSpan / colors.Length;
        double rangeExtentInterval = 0.5 / colors.Length;

        for (int i = 0; i < colors.Length; i++)
        {
            string color = colors[i];

            GaugeRangeInfo info = new GaugeRangeInfo()
            {
                StartValue = rangeValueInterval * i,
                EndValue = rangeValueInterval * (i + 1),
                Brush = color,
                Outline = color,
                InnerStartExtent = 0.25,
                InnerEndExtent = 0.25,
                OuterStartExtent = 0.3 + (rangeExtentInterval * i),
                OuterEndExtent = 0.3 + (rangeExtentInterval * (i + 1))
            };

            collection.Add(info);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Sample OnInitializedAsync...");
        await Task.Delay(10);
    }
}
