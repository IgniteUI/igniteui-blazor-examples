@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options horizontal">
        <button @onclick="onAnimateToGauge1">Gauge Animation #1</button>
        <button @onclick="onAnimateToGauge2">Gauge Animation #2</button>
        <button @onclick="onAnimateToGauge3">Gauge Animation #3</button>
    </div>
    <div class="container vertical">
        <LinearGauge Height="80px" Width="100%"
                     TransitionDuration="1000"
                     MinimumValue=@MinimumValue
                     MaximumValue=@MaximumValue
                     Value=@Value
                     Interval=@Interval
                     LabelInterval=@LabelInterval
                     LabelExtent=@LabelExtent
                     IsNeedleDraggingEnabled=@IsNeedleDraggingEnabled
                     NeedleShape=@NeedleShape
                     NeedleBrush=@NeedleBrush
                     NeedleOutline=@NeedleOutline
                     NeedleStrokeThickness=@NeedleStrokeThickness
                     NeedleOuterExtent=@NeedleOuterExtent
                     NeedleInnerExtent=@NeedleInnerExtent
                     MinorTickCount=@MinorTickCount
                     MinorTickEndExtent=@MinorTickEndExtent
                     MinorTickStartExtent=@MinorTickStartExtent
                     MinorTickStrokeThickness=@MinorTickStrokeThickness
                     TickStartExtent=@TickStartExtent
                     TickEndExtent=@TickEndExtent
                     TickStrokeThickness=@TickStrokeThickness
                     ScaleStrokeThickness=@ScaleStrokeThickness
                     ScaleBrush=@ScaleBrush
                     ScaleOutline=@ScaleOutline
                     ScaleInnerExtent=@ScaleInnerExtent
                     ScaleOuterExtent=@ScaleOuterExtent
                     ScaleStartExtent=@ScaleStartExtent
                     ScaleEndExtent=@ScaleEndExtent
                     BackingBrush=@BackingBrush
                     BackingOutline=@BackingOutline
                     BackingStrokeThickness=@BackingStrokeThickness>
            @for (int i = 0; i < RangeInfo.Count; i++)
            {
                GaugeRangeInfo info = RangeInfo[i];
                <LinearGraphRange StartValue=info.StartValue
                                  EndValue=info.EndValue
                                  InnerStartExtent=info.InnerStartExtent
                                  InnerEndExtent=info.InnerEndExtent
                                  OuterStartExtent=info.OuterStartExtent
                                  OuterEndExtent=info.OuterEndExtent
                                  Brush="@info.Brush"
                                  Outline="@info.Outline">
                </LinearGraphRange>
            }
        </LinearGauge>
    </div>
</div>

@code {

    private double MinimumValue;
    private double MaximumValue;
    private double Value;
    private double Interval;

    private double LabelInterval;
    private double LabelExtent;

    private bool IsNeedleDraggingEnabled;
    private LinearGraphNeedleShape NeedleShape;
    private string NeedleBrush;
    private string NeedleOutline;
    private double NeedleStrokeThickness;
    private double NeedleOuterExtent;
    private double NeedleInnerExtent;

    private double MinorTickCount;
    private double MinorTickEndExtent;
    private double MinorTickStartExtent;
    private double MinorTickStrokeThickness;
    private double TickStartExtent;
    private double TickEndExtent;
    private double TickStrokeThickness;

    private double ScaleStrokeThickness;
    private string ScaleBrush;
    private string ScaleOutline;
    private double ScaleInnerExtent;
    private double ScaleOuterExtent;
    private double ScaleStartExtent;
    private double ScaleEndExtent;

    private string BackingBrush;
    private string BackingOutline;
    private double BackingStrokeThickness;

    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo;

    protected override void OnInitialized()
    {
        IgbLinearGaugeModule.Register(IgniteUIBlazor);

        this.MinimumValue = 0;
        this.MaximumValue = 100;
        this.Value = 50;
        this.Interval = 10;
        this.LabelInterval = 10;
        this.LabelExtent = 0.0;
        this.MinorTickEndExtent = 0.10;
        this.MinorTickStartExtent = 0.20;
        this.TickStartExtent = 0.25;
        this.TickEndExtent = 0.05;
        this.TickStrokeThickness = 2;
        this.NeedleShape = LinearGraphNeedleShape.Needle;
        this.NeedleBrush = "#79797A";
        this.NeedleOutline = "#79797A";
        this.ScaleStrokeThickness = 0;
        this.ScaleBrush = "#FFFFFF";
        this.ScaleOutline = "#D3D3D3";
        this.BackingBrush = "#FFFFFF";
        this.BackingOutline = "#D1D1D1";
        this.BackingStrokeThickness = 0;

        this.RangeInfo = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();

        this.onAnimateToGauge3();
    }

    private void onAnimateToGauge1()
    {
        // linear gauge requires settings for these properties:
        this.MinimumValue = 0;
        this.MaximumValue = 80;
        this.Value = 60;
        this.Interval = 20;

        // setting custom appearance of labels
        this.LabelInterval = 20;
        this.LabelExtent = 0.0;

        // setting custom appearance of needle
        this.IsNeedleDraggingEnabled = true;
        this.NeedleShape = LinearGraphNeedleShape.Trapezoid;
        this.NeedleBrush = "#79797a";
        this.NeedleOutline = "#ffffffff";
        this.NeedleStrokeThickness = 1;
        this.NeedleOuterExtent = 0.9;
        this.NeedleInnerExtent = 0.3;

        // setting custom appearance of major/minor ticks
        this.MinorTickCount = 5;
        this.MinorTickEndExtent = 0.10;
        this.MinorTickStartExtent = 0.20;
        this.MinorTickStrokeThickness = 1;
        this.TickStartExtent = 0.25;
        this.TickEndExtent = 0.05;
        this.TickStrokeThickness = 2;

        // setting extent of gauge scale
        this.ScaleStrokeThickness = 0;
        this.ScaleBrush = "#ffffff";
        this.ScaleOutline = "#dbdbdb";
        this.ScaleInnerExtent = 0.075;
        this.ScaleOuterExtent = 0.85;
        this.ScaleStartExtent = 0.05;
        this.ScaleEndExtent = 0.95;

        // setting appearance of backing fill and outline
        this.BackingBrush = "#ffffff";
        this.BackingOutline = "#d1d1d1";
        this.BackingStrokeThickness = 0;

        this.RangeInfo.Clear();

        List<string> colors = new List<string>() { "#A4BD29", "#F86232" };
        double[] startValues = { 0, 40 };
        double[] endValues = { 40, 80 };

        for (int i = 0; i < colors.Count; i++)
        {
            GaugeRangeInfo info = new GaugeRangeInfo()
            {
                StartValue = startValues[i],
                EndValue = endValues[i],
                Brush = colors[i],
                Outline = colors[i],
                InnerStartExtent = 0.075,
                InnerEndExtent = 0.075,
                OuterStartExtent = 0.65,
                OuterEndExtent = 0.65
            };

            this.RangeInfo.Add(info);
        }
    }

    private void onAnimateToGauge2()
    {
        // linear gauge requires settings for these properties:
        this.MinimumValue = 100;
        this.MaximumValue = 200;
        this.Value = 150;
        this.Interval = 20;

        // setting custom appearance of labels
        this.LabelInterval = 20;
        this.LabelExtent = 0.0;

        // setting custom appearance of needle
        this.IsNeedleDraggingEnabled = true;
        this.NeedleShape = LinearGraphNeedleShape.Triangle;
        this.NeedleBrush = "#79797a";
        this.NeedleOutline = "#ffffffff";
        this.NeedleStrokeThickness = 1;
        this.NeedleOuterExtent = 0.9;
        this.NeedleInnerExtent = 0.3;

        // setting custom appearance of major/minor ticks
        this.MinorTickCount = 4;
        this.MinorTickEndExtent = 0.10;
        this.MinorTickStartExtent = 0.20;
        this.MinorTickStrokeThickness = 1;
        this.TickStartExtent = 0.25;
        this.TickEndExtent = 0.05;
        this.TickStrokeThickness = 2;

        // setting extent of gauge scale
        this.ScaleStrokeThickness = 0;
        this.ScaleBrush = "#ffffff";
        this.ScaleOutline = "#dbdbdb";
        this.ScaleInnerExtent = 0.075;
        this.ScaleOuterExtent = 0.85;
        this.ScaleStartExtent = 0.05;
        this.ScaleEndExtent = 0.95;

        // setting appearance of backing fill and outline
        this.BackingBrush = "#ffffff";
        this.BackingOutline = "#d1d1d1";
        this.BackingStrokeThickness = 0;

        this.RangeInfo.Clear();

        List<string> colors = new List<string>() { "#0078C8","#0099FF","#21A7FF","#45B9FF" };
        double[] startValues = { 100, 125, 150, 175 };
        double[] endValues = { 125, 150, 175, 200 };

        for (int i = 0; i < colors.Count; i++)
        {
            GaugeRangeInfo info = new GaugeRangeInfo()
            {
                StartValue = startValues[i],
                EndValue = endValues[i],
                Brush = colors[i],
                Outline = colors[i],
                InnerStartExtent = 0.075,
                InnerEndExtent = 0.075,
                OuterStartExtent = 0.65,
                OuterEndExtent = 0.65
            };

            this.RangeInfo.Add(info);
        }
    }

    private void onAnimateToGauge3()
    {
        // linear gauge requires settings for these properties:
        this.MinimumValue = 0;
        this.MaximumValue = 100;
        this.Value = 50;
        this.Interval = 10;

        // setting custom appearance of labels
        this.LabelInterval = 10;
        this.LabelExtent = 0.0;

        // setting custom appearance of needle
        this.IsNeedleDraggingEnabled = true;
        this.NeedleShape = LinearGraphNeedleShape.Needle;
        this.NeedleBrush = "#79797a";
        this.NeedleOutline = "#ffffffff";
        this.NeedleStrokeThickness = 1;
        this.NeedleOuterExtent = 0.9;
        this.NeedleInnerExtent = 0.3;

        // setting custom appearance of major/minor ticks
        this.MinorTickCount = 5;
        this.MinorTickEndExtent = 0.10;
        this.MinorTickStartExtent = 0.20;
        this.MinorTickStrokeThickness = 1;
        this.TickStartExtent = 0.25;
        this.TickEndExtent = 0.05;
        this.TickStrokeThickness = 2;

        // setting extent of gauge scale
        this.ScaleStrokeThickness = 0;
        this.ScaleBrush = "#ffffff";
        this.ScaleOutline = "#dbdbdb";
        this.ScaleInnerExtent = 0.075;
        this.ScaleOuterExtent = 0.85;
        this.ScaleStartExtent = 0.05;
        this.ScaleEndExtent = 0.95;

        // setting appearance of backing fill and outline
        this.BackingBrush = "#ffffff";
        this.BackingOutline = "#d1d1d1";
        this.BackingStrokeThickness = 0;

        this.RangeInfo.Clear();

        List<string> colors = new List<string>() { "#9FB328", "#438C47", "#3F51B5" };
        double[] startValues = { 0, 30, 70 };
        double[] endValues = { 30, 70, 100 };

        for (int i = 0; i < colors.Count; i++)
        {
            GaugeRangeInfo info = new GaugeRangeInfo()
            {
                StartValue = startValues[i],
                EndValue = endValues[i],
                Brush = colors[i],
                Outline = colors[i],
                InnerStartExtent = 0.075,
                InnerEndExtent = 0.075,
                OuterStartExtent = 0.95,
                OuterEndExtent = 0.95
            };

            this.RangeInfo.Add(info);
        }
    }
}