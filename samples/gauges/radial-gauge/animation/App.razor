@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options horizontal">
        <button @onclick="onAnimateToGauge1">Gauge Animation #1</button>
        <button @onclick="onAnimateToGauge2">Gauge Animation #2</button>
        <button @onclick="onAnimateToGauge3">Gauge Animation #3</button>
        <button @onclick="onAnimateToGauge4">Gauge Animation #4</button>
    </div>
    <div class="container vertical">
        <IgbRadialGauge @ref="Gauge"
                     Height="100%" Width="100%"
                     TransitionDuration="@TransitionDuration"
                     Value=@Value
                     Interval=@Interval
                     MinimumValue=@MinimumValue
                     MaximumValue=@MaximumValue
                     Font=@Font
                     LabelInterval=@LabelInterval
                     LabelExtent=@LabelExtent
                     MinorTickCount=@MinorTickCount
                     MinorTickEndExtent=@MinorTickEndExtent
                     MinorTickStartExtent=@MinorTickStartExtent
                     MinorTickStrokeThickness=@MinorTickStrokeThickness
                     MinorTickBrush=@MinorTickBrush
                     TickStartExtent=@TickStartExtent
                     TickEndExtent=@TickEndExtent
                     TickStrokeThickness=@TickStrokeThickness
                     TickBrush="@TickBrush"
                     NeedleShape=@NeedleShape
                     NeedleEndExtent=@NeedleEndExtent
                     NeedleEndWidthRatio=@NeedleEndWidthRatio
                     NeedleStartWidthRatio=@NeedleStartWidthRatio
                     NeedlePivotShape=@NeedlePivotShape
                     NeedlePivotWidthRatio=@NeedlePivotWidthRatio
                     NeedleBaseFeatureWidthRatio=@NeedleBaseFeatureWidthRatio
                     NeedleBrush=@NeedleBrush
                     NeedleOutline=@NeedleOutline
                     NeedlePivotBrush=@NeedlePivotBrush
                     NeedlePivotOutline=@NeedlePivotOutline
                     NeedlePointFeatureExtent=@NeedlePointFeatureExtent
                     IsNeedleDraggingEnabled=@IsNeedleDraggingEnabled
                     BackingBrush=@BackingBrush
                     BackingOutline=@BackingOutline
                     BackingStrokeThickness=@BackingStrokeThickness
                     BackingShape=@BackingShape
                     BackingOversweep=@BackingOversweep
                     BackingCornerRadius=@BackingCornerRadius
                     BackingOuterExtent=@BackingOuterExtent
                     ScaleStartAngle=@ScaleStartAngle
                     ScaleEndAngle=@ScaleEndAngle
                     ScaleEndExtent=@ScaleEndExtent
                     ScaleStartExtent=@ScaleStartExtent
                     ScaleOversweepShape=@ScaleOversweepShape
                     ScaleBrush=@ScaleBrush
                     ScaleSweepDirection=@ScaleSweepDirection>
            @for (int i = 0; i < RangeInfo.Count; i++)
            {
                GaugeRangeInfo info = RangeInfo[i];
                <IgbRadialGaugeRange StartValue=@info.StartValue
                                  EndValue=@info.EndValue
                                  InnerStartExtent=@info.InnerStartExtent
                                  InnerEndExtent=@info.InnerEndExtent
                                  OuterStartExtent=@info.OuterStartExtent
                                  OuterEndExtent=@info.OuterEndExtent
                                  Brush="@info.Brush"
                                  Outline="@info.Outline">
                </IgbRadialGaugeRange>
            }
        </IgbRadialGauge>
    </div>
</div>

@code {

    private IgbRadialGauge Gauge;
    private double MinimumValue;
    private double MaximumValue;
    private double Value;
    private double Interval;
    private int TransitionDuration;

    private double LabelExtent;
    private double LabelInterval;
    private string Font;

    private double ScaleStartAngle;
    private double ScaleEndAngle;
    private string ScaleBrush;
    private SweepDirection ScaleSweepDirection;
    private double ScaleEndExtent;
    private double ScaleStartExtent;
    private RadialGaugeScaleOversweepShape ScaleOversweepShape;

    private string BackingOutline;
    private string BackingBrush;
    private RadialGaugeBackingShape BackingShape;
    private double BackingStrokeThickness;
    private double BackingOversweep;
    private double BackingCornerRadius;
    private double BackingOuterExtent;

    private bool IsNeedleDraggingEnabled;
    private double NeedlePointFeatureExtent;
    private double NeedleEndExtent;
    private RadialGaugeNeedleShape NeedleShape;
    private RadialGaugePivotShape NeedlePivotShape;
    private double NeedlePivotWidthRatio;
    private string NeedleBrush;
    private string NeedleOutline;
    private double NeedleStartWidthRatio;
    private double NeedleEndWidthRatio;
    private double NeedleBaseFeatureWidthRatio;
    private string NeedlePivotBrush;
    private string NeedlePivotOutline;

    private string TickBrush;
    private double TickEndExtent;
    private double TickStartExtent;
    private double TickStrokeThickness;
    private string MinorTickBrush;
    private double MinorTickEndExtent;
    private double MinorTickStartExtent;
    private double MinorTickCount;
    private double MinorTickStrokeThickness;    

    private System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo> RangeInfo;

    protected override void OnInitialized()
    {
        IgbRadialGaugeModule.Register(IgniteUIBlazor);

        this.MinimumValue = 0;
        this.MaximumValue = 50;
        this.Value = 25;
        this.Interval = 5;

        this.Font = null;
        this.LabelInterval = 5;
        this.LabelExtent = 0.71;

        this.ScaleStartAngle = 120;
        this.ScaleEndAngle = 60;
        this.ScaleEndExtent = 0;
        this.ScaleStartExtent = 0;
        this.ScaleBrush = "#D6D6D6";
        this.ScaleSweepDirection = SweepDirection.Clockwise;
        this.ScaleOversweepShape = RadialGaugeScaleOversweepShape.Auto;

        this.BackingOutline = "#D6D6D6";
        this.BackingBrush = "#FCFCFC";
        this.BackingShape = RadialGaugeBackingShape.Circular;
        this.BackingStrokeThickness = 5;
        this.BackingOversweep = 0;
        this.BackingCornerRadius = 0;
        this.BackingOuterExtent = 0;

        this.IsNeedleDraggingEnabled = true;
        this.NeedleEndExtent = 0.8;
        this.NeedleShape = RadialGaugeNeedleShape.Triangle;
        this.NeedlePivotShape = RadialGaugePivotShape.CircleOverlay;
        this.NeedlePivotWidthRatio = 0.15;
        this.NeedleBrush = "#79797A";
        this.NeedleOutline = "#79797A";
        this.NeedleStartWidthRatio = 0.05;
        this.NeedleEndWidthRatio = 0.03;
        this.NeedleBaseFeatureWidthRatio = 0.15;
        this.NeedlePivotBrush = "#79797A";
        this.NeedlePivotOutline = "#79797A";
        this.NeedlePointFeatureExtent = 0;

        this.MinorTickCount = 4;
        this.MinorTickEndExtent = 0.625;
        this.MinorTickStartExtent = 0.6;
        this.MinorTickStrokeThickness = 1;
        this.MinorTickBrush = "#79797A";
        this.TickStartExtent = 0.6;
        this.TickEndExtent = 0.65;
        this.TickStrokeThickness = 2;

        RangeInfo = new System.Collections.ObjectModel.ObservableCollection<GaugeRangeInfo>();
        //RangeInfo.Add(new GaugeRangeInfo()
        //{
        //    Brush = "red",
        //    Outline = "red",
        //    StartValue = 0,
        //    EndValue = 100,
        //    InnerStartExtent = 0.3,
        //    InnerEndExtent = 0.3,
        //    OuterStartExtent = 0.9,
        //    OuterEndExtent = 0.9
        //});
    }

    public void onAnimateToGauge1()
    {                
        this.TransitionDuration = 1000;
        this.MinimumValue = 0;
        this.MaximumValue = 10;
        this.Value = 7.5;
        
        // Scale Settings
        this.ScaleStartAngle = 180;
        this.ScaleEndAngle = 270;
        this.ScaleBrush = "transparent";
        this.ScaleSweepDirection = SweepDirection.Clockwise;

        // Backing Settings
        this.BackingOutline = "white";
        this.BackingBrush = "white";
        this.BackingShape = RadialGaugeBackingShape.Fitted;

        // Needle Settings
        this.NeedleEndExtent = 0.8;
        this.NeedleShape = RadialGaugeNeedleShape.Triangle;
        this.NeedlePivotShape = RadialGaugePivotShape.Circle;
        this.NeedlePivotWidthRatio = 0.1;
        this.NeedleBrush = "#79797a";
        this.NeedleOutline = "#79797a";

        // TickMark Settings
        this.TickBrush = "transparent";
        this.MinorTickBrush = "transparent";

        // Label Settings
        this.LabelInterval = 5;
        this.LabelExtent = 0.915;
        this.Font = "15px Verdana,Arial";

        // setting custom gauge ranges
        GaugeRangeInfo range1 = new GaugeRangeInfo()
        {
            Brush = "#A4BD29",
            Outline = "#A4BD29",
            StartValue = 0,
            EndValue = 5,
            InnerStartExtent = 0.3,
            InnerEndExtent = 0.3,
            OuterStartExtent = 0.9,
            OuterEndExtent = 0.9
        };

        GaugeRangeInfo range2 = new GaugeRangeInfo()
        {
            Brush = "#F86232",
            Outline = "#F86232",
            StartValue = 5,
            EndValue = 10,
            InnerStartExtent = 0.3,
            InnerEndExtent = 0.3,
            OuterStartExtent = 0.9,
            OuterEndExtent = 0.9
        };

        RangeInfo.Clear();

        RangeInfo.Add(range1);
        RangeInfo.Add(range2);
    }

    public void onAnimateToGauge2()
    {
        this.TransitionDuration = 1000;
        this.MinimumValue = 100;
        this.MaximumValue = 200;
        this.Value = 125;

        // Scale Settings
        this.ScaleStartAngle = 180;
        this.ScaleEndAngle = 0;
        this.ScaleBrush = "transparent";
        this.ScaleSweepDirection = SweepDirection.Clockwise;

        // Backing Settings
        this.BackingOutline = "white";
        this.BackingBrush = "white";
        this.BackingShape = RadialGaugeBackingShape.Fitted;

        // Needle Settings
        this.NeedleEndExtent = 0.8;
        this.NeedleShape = RadialGaugeNeedleShape.Triangle;
        this.NeedlePivotShape = RadialGaugePivotShape.Circle;
        this.NeedlePivotWidthRatio = 0.1;
        this.NeedleBrush = "#79797a";
        this.NeedleOutline = "#79797a";

        // TickMark Settings
        this.TickBrush = "transparent";
        this.MinorTickBrush = "transparent";

        // Label Settings
        this.LabelInterval = 50;
        this.LabelExtent = 0.935;
        this.Font = "13px Verdana,Arial";

        GaugeRangeInfo range1 = new GaugeRangeInfo()
        {
            Brush = "#32F845",
            Outline = "#32F845",
            StartValue = 100,
            EndValue = 150,
            InnerStartExtent = 0.3,
            InnerEndExtent = 0.3,
            OuterStartExtent = 0.9,
            OuterEndExtent = 0.9
        };

        GaugeRangeInfo range2 = new GaugeRangeInfo()
        {
            Brush = "#BF32F8",
            Outline = "#BF32F8",
            StartValue = 150,
            EndValue = 200,
            InnerStartExtent = 0.3,
            InnerEndExtent = 0.3,
            OuterStartExtent = 0.9,
            OuterEndExtent = 0.9
        };

        RangeInfo.Clear();
        RangeInfo.Add(range1);
        RangeInfo.Add(range2);
    }

    public void onAnimateToGauge3()
    {
        this.TransitionDuration = 1000;
        this.MinimumValue = 0;
        this.MaximumValue = 80;
        this.Value = 10;
        this.Interval = 10;

        // Label Settings
        this.LabelExtent = 0.6;
        this.LabelInterval = 10;
        this.Font = "15px Verdana,Arial";

        // Scale Settings
        this.ScaleStartAngle = 135;
        this.ScaleEndAngle = 45;
        this.ScaleBrush = "#0b8fed";
        this.ScaleOversweepShape = RadialGaugeScaleOversweepShape.Auto;
        this.ScaleSweepDirection = SweepDirection.Clockwise;
        this.ScaleEndExtent = 0.825;
        this.ScaleStartExtent = 0.775;

        this.MinorTickStartExtent = 0.7;
        this.MinorTickEndExtent = 0.75;
        this.TickStartExtent = 0.675;
        this.TickEndExtent = 0.75;

        // Backing Settings
        this.BackingShape = RadialGaugeBackingShape.Fitted;
        this.BackingBrush = "#fcfcfc";
        this.BackingOutline = "#d6d6d6";
        this.BackingOversweep = 5;
        this.BackingCornerRadius = 10;
        this.BackingOuterExtent = 0.9;

        // Needle Settings
        this.NeedleShape = RadialGaugeNeedleShape.NeedleWithBulb;
        this.NeedlePivotShape = RadialGaugePivotShape.CircleOverlay;
        this.NeedleEndExtent = 0.5;
        this.NeedlePointFeatureExtent = 0.3;
        this.NeedlePivotWidthRatio = 0.2;
        this.NeedleBrush = "#9f9fa0";
        this.NeedleOutline = "#9f9fa0";
        this.NeedlePivotBrush = "#9f9fa0";
        this.NeedlePivotOutline = "#9f9fa0";

        // TickMark Settings
        this.TickBrush = "rgba(51, 51, 51, 1)";
        this.MinorTickBrush = "rgba(73, 73, 73, 1)";
        this.MinorTickCount = 6;

        RangeInfo.Clear();
    }

    public void onAnimateToGauge4()
    {
        this.TransitionDuration = 1000;
        this.MinimumValue = 0;
        this.MaximumValue = 50;
        this.Value = 25;
        this.Interval = 5;

        // setting appearance of labels
        this.LabelInterval = 5;
        this.LabelExtent = 0.71;
        this.Font = "15px Verdana,Arial";

        // setting custom needle
        this.IsNeedleDraggingEnabled = true;
        this.NeedleEndExtent = 0.5;
        this.NeedleShape = RadialGaugeNeedleShape.Triangle;
        this.NeedleEndWidthRatio = 0.03;
        this.NeedleStartWidthRatio = 0.05;
        this.NeedlePivotShape = RadialGaugePivotShape.CircleOverlay;
        this.NeedlePivotWidthRatio = 0.15;
        this.NeedleBaseFeatureWidthRatio = 0.15;
        this.NeedleBrush = "#79797a";
        this.NeedleOutline = "#79797a";
        this.NeedlePivotBrush = "#79797a";
        this.NeedlePivotOutline = "#79797a";

        // setting appearance of major/minor ticks
        this.MinorTickCount = 4;
        this.MinorTickEndExtent = 0.625;
        this.MinorTickStartExtent = 0.6;
        this.MinorTickStrokeThickness = 1;
        this.MinorTickBrush = "#79797a";
        this.TickStartExtent = 0.6;
        this.TickEndExtent = 0.65;
        this.TickStrokeThickness = 2;
        this.TickBrush = "#79797a";

        // setting extent of gauge scale
        this.ScaleStartAngle = 120;
        this.ScaleEndAngle = 60;
        this.ScaleBrush = "#d6d6d6";
        this.ScaleOversweepShape = RadialGaugeScaleOversweepShape.Fitted;
        this.ScaleSweepDirection = SweepDirection.Clockwise;
        this.ScaleEndExtent = 0.57;
        this.ScaleStartExtent = 0.5;

        // setting appearance of backing dial
        this.BackingBrush = "#fcfcfc";
        this.BackingOutline = "#d6d6d6";
        this.BackingStrokeThickness = 5;
        this.BackingShape = RadialGaugeBackingShape.Circular;

        GaugeRangeInfo range1 = new GaugeRangeInfo()
        {
            Brush = "#F86232",
            Outline = "F86232",
            StartValue = 5,
            EndValue = 15,
            InnerStartExtent = 0.5,
            InnerEndExtent = 0.5,
            OuterStartExtent = 0.57,
            OuterEndExtent = 0.57
        };

        GaugeRangeInfo range2 = new GaugeRangeInfo()
        {
            Brush = "#DC3F76",
            Outline = "DC3F76",
            StartValue = 15,
            EndValue = 35,
            InnerStartExtent = 0.5,
            InnerEndExtent = 0.5,
            OuterStartExtent = 0.57,
            OuterEndExtent = 0.57
        };

        GaugeRangeInfo range3 = new GaugeRangeInfo()
        {
            Brush = "#7446B9",
            Outline = "7446B9",
            StartValue = 35,
            EndValue = 45,
            InnerStartExtent = 0.5,
            InnerEndExtent = 0.5,
            OuterStartExtent = 0.57,
            OuterEndExtent = 0.57
        };

        RangeInfo.Clear();
        RangeInfo.Add(range1);
        RangeInfo.Add(range2);
        RangeInfo.Add(range3);
    }

}