@using System.Collections.ObjectModel
@using Infragistics.Blazor.Controls
@inject IInfragisticsBlazor InfragisticsBlazor

<div class="igContainer">
    <div class="igOptions">
        <button @onclick="onAnimateToGauge1">Gauge Animation #1</button>
        <button @onclick="onAnimateToGauge2">Gauge Animation #2</button>
        <button @onclick="onAnimateToGauge3">Gauge Animation #3</button>
    </div>
    <div class="igComponent">
        <BulletGraph Height="80px" Width="100%"
                     TransitionDuration="1000"
                     MinimumValue=@MinimumValue
                     MaximumValue=@MaximumValue
                     Value=@Value
                     Interval=@Interval
                     LabelInterval=@LabelInterval
                     LabelExtent=@LabelExtent
                     ValueBrush=@ValueBrush
                     ValueInnerExtent=@ValueInnerExtent
                     ValueOuterExtent=@ValueOuterExtent
                     TargetValueBrush=@TargetValueBrush
                     TargetValueBreadth=@TargetValueBreadth
                     TargetValue=@TargetValue
                     MinorTickCount=@MinorTickCount
                     MinorTickEndExtent=@MinorTickEndExtent
                     MinorTickStartExtent=@MinorTickStartExtent
                     TickStartExtent=@TickStartExtent
                     TickEndExtent=@TickEndExtent
                     TickStrokeThickness=@TickStrokeThickness
                     ScaleBackgroundThickness=@ScaleBackgroundThickness
                     ScaleBackgroundBrush=@ScaleBackgroundBrush
                     ScaleBackgroundOutline=@ScaleBackgroundOutline
                     ScaleStartExtent=@ScaleStartExtent
                     ScaleEndExtent=@ScaleEndExtent
                     BackingBrush=@BackingBrush
                     BackingOutline=@BackingOutline
                     BackingStrokeThickness=@BackingStrokeThickness>
            @for (int i = 0; i < RangeInfo.Count; i++)
            {
                GaugeRangeInfo info = RangeInfo[i];
                <LinearGraphRange Name=info.Name
                                  StartValue=info.StartValue
                                  EndValue=info.EndValue
                                  InnerStartExtent=info.InnerStartExtent
                                  InnerEndExtent=info.InnerEndExtent
                                  OuterStartExtent=info.OuterStartExtent
                                  OuterEndExtent=info.OuterEndExtent
                                  Brush="@info.Brush"
                                  Outline="@info.Outline">
                </LinearGraphRange>
            }
        </BulletGraph>
    </div>
</div>

@code {

    private double MinimumValue;
    private double MaximumValue;
    private double Value;
    private double Interval;

    private double LabelInterval;
    private double LabelExtent;

    private double ValueInnerExtent;
    private double ValueOuterExtent;
    private string ValueBrush;

    private string TargetValueBrush;
    private double TargetValueBreadth;
    private double TargetValue;

    private double MinorTickCount;
    private double MinorTickEndExtent;
    private double MinorTickStartExtent;
    private double TickStartExtent;
    private double TickEndExtent;
    private double TickStrokeThickness;

    private double ScaleBackgroundThickness;
    private string ScaleBackgroundBrush;
    private string ScaleBackgroundOutline;
    private double ScaleStartExtent;
    private double ScaleEndExtent;

    private string BackingBrush;
    private string BackingOutline;
    private double BackingStrokeThickness;

    private ObservableCollection<GaugeRangeInfo> RangeInfo;

    protected override void OnInitialized()
    {
        BulletGraphModule.Register(InfragisticsBlazor);

        this.MinimumValue = 0;
        this.MaximumValue = 120;
        this.ValueBrush = "#4286F4";
        this.Value = 70;
        this.TargetValueBrush = "#4286F4";
        this.TargetValue = 90;
        this.TargetValueBreadth = 10;
        this.Interval = 10;
        this.LabelInterval = 10;
        this.LabelExtent = 0.02;
        this.ScaleBackgroundThickness = 0;
        this.ScaleBackgroundBrush = "#DBDBDB";
        this.ScaleBackgroundOutline = "Gray";

        this.RangeInfo = new ObservableCollection<GaugeRangeInfo>();

        this.onAnimateToGauge3();
    }

    private void onAnimateToGauge1()
    {
        this.MinimumValue = 0;
        this.MaximumValue = 80;
        this.Value = 70;
        this.Interval = 20;

        // setting appearance of labels
        this.LabelInterval = 20;
        this.LabelExtent = 0.02;

        // setting custom appearance of performance bar
        this.ValueInnerExtent = 0.5;
        this.ValueOuterExtent = 0.7;
        this.ValueBrush = "#000000";

        // setting custom appearance of target bar
        this.TargetValueBrush = "#000000";
        this.TargetValueBreadth = 10;
        this.TargetValue = 60;

        // setting appearance of major/minor ticks
        this.MinorTickCount = 5;
        this.MinorTickEndExtent = 0.10;
        this.MinorTickStartExtent = 0.20;
        this.TickStartExtent = 0.20;
        this.TickEndExtent = 0.05;
        this.TickStrokeThickness = 2;

        // setting extent of gauge scale
        this.ScaleBackgroundThickness = 0.5;
        this.ScaleBackgroundBrush = "#dbdbdb";
        this.ScaleBackgroundOutline = "gray";
        this.ScaleStartExtent = 0.05;
        this.ScaleEndExtent = 0.95;
        this.ScaleBackgroundThickness = 0;

        // setting appearance of backing fill and outline
        this.BackingBrush = "#f7f7f7";
        this.BackingOutline = "#d1d1d1";
        this.BackingStrokeThickness = 0;

        this.RangeInfo.Clear();

        List<string> colors = new List<string>() { "#A4BD29", "#F86232" };

        for (int i = 0; i < colors.Count; i++)
        {
            GaugeRangeInfo info = new GaugeRangeInfo()
            {
                Name = "range " + i.ToString(),
                StartValue = i * 40,
                EndValue = (i * 40) + 40,
                Brush = colors[i],
                Outline = colors[i],
                InnerStartExtent = 0.2,
                InnerEndExtent = 0.2,
                OuterStartExtent = 0.95,
                OuterEndExtent = 0.95
            };

            this.RangeInfo.Add(info);
        }
    }

    private void onAnimateToGauge2()
    {
        this.MinimumValue = 100;
        this.MaximumValue = 200;
        this.Value = 120;
        this.Interval = 10;

        // setting appearance of labels
        this.LabelInterval = 10;
        this.LabelExtent = 0.02;

        // setting custom appearance of performance bar
        this.ValueInnerExtent = 0.5;
        this.ValueOuterExtent = 0.7;
        this.ValueBrush = "#000000";

        // setting custom appearance of target bar
        this.TargetValueBrush = "#000000";
        this.TargetValueBreadth = 10;
        this.TargetValue = 180;

        // setting appearance of major/minor ticks
        this.MinorTickCount = 5;
        this.MinorTickEndExtent = 0.10;
        this.MinorTickStartExtent = 0.20;
        this.TickStartExtent = 0.20;
        this.TickEndExtent = 0.05;
        this.TickStrokeThickness = 2;

        // setting extent of gauge scale
        this.ScaleBackgroundThickness = 0.5;
        this.ScaleBackgroundBrush = "#dbdbdb";
        this.ScaleBackgroundOutline = "gray";
        this.ScaleStartExtent = 0.05;
        this.ScaleEndExtent = 0.95;
        this.ScaleBackgroundThickness = 0;

        // setting appearance of backing fill and outline
        this.BackingBrush = "#f7f7f7";
        this.BackingOutline = "#d1d1d1";
        this.BackingStrokeThickness = 0;

        this.RangeInfo.Clear();

        List<string> colors = new List<string>() { "#0078C8", "#0099FF", "#21A7FF", "#4FB9FF" };
        double[] startValues = { 100, 125, 150, 175 };
        double[] endValues = { 125, 150, 175, 200 };

        for (int i = 0; i < colors.Count; i++)
        {
            GaugeRangeInfo info = new GaugeRangeInfo()
            {
                Name = "range " + i.ToString(),
                StartValue = startValues[i],
                EndValue = endValues[i],
                Brush = colors[i],
                Outline = colors[i],
                InnerStartExtent = 0.2,
                InnerEndExtent = 0.2,
                OuterStartExtent = 0.95,
                OuterEndExtent = 0.95
            };

            this.RangeInfo.Add(info);
        }
    }

    private void onAnimateToGauge3()
    {
        this.MinimumValue = 0;
        this.MaximumValue = 120;
        this.Value = 70;
        this.Interval = 10;

        // setting appearance of labels
        this.LabelInterval = 10;
        this.LabelExtent = 0.02;

        // setting custom appearance of performance bar
        this.ValueInnerExtent = 0.5;
        this.ValueOuterExtent = 0.7;
        this.ValueBrush = "#000000";

        // setting custom appearance of target bar
        this.TargetValueBrush = "#000000";
        this.TargetValueBreadth = 10;
        this.TargetValue = 90;

        // setting appearance of major/minor ticks
        this.MinorTickCount = 5;
        this.MinorTickEndExtent = 0.10;
        this.MinorTickStartExtent = 0.20;
        this.TickStartExtent = 0.20;
        this.TickEndExtent = 0.05;
        this.TickStrokeThickness = 2;

        // setting extent of gauge scale
        this.ScaleBackgroundThickness = 0.5;
        this.ScaleBackgroundBrush = "#dbdbdb";
        this.ScaleBackgroundOutline = "gray";
        this.ScaleStartExtent = 0.05;
        this.ScaleEndExtent = 0.95;
        this.ScaleBackgroundThickness = 0;

        // setting appearance of backing fill and outline
        this.BackingBrush = "#f7f7f7";
        this.BackingOutline = "#d1d1d1";
        this.BackingStrokeThickness = 0;

        this.RangeInfo.Clear();

        List<string> colors = new List<string>() { "#FF9800", "#F96232", "#C62828" };

        for (int i = 0; i < colors.Count; i++)
        {
            GaugeRangeInfo info = new GaugeRangeInfo()
            {
                Name = "range " + i.ToString(),
                StartValue = i * 40,
                EndValue = (i * 40) + 40,
                Brush = colors[i],
                Outline = colors[i],
                InnerStartExtent = 0.2,
                InnerEndExtent = 0.2,
                OuterStartExtent = 0.95,
                OuterEndExtent = 0.95
            };

            this.RangeInfo.Add(info);
        }
    }
}