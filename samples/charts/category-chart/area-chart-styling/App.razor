@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Renewable Electricity Generated</span>
        <div class="igLegend">
            <Legend @ref="LegendRef" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="igComponent">
        @if (DataSource != null)
        {
            // note MarkerTypes property is set in code-behind
            <CategoryChart @ref="ChartRef" Height="100%" Width="100%"                           
                           DataSource="DataSource"
                           ChartType="CategoryChartType.Area"                 
                           Legend="LegendRef"
                           MarkerOutlines="#8ce7d9, #ee5879, #735656"   
                           MarkerBrushes="white" 
                           Brushes="#8ce7d9, #ee5879, #735656"
                           Outlines="#8ce7d9, #ee5879, #735656"
                           YAxisTitle="TWh"
                           YAxisTitleLeftMargin="10"
                           YAxisLabelLeftMargin="0"
                           ToolTipType="ToolTipType.Category"
                           Thickness="2"
						   IsHorizontalZoomEnabled="false" 
                           IsVerticalZoomEnabled="false">                           
            </CategoryChart>
        }
    </div>
</div>

@code {

    private List<EnergyRenewableInfo> DataSource = new EnergyRenewableData();

    private CategoryChart ChartRef;

    private Legend _Legend;
    private Legend LegendRef
    {
        get { return _Legend; }
        set { _Legend = value; StateHasChanged(); }
    }

    protected override void OnInitialized()
    {
        CategoryChartModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (this.ChartRef != null && firstRender)
        {
            this.ChartRef.MarkerTypes.Clear();
            this.ChartRef.MarkerTypes.Add(MarkerType.Triangle);
        }
    }

}