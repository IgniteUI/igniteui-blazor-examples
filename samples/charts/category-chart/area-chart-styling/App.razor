@using IgniteUI.Blazor.Controls

<div class="container vertical">
    <div class="legend-title">
        Renewable Electricity Generated
    </div>
    <div class="legend">
        <IgbLegend
        Orientation="LegendOrientation.Horizontal"
        Name="Legend"
        @ref="legend">
        </IgbLegend>

    </div>

    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Area"
        YAxisLabelLeftMargin="0"
        YAxisTitleLeftMargin="10"
        YAxisTitle="TWh"
        DataSource="CountryRenewableElectricity"
        IncludedProperties="@(new string[] { "Year", "Europe", "China", "America" })"
        Brushes="#8ce7d9 #ee5879 #735656"
        Outlines="#8ce7d9 #ee5879 #735656"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        Thickness="2"
        MarkerBrushes="white"
        MarkerOutlines="#8ce7d9 #ee5879 #735656"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        ToolTipType="ToolTipType.Category"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var legend = this.legend;
        var chart = this.chart;

        this.BindElements = () => {
            chart.Legend = this.legend;
        };
        this.BindElements();

    }

    private IgbLegend legend;
    private IgbCategoryChart chart;

    private CountryRenewableElectricity _countryRenewableElectricity = null;
    public CountryRenewableElectricity CountryRenewableElectricity
    {
        get
        {
            if (_countryRenewableElectricity == null)
            {
                _countryRenewableElectricity = new CountryRenewableElectricity();
            }
            return _countryRenewableElectricity;
        }
    }

}