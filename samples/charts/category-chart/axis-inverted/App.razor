@using IgniteUI.Blazor.Controls

@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
	    <div class="options vertical">
        <IgbPropertyEditorPanel
        
        DescriptionType="CategoryChart"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="propertyEditorPanel1"
        @ref="propertyEditorPanel1">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="XAxisInverted"
            Label="X Axis - Inverted"
            ShouldOverrideDefaultEditor="true"
            PrimitiveValue="true"
            Name="XAxisInvertedEditor"
            @ref="xAxisInvertedEditor">
            </IgbPropertyEditorPropertyDescription>
            <IgbPropertyEditorPropertyDescription
            PropertyPath="YAxisInverted"
            Label="Y Axis - Inverted"
            ShouldOverrideDefaultEditor="true"
            PrimitiveValue="true"
            Name="YAxisInvertedEditor"
            @ref="yAxisInvertedEditor">
            </IgbPropertyEditorPropertyDescription>
        </IgbPropertyEditorPanel>
    </div>
	
	    <div class="legend-title">
        Renewable Electricity Generated
    </div>
    
	
    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Line"
        YAxisLabelLeftMargin="0"
        YAxisTitleLeftMargin="10"
        YAxisTitleRightMargin="5"
        YAxisTitle="TWh"
        XAxisInverted="true"
        YAxisInverted="true"
        DataSource="CountryRenewableElectricity"
        IncludedProperties="@(new string[] { "Year", "Europe" })"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
    }

	private Action BindElements { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		var propertyEditorPanel1 = this.propertyEditorPanel1;
		var xAxisInvertedEditor = this.xAxisInvertedEditor;
		var yAxisInvertedEditor = this.yAxisInvertedEditor;
		var chart = this.chart;

        this.BindElements = () => {
            propertyEditorPanel1.Target = this.chart;
        };
        this.BindElements();
	}

	private IgbPropertyEditorPanel propertyEditorPanel1;
	private IgbPropertyEditorPropertyDescription xAxisInvertedEditor;
	private IgbPropertyEditorPropertyDescription yAxisInvertedEditor;
	private IgbCategoryChart chart;


    private CountryRenewableElectricity _countryRenewableElectricity = null;
    public CountryRenewableElectricity CountryRenewableElectricity
    {
        get
        {
            if (_countryRenewableElectricity == null)
            {
                _countryRenewableElectricity = new CountryRenewableElectricity(); 
            }
            return _countryRenewableElectricity;
        }
    }
    
}