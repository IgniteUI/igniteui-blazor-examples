@* this namespace is required for Infragistics controls *@
@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor
@* NOTE use this HTML code to design a sample *@
<div class="igContainer">

    <div class="igOptions" style="font-weight: bold;">
        <span class="igLegend-title" >Renewable Electricity Generated: </span>
        <div>
            <Legend @ref="LegendRef" Orientation="LegendOrientation.Horizontal" >
            </Legend>
        </div>
    </div>
    <div class="igComponent">
        @if (DataSource != null)
        {
            <CategoryChart Height="100%" Width="100%" 
                @ref="@CategoryChartRef"
                Legend="@LegendRef" 
                ChartType="CategoryChartType.StepLine"
                DataSource="DataSource"
                YAxisTitle="TWh"
                IsCategoryHighlightingEnabled="true"
                IsSeriesHighlightingEnabled="true"
                ToolTipType="ToolTipType.Category"
                IsTransitionInEnabled="true">
            </CategoryChart>
        }
    </div>
</div>

@code {

    private CategoryChart _categoryChart;
    private CategoryChart CategoryChartRef
    {
        get { return _categoryChart; }
        set
        {
            _categoryChart = value;
            if (this.CategoryChartRef != null)
            {
                this.CategoryChartRef.MarkerTypes.Clear();
                this.CategoryChartRef.MarkerTypes.Add(MarkerType.Triangle);
                this.CategoryChartRef.MarkerBrushes = "White";
                this.CategoryChartRef.MarkerOutlines = "rgb(115, 86, 86) rgb(213, 94, 0) rgb(230, 159, 0)";
                this.CategoryChartRef.Brushes = "rgb(115, 86, 86) rgb(213, 94, 0) rgb(230, 159, 0)";

                StateHasChanged();
            }
        }
    }
    private List<EnergyChartData> DataSource;
    private Legend legend;
    private Legend LegendRef
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        CategoryChartModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);
        InitData();
    }

    private void InitData()
    {
        List<EnergyChartData> _data = new List<EnergyChartData>();
        _data.Add(new EnergyChartData() { Year = "2009", Europe = 31, China = 21, USA = 19 });
        _data.Add(new EnergyChartData() { Year = "2010", Europe = 43, China = 26, USA = 24 });
        _data.Add(new EnergyChartData() { Year = "2011", Europe = 66, China = 29, USA = 28 });
        _data.Add(new EnergyChartData() { Year = "2012", Europe = 69, China = 32, USA = 26 });
        _data.Add(new EnergyChartData() { Year = "2013", Europe = 58, China = 47, USA = 38 });
        _data.Add(new EnergyChartData() { Year = "2014", Europe = 40, China = 46, USA = 31 });
        _data.Add(new EnergyChartData() { Year = "2015", Europe = 78, China = 50, USA = 19 });
        _data.Add(new EnergyChartData() { Year = "2016", Europe = 13, China = 90, USA = 52 });
        _data.Add(new EnergyChartData() { Year = "2017", Europe = 78, China = 132, USA = 50 });
        _data.Add(new EnergyChartData() { Year = "2018", Europe = 40, China = 134, USA = 34 });
        _data.Add(new EnergyChartData() { Year = "2019", Europe = 80, China = 96, USA = 38 });

        this.DataSource = _data;
    }

    public class EnergyChartData
    {
        public string Year { get; set; }
        public int Europe { get; set; }
        public int China { get; set; }
        public int USA { get; set; }
    }
}