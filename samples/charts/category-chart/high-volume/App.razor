@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options horizontal">
        <label class="options-label">Data Points: </label>
        <label class="options-value">@DataInfo</label>
        <input class="options-slider" type="range" min="10000" max="1000000" step="10000"
               value="@DataPoints" @onchange="OnDataPointsChanged" />
        <button @onclick="OnDataGenerateClick">Generate Data</button>
    </div>
    <div class="container vertical">
        <IgbCategoryChart @ref="chart"
            Height="100%" Width="100%"
            DataSourceScript="getHighVolumeData"
            YAxisLabelLocation="YAxisLabelLocation.OutsideRight"
            YAxisTitle="Value of Data Points"
            XAxisTitle="Index of Data Points"
            ToolTipType="ToolTipType.Default"
            XAxisEnhancedIntervalPreferMoreCategoryLabels="false"
            ShouldAutoExpandMarginForInitialLabels="false"
            CrosshairsDisplayMode="CrosshairsDisplayMode.None" 
            SeriesAdded="OnSeriesAdded">
        </IgbCategoryChart>
    </div>
</div>

@code {
    private IgbCategoryChart chart;
    private int DataPoints = 1000000;
    private string DataInfo;

    protected override void OnInitialized()
    {
        IgbCategoryChartModule.Register(IgniteUIBlazor);

        this.DataInfo = ToShortString(this.DataPoints);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IgniteUIBlazor.JsRuntime.InvokeVoidAsync("setHighVolumeDataCount", this.DataPoints);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnSeriesAdded(IgbChartSeriesEventArgs e)
    {
        ((IgbCategoryChart)e.Parent).MarkerTypes.Clear();
        ((IgbCategoryChart)e.Parent).MarkerTypes.Add(MarkerType.None);
    }

    private void OnDataPointsChanged(ChangeEventArgs args)
    {
        this.DataPoints = int.Parse(args.Value.ToString());
        this.DataInfo = ToShortString(this.DataPoints);
    }

    private void OnDataGenerateClick()
    {
        Task.Delay(1).ContinueWith((t) => GenerateData());
    }

    private async Task GenerateData()
    {
        await IgniteUIBlazor.JsRuntime.InvokeVoidAsync("setHighVolumeDataCount", this.DataPoints);
    }

    public static string ToShortString(double largeValue)
    {
        double roundValue;

        if (largeValue >= 1000000)
        {
            roundValue = Math.Round(largeValue / 100000) / 10;
            return roundValue + "m";
        }
        if (largeValue >= 1000)
        {
            roundValue = Math.Round(largeValue / 100) / 10;
            return roundValue + "k";
        }

        roundValue = Math.Round(largeValue);
        return roundValue + "";
    }
}