@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions">
        <label class="igOptions-label">Annotations: </label>
        <label class="igOptions-item">
            <input type="checkbox" @onchange="OnCrosshairsVisibleCheckboxChange" checked="@CrosshairsVisible" /> Crosshair
        </label>
        <label class="igOptions-item">
            <input type="checkbox" @onchange="OnCalloutsVisibleCheckboxChange" checked="@CalloutsVisible"/> Callouts
        </label>
        <label class="igOptions-item">
            <input type="checkbox" @onchange="OnFinalValuesCheckboxChange" checked="@FinalValuesVisible"/> Final Values
        </label>
        @* TODO - Changing markers is not currently possible at this time
        <label class="igOptions-item">
            <input type="checkbox" onChange={this.onMarkersVisible} /> Markers
        </label>*@
    </div>

    <div class="igComponent">
        @if (DataSource != null)
        {
            <CategoryChart Height="100%" Width="100%"
                           DataSource="DataSource"
                           ChartType="CategoryChartType.Line"
                           XAxisInterval="1"
                           YAxisMinimumValue="50"
                           YAxisMaximumValue="120"
                           YAxisLabelLocation="AxisLabelsLocation.OutsideRight"
                           IncludedProperties="@IncludedProps"
                           IsTransitionInEnabled="true"
                           Thickness="2"

                           CalloutsVisible="@CalloutsVisible"
                           CalloutsXMemberPath="Index"
                           CalloutsYMemberPath="Value"
                           CalloutsLabelMemberPath="Info"

                           CrosshairsSnapToData="true"
                           CrosshairsDisplayMode="@CrosshairMode"
                           CrosshairsAnnotationEnabled="@CrosshairsVisible"

                           FinalValueAnnotationsVisible="@FinalValuesVisible">
            </CategoryChart>
        }
    </div>
</div>

@code {

    private List<TemperatureData> DataSource;
    private string[] IncludedProps = new string[] { "Date", "Temperature" };

    // private bool MarkersVisible = true;
    private bool FinalValuesVisible = true;
    private bool CalloutsVisible = true;
    private bool CrosshairsVisible = true;

    private CrosshairsDisplayMode CrosshairMode = CrosshairsDisplayMode.Both;

    protected override void OnInitialized()
    {
        CategoryChartModule.Register(IgniteUIBlazor);

        this.DataSource = new List<TemperatureData>();
        InitData();
    }

    private void OnFinalValuesCheckboxChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        this.FinalValuesVisible = value;
    }

    private void OnCalloutsVisibleCheckboxChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        this.CalloutsVisible = value;
    }

    private void OnCrosshairsVisibleCheckboxChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        if (value)
        {
            this.CrosshairMode = CrosshairsDisplayMode.Both;
        }
        else
        {
            this.CrosshairMode = CrosshairsDisplayMode.None;
        }
    }

    private void InitData()
    {
        int year = DateTime.Now.Year;

        double[] tempValues = { 74, 74, 76, 78, 83, 87, 94, 97, 93, 86, 81, 79 };

        // generating data item
        for (int i = 0; i < 12; i++)
        {
            this.DataSource.Add(new TemperatureData()
            {
                Temperature = tempValues[i],
                Date = new DateTime(year, (i + 1), 1)
            });
        }

        double minVal = double.MinValue;
        double maxVal = double.MaxValue;

        int minIndex = 0;
        int maxIndex = 0;
        int idx = 0;

        // annotating data items
        foreach (TemperatureData item in this.DataSource) {

            if (minVal > item.Temperature)
            {
                minVal = item.Temperature;
                minIndex = idx;
            }
            if (maxVal < item.Temperature)
            {
                maxVal = item.Temperature;
                maxIndex = idx;
            }

            item.Index = idx;
            item.Value = item.Temperature;

            int month = item.Date.Month;
            if (month >= 11 || month < 3)
            {
                item.Info = "WINTER";
            }
            else if (month >= 3 && month < 5)
            {
                item.Info = "SPRING";
            }
            else if (month >= 5 && month < 8)
            {
                item.Info = "SUMMER";
            }
            else if (month >= 8 && month < 11)
            {
                item.Info = "FALL";
            }
            idx++;
        }

        this.DataSource[minIndex].Info = "MIN";
        this.DataSource[maxIndex].Info = "MAX";
    }

    public class TemperatureData
    {
        public double Temperature { get; set; }
        public DateTime Date { get; set; }
        public string Info { get; set; }
        public double Value { get; set; }
        public double Index { get; set; }
    }
}