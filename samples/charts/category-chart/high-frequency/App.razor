@using System.Collections.ObjectModel
@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options horizontal" style="padding-bottom: 1rem">
         <button @onclick="OnDataFeedClick" style="width: 5rem">@DataFeedAction</button>
         <label class="options-label">Refresh: </label>
         <label class="options-value">@DataFeedInterval ms</label>
         <input class="options-slider" type="range" min="5" max="250" step="5"
                value=@DataFeedInterval @onchange="OnRefreshFrequencyChanged" />

         <button @onclick="OnDataGenerateClick">Generate</button>
         <label class="options-label">Points: </label>
         <label class="options-value">@DataPoints</label>
         <input class="options-slider" type="range" min="100" max="2000" step="100"
                value=@DataPoints @onchange="OnDataPointsChanged" />
    </div>

    <div class="container vertical">
         <IgbCategoryChart Height="100%" Width="100%" @ref="Chart"
                        ChartType="CategoryChartType.Line"
                        DataSource="@Data"
                        YAxisExtent="40" >
         </IgbCategoryChart>
    </div>
</div>

@code {

    //private List<CategoryDataItem> Data;
    private ObservableCollection<CategoryDataItem> Data;

    private IgbCategoryChart _Chart;
    private IgbCategoryChart Chart
    {
        get { return _Chart; }
        set { _Chart = value; StateHasChanged(); }
    }

    private int DataIndex = 0;
    private double DataPoints = 500;
    private double DataFeedInterval = 5;
    private string DataFeedAction = "Start";
    private bool DataFeedUpdating = false;
    private bool RefreshChanged = false;

    private void OnDataUpdate()
    {
        if (!DataFeedUpdating) return;
        if (RefreshChanged) return;

        this.DataIndex++;

        var oldItem = this.Data[0];
        var newItem = CategoryDataSource.GetNewItem(this.Data, this.DataIndex);

        this.Data.RemoveAt(0);
        this.Chart.NotifyRemoveItem(this.Data, 0, oldItem);
        this.Data.Add(newItem);
        this.Chart.NotifyInsertItem(this.Data, this.Data.Count - 1, newItem);

        Task.Delay((int)this.DataFeedInterval).ContinueWith((t) => OnDataUpdate());
    }

    protected override void OnInitialized()
    {
        IgbCategoryChartModule.Register(IgniteUIBlazor);

        OnDataGenerateClick();
    }

    private void OnDataGenerateClick()
    {
        var dataList = CategoryDataSource.Generate(0, (int)this.DataPoints, false);

        this.Data = new ObservableCollection<CategoryDataItem>(dataList);
        //this.Data = new List<CategoryDataItem>(dataList);

        SetupInterval();
    }

    private void OnDataFeedClick()
    {
        DataFeedUpdating = !DataFeedUpdating;
        DataFeedAction = DataFeedUpdating ? "Stop" : "Start";

        SetupInterval();
    }

    private void OnDataPointsChanged(ChangeEventArgs args)
    {
        double num = double.Parse(args.Value.ToString());

        if (num < 100) num = 100;
        if (num > 10000) num = 10000;

        this.DataPoints = num;
    }

    private void OnRefreshFrequencyChanged(ChangeEventArgs args)
    {
        RefreshChanged = true;
        double num = double.Parse(args.Value.ToString());

        if (num < 5) num = 5;
        if (num > 1000) num = 1000;

        this.DataFeedInterval = num;

        RefreshChanged = false;
        SetupInterval();
    }

    private void SetupInterval()
    {
        Task.Delay((int)this.DataFeedInterval).ContinueWith((t) => OnDataUpdate());
    }

}