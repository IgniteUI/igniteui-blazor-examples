@using IgniteUI.Blazor.Controls
@using IgniteUI.Blazor.Controls;
@using System;
@using System.Linq;

<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel

        DescriptionType="CategoryChart"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="propertyEditorPanel1"
        @ref="propertyEditorPanel1">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="InitialGroupsHandler"
            Name="InitialGroups"
            @ref="initialGroups"
            Label="Initial Groups"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "Country", "Product", "MonthName", "Year" })"
            DropDownValues="@(new string[] { "Country", "Product", "MonthName", "Year" })"
            PrimitiveValue="@("Country")"
            Changed="EditorChangeUpdateInitialGroups">
            </IgbPropertyEditorPropertyDescription>

            <IgbPropertyEditorPropertyDescription
            PropertyPath="InitialSummariesHandler"
            Name="InitialSummaries"
            @ref="initialSummaries"
            Label="Initial Summaries"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "Sum(Sales) as Sales", "Avg(Sales) as Sales", "Min(Sales) as Sales", "Max(Sales) as Sales", "Count(Sales) as Sales" })"
            DropDownValues="@(new string[] { "Sum(Sales) as Sales", "Avg(Sales) as Sales", "Min(Sales) as Sales", "Max(Sales) as Sales", "Count(Sales) as Sales" })"
            PrimitiveValue="@("Sum(Sales) as Sales")"
            Changed="EditorChangeUpdateInitialSummaries">
            </IgbPropertyEditorPropertyDescription>

            <IgbPropertyEditorPropertyDescription
            PropertyPath="GroupSortsHandler"
            Name="GroupSorts"
            @ref="groupSorts"
            Label="Sort Groups"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "Sales Desc", "Sales Asc" })"
            DropDownValues="@(new string[] { "Sales Desc", "Sales Asc" })"
            PrimitiveValue="@("Sales Desc")"
            Changed="EditorChangeUpdateGroupSorts">
            </IgbPropertyEditorPropertyDescription>

        </IgbPropertyEditorPanel>

    </div>
    <div class="legend-title">
        Renewable Electricity Generated
    </div>
    <div class="container vertical fill">
        <IgbCategoryChart
        Name="chart"
        @ref="chart"
        DataSource="SalesData"
        ChartType="CategoryChartType.Column"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        CrosshairsDisplayMode="CrosshairsDisplayMode.None"
        InitialGroups="Country"
        InitialSummaries="Sum(Sales) as Sales"
        GroupSorts="Sales Desc">
        </IgbCategoryChart>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditorPanel1 = this.propertyEditorPanel1;
        var initialGroups = this.initialGroups;
        var initialSummaries = this.initialSummaries;
        var groupSorts = this.groupSorts;
        var chart = this.chart;

        this.BindElements = () => {
            propertyEditorPanel1.Target = this.chart;
        };
        this.BindElements();

    }

    private IgbPropertyEditorPanel propertyEditorPanel1;
    private IgbPropertyEditorPropertyDescription initialGroups;
    private IgbPropertyEditorPropertyDescription initialSummaries;
    private IgbPropertyEditorPropertyDescription groupSorts;
    private IgbCategoryChart chart;

    public void EditorChangeUpdateInitialGroups(IgbPropertyEditorPropertyDescriptionChangedEventArgs args)
    {
        var intialGroupVal = args.NewValue.ToString();
        chart.InitialGroups = null;
        chart.InitialGroups = intialGroupVal;
    }

    public void EditorChangeUpdateInitialSummaries(IgbPropertyEditorPropertyDescriptionChangedEventArgs args)
    {
        var intialSummariesVal = args.NewValue.ToString();
        chart.InitialSummaries = null;
        chart.InitialSummaries = intialSummariesVal;
    }

    public void EditorChangeUpdateGroupSorts(IgbPropertyEditorPropertyDescriptionChangedEventArgs args)
    {
        var groupSortsVal = args.NewValue.ToString();
        chart.GroupSorts = null;
        chart.GroupSorts = groupSortsVal;
    }

    private SalesData _salesData = null;
    public SalesData SalesData
    {
        get
        {
            if (_salesData == null)
            {
                _salesData = new SalesData();
            }
            return _salesData;
        }
    }

}