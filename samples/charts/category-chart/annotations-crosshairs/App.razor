@using IgniteUI.Blazor.Controls;


<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel
        
        DescriptionType="CategoryChart"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="PropertyEditor"
        @ref="propertyEditor">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="CrosshairsDisplayMode"
            Label="Crosshairs Display Mode: "
            PrimitiveValue="@("Both")"
            Name="CrosshairsDisplayModeEditor"
            @ref="crosshairsDisplayModeEditor">
            </IgbPropertyEditorPropertyDescription>
            
            <IgbPropertyEditorPropertyDescription
            PropertyPath="CrosshairsSnapToData"
            Label="Crosshairs Snap to Data"
            PrimitiveValue="true"
            ShouldOverrideDefaultEditor="true"
            Name="CrosshairsSnapToDataEditor"
            @ref="crosshairsSnapToDataEditor">
            </IgbPropertyEditorPropertyDescription>
            
        </IgbPropertyEditorPanel>
        
    </div>
    <div class="legend-title">
        Average Temperature in Sedney
    </div>

    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Column"
        YAxisMaximumValue="35"
        YAxisLabelLocation="YAxisLabelLocation.OutsideRight"
        DataSource="TemperatureAnnotatedData"
        IncludedProperties="@(new string[] { "Month", "Temperature" })"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        CrosshairsDisplayMode="CrosshairsDisplayMode.Both"
        CrosshairsSnapToData="true"
        CrosshairsLineVerticalStroke="black"
        CrosshairsLineThickness="2"
        CrosshairsLineHorizontalStroke="dodgerblue"
        CrosshairsAnnotationXAxisBackground="black"
        CrosshairsAnnotationYAxisBackground="dodgerblue"
        CrosshairsAnnotationYAxisPrecision="0"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditor = this.propertyEditor;
        var crosshairsDisplayModeEditor = this.crosshairsDisplayModeEditor;
        var crosshairsSnapToDataEditor = this.crosshairsSnapToDataEditor;
        var chart = this.chart;

        this.BindElements = () => {
            propertyEditor.Target = this.chart;
        };
        this.BindElements();


	}

    private IgbPropertyEditorPanel propertyEditor;
    private IgbPropertyEditorPropertyDescription crosshairsDisplayModeEditor;
    private IgbPropertyEditorPropertyDescription crosshairsSnapToDataEditor;
    private IgbCategoryChart chart;

    private TemperatureAnnotatedData _temperatureAnnotatedData = null;
    public TemperatureAnnotatedData TemperatureAnnotatedData
    {
        get
        {
            if (_temperatureAnnotatedData == null)
            {
                _temperatureAnnotatedData = new TemperatureAnnotatedData(); 
            }
            return _temperatureAnnotatedData;
        }
    }
    
}