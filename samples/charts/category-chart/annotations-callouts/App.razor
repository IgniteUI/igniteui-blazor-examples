@using IgniteUI.Blazor.Controls;


<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel

        DescriptionType="CategoryChart"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="PropertyEditor"
        @ref="propertyEditor">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="CalloutsVisible"
            Label="Callouts Visible"
            ShouldOverrideDefaultEditor="true"
            PrimitiveValue="true"
            Name="CalloutsVisibleEditor"
            @ref="calloutsVisibleEditor">
            </IgbPropertyEditorPropertyDescription>

        </IgbPropertyEditorPanel>

    </div>
    <div class="legend-title">
        Average Temperature in Sedney
    </div>

    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Column"
        YAxisMaximumValue="35"
        YAxisLabelLocation="YAxisLabelLocation.OutsideRight"
        DataSource="TemperatureAnnotatedData"
        IncludedProperties="@(new string[] { "Month", "Temperature" })"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        CrosshairsAnnotationYAxisPrecision="0"
        CalloutsVisible="true"
        CalloutsDataSource="TemperatureAnnotatedData"
        CalloutsXMemberPath="Index"
        CalloutsYMemberPath="Temperature"
        CalloutsLabelMemberPath="TempInfo"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>

    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditor = this.propertyEditor;
        var calloutsVisibleEditor = this.calloutsVisibleEditor;
        var chart = this.chart;

        this.BindElements = () => {
            propertyEditor.Target = this.chart;
        };
        this.BindElements();


    }

    private IgbPropertyEditorPanel propertyEditor;
    private IgbPropertyEditorPropertyDescription calloutsVisibleEditor;
    private IgbCategoryChart chart;

    private TemperatureAnnotatedData _temperatureAnnotatedData = null;
    public TemperatureAnnotatedData TemperatureAnnotatedData
    {
        get
        {
            if (_temperatureAnnotatedData == null)
            {
                _temperatureAnnotatedData = new TemperatureAnnotatedData();
            }
            return _temperatureAnnotatedData;
        }
    }

}