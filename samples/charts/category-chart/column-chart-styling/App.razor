@using IgniteUI.Blazor.Controls;


<div class="container vertical">
    <div class="legend-title">
        Percentage Change in Energy Generation
    </div>
    <div class="legend">
        <IgbLegend
        Orientation="LegendOrientation.Horizontal"
        Name="Legend"
        @ref="legend">
        </IgbLegend>
        
    </div>

    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Column"
        XAxisGap="0.5"
        IsCategoryHighlightingEnabled="true"
        XAxisMajorStroke="lightgray"
        DataSource="EnergyRenewableConsumption"
        Brushes="#9de772 #8b5bb1 #6db1ff #ee5879 #f8a15f"
        Outlines="white"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        IsSeriesHighlightingEnabled="true"
        HighlightingMode="SeriesHighlightingMode.FadeOthersSpecific"
        HighlightingBehavior="SeriesHighlightingBehavior.NearestItemsAndSeries"
        CrosshairsDisplayMode="CrosshairsDisplayMode.None"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var legend = this.legend;
        var chart = this.chart;

        this.BindElements = () => {
            chart.Legend = this.legend;
        };
        this.BindElements();


	}

    private IgbLegend legend;
    private IgbCategoryChart chart;

    private EnergyRenewableConsumption _energyRenewableConsumption = null;
    public EnergyRenewableConsumption EnergyRenewableConsumption
    {
        get
        {
            if (_energyRenewableConsumption == null)
            {
                _energyRenewableConsumption = new EnergyRenewableConsumption(); 
            }
            return _energyRenewableConsumption;
        }
    }
    
}