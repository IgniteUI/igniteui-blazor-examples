@using IgniteUI.Blazor.Controls;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel
        
        DescriptionType="CategoryChart"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="propertyEditorPanel1"
        @ref="propertyEditorPanel1">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="XAxisLabelAngle"
            Label="X Axis Label Angle"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "0", "45", "90", "135", "180", "225", "270" })"
            DropDownValues="@(new string[] { "0", "45", "90", "135", "180", "225", "270" })"
            PrimitiveValue="0"
            Name="XAxisLabelAngleEditor"
            @ref="xAxisLabelAngleEditor">
            </IgbPropertyEditorPropertyDescription>
            
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "-90", "-45", "0", "45", "90" })"
            PrimitiveValue="0"
            PropertyPath="YAxisLabelAngle"
            Label="Y Axis Label Angle"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "-90", "-45", "0", "45", "90" })"
            Name="YAxisLabelAngleEditor"
            @ref="yAxisLabelAngleEditor">
            </IgbPropertyEditorPropertyDescription>
            
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "red", "green" })"
            PrimitiveValue="@("red")"
            PropertyPath="XAxisLabelTextColor"
            Label="Y Axis Label Color"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "red", "green" })"
            Name="XAxisLabelTextColorEditor"
            @ref="xAxisLabelTextColorEditor">
            </IgbPropertyEditorPropertyDescription>
            
        </IgbPropertyEditorPanel>
        
    </div>
    <div class="legend-title">
        Renewable Electricity Generated
    </div>
    <div class="legend">
        <IgbLegend
        Orientation="LegendOrientation.Horizontal"
        Name="Legend"
        @ref="legend">
        </IgbLegend>
        
    </div>

    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Line"
        XAxisLabelTopMargin="5"
        YAxisLabelRightMargin="5"
        XAxisLabelTextColor="gray"
        YAxisLabelTextColor="gray"
        XAxisLabelTextStyle="10pt 'Titillium Web'"
        YAxisLabelTextStyle="10pt 'Titillium Web'"
        XAxisLabelAngle="0"
        YAxisLabelAngle="0"
        YAxisLabelLocation="YAxisLabelLocation.OutsideRight"
        TitleTopMargin="10"
        TopMargin="20"
        DataSource="CountryRenewableElectricity"
        IncludedProperties="@(new string[] { "Year", "Europe", "China", "America" })"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var legend = this.legend;
        var propertyEditorPanel1 = this.propertyEditorPanel1;
        var xAxisLabelAngleEditor = this.xAxisLabelAngleEditor;
        var yAxisLabelAngleEditor = this.yAxisLabelAngleEditor;
        var xAxisLabelTextColorEditor = this.xAxisLabelTextColorEditor;
        var chart = this.chart;

        this.BindElements = () => {
            propertyEditorPanel1.Target = this.chart;
            chart.Legend = this.legend;
        };
        this.BindElements();


	}

    private IgbLegend legend;
    private IgbPropertyEditorPanel propertyEditorPanel1;
    private IgbPropertyEditorPropertyDescription xAxisLabelAngleEditor;
    private IgbPropertyEditorPropertyDescription yAxisLabelAngleEditor;
    private IgbPropertyEditorPropertyDescription xAxisLabelTextColorEditor;
    private IgbCategoryChart chart;

    private CountryRenewableElectricity _countryRenewableElectricity = null;
    public CountryRenewableElectricity CountryRenewableElectricity
    {
        get
        {
            if (_countryRenewableElectricity == null)
            {
                _countryRenewableElectricity = new CountryRenewableElectricity(); 
            }
            return _countryRenewableElectricity;
        }
    }
    
}