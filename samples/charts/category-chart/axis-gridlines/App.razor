@using IgniteUI.Blazor.Controls;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel
        
        DescriptionType="CategoryChart"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="propertyEditorPanel1"
        @ref="propertyEditorPanel1">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="YAxisStroke"
            Label="Y Axis Stroke"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "gray", "darkslategray", "salmon", "cornflowerblue", "darkgreen" })"
            DropDownValues="@(new string[] { "gray", "darkslategray", "salmon", "cornflowerblue", "darkgreen" })"
            PrimitiveValue="@("gray")"
            Name="YAxisStroke"
            @ref="yAxisStroke">
            </IgbPropertyEditorPropertyDescription>
            
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "gray", "darkslategray", "salmon", "cornflowerblue", "darkgreen" })"
            PrimitiveValue="@("darkslategray")"
            PropertyPath="YAxisMajorStroke"
            Label="Y Axis Major Stroke"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "gray", "darkslategray", "salmon", "cornflowerblue", "darkgreen" })"
            Name="YAxisMajorStroke"
            @ref="yAxisMajorStroke">
            </IgbPropertyEditorPropertyDescription>
            
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "gray", "darkslategray", "salmon", "cornflowerblue", "darkgreen" })"
            PrimitiveValue="@("gray")"
            PropertyPath="YAxisMinorStroke"
            Label="Y Axis Minor Stroke"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "gray", "darkslategray", "salmon", "cornflowerblue", "darkgreen" })"
            Name="YAxisMinorStroke"
            @ref="yAxisMinorStroke">
            </IgbPropertyEditorPropertyDescription>
            
        </IgbPropertyEditorPanel>
        
    </div>
    <div class="legend-title">
        Renewable Electricity Generated
    </div>
    <div class="legend">
        <IgbLegend
        Orientation="LegendOrientation.Horizontal"
        Name="Legend"
        @ref="legend">
        </IgbLegend>
        
    </div>

    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Line"
        XAxisInterval="1"
        YAxisInterval="20"
        YAxisMinorInterval="5"
        XAxisMajorStroke="#474747"
        YAxisMajorStroke="darkslategray"
        XAxisMajorStrokeThickness="0.5"
        YAxisMajorStrokeThickness="1"
        YAxisMinorStrokeThickness="0.5"
        XAxisStroke="#919191"
        YAxisStroke="gray"
        XAxisStrokeThickness="2"
        YAxisStrokeThickness="2"
        YAxisMinorStroke="gray"
        DataSource="CountryRenewableElectricity"
        IncludedProperties="@(new string[] { "Year", "Europe", "China", "America" })"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        Thickness="2"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var legend = this.legend;
        var propertyEditorPanel1 = this.propertyEditorPanel1;
        var yAxisStroke = this.yAxisStroke;
        var yAxisMajorStroke = this.yAxisMajorStroke;
        var yAxisMinorStroke = this.yAxisMinorStroke;
        var chart = this.chart;

        this.BindElements = () => {
            propertyEditorPanel1.Target = this.chart;
            chart.Legend = this.legend;
        };
        this.BindElements();


	}

    private IgbLegend legend;
    private IgbPropertyEditorPanel propertyEditorPanel1;
    private IgbPropertyEditorPropertyDescription yAxisStroke;
    private IgbPropertyEditorPropertyDescription yAxisMajorStroke;
    private IgbPropertyEditorPropertyDescription yAxisMinorStroke;
    private IgbCategoryChart chart;

    private CountryRenewableElectricity _countryRenewableElectricity = null;
    public CountryRenewableElectricity CountryRenewableElectricity
    {
        get
        {
            if (_countryRenewableElectricity == null)
            {
                _countryRenewableElectricity = new CountryRenewableElectricity(); 
            }
            return _countryRenewableElectricity;
        }
    }
    
}