@using IgniteUI.Blazor.Controls;
@using IgniteUI.Blazor.Controls;
@using System;
@using System.Linq;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel
        
        DescriptionType="CategoryChart"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="PropertyEditor"
        @ref="propertyEditor">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="ChartType"
            Label="Chart Type"
            PrimitiveValue="@("Line")"
            Name="ChartTypeEditor"
            @ref="chartTypeEditor">
            </IgbPropertyEditorPropertyDescription>
            
            <IgbPropertyEditorPropertyDescription
            DropDownNames="@(new string[] { "Circle", "Automatic", "Triangle", "Pyramid", "Square", "Diamond", "Pentagon", "Hexagon", "Tetragram", "Pentagram", "Hexagram", "None" })"
            PrimitiveValue="@("Circle")"
            Changed="EditorChangeUpdateMarkerType"
            PropertyPath="MarkerTypeHandler"
            Label="Marker Type"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownValues="@(new string[] { "Circle", "Automatic", "Triangle", "Pyramid", "Square", "Diamond", "Pentagon", "Hexagon", "Tetragram", "Pentagram", "Hexagram", "None" })"
            Name="MarkerTypeEditor"
            @ref="markerTypeEditor">
            </IgbPropertyEditorPropertyDescription>
            
        </IgbPropertyEditorPanel>
        
    </div>
    <div class="legend-title">
        Renewable Electricity Generated
    </div>

    <div class="container vertical fill">
        <IgbCategoryChart
        ChartType="CategoryChartType.Line"
        DataSource="CountryRenewableElectricity"
        IsSeriesHighlightingEnabled="true"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        Name="chart"
        @ref="chart">
        </IgbCategoryChart>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

        await Task.Delay(1);
    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditor = this.propertyEditor;
        var chartTypeEditor = this.chartTypeEditor;
        var markerTypeEditor = this.markerTypeEditor;
        var chart = this.chart;

        this.BindElements = () => {
            propertyEditor.Target = this.chart;
        };
        this.BindElements();

        if (firstRender) {
        }

        await Task.Delay(1);
	}

    private IgbPropertyEditorPanel propertyEditor;
    private IgbPropertyEditorPropertyDescription chartTypeEditor;
    private IgbPropertyEditorPropertyDescription markerTypeEditor;
    private IgbCategoryChart chart;

    
    public void EditorChangeUpdateMarkerType(IgbPropertyEditorPropertyDescriptionChangedEventArgs args)
    {
        var markerVal = (MarkerType)Enum.Parse(typeof(MarkerType), args.NewValue.ToString());
        chart.MarkerTypes.Clear();
        chart.MarkerTypes.Add(markerVal);
    }
        
    private CountryRenewableElectricity _countryRenewableElectricity = null;
    public CountryRenewableElectricity CountryRenewableElectricity
    {
        get
        {
            if (_countryRenewableElectricity == null)
            {
                _countryRenewableElectricity = new CountryRenewableElectricity(); 
            }
            return _countryRenewableElectricity;
        }
    }
    
}