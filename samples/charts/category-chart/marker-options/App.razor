@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options horizontal">
        <span class="options-label">Chart Type </span>
        <select @bind="@SelectedChart">
            <option>@CategoryChartType.Area</option>
            <option>@CategoryChartType.Column</option>
            <option>@CategoryChartType.Point</option>
            <option>@CategoryChartType.Line</option>
            <option>@CategoryChartType.Spline</option>
            <option>@CategoryChartType.SplineArea</option>
            <option>@CategoryChartType.StepArea</option>
            <option>@CategoryChartType.StepLine</option>
            <option>@CategoryChartType.Waterfall</option>
            <option>@CategoryChartType.Auto</option>
        </select>
        <span class="options-label"> Marker Type </span>
        <select @bind="@SelectedMarker">
            <option>@MarkerType.Circle</option>
            <option>@MarkerType.Automatic</option>
            <option>@MarkerType.Triangle</option>
            <option>@MarkerType.Pyramid</option>
            <option>@MarkerType.Square</option>
            <option>@MarkerType.Diamond</option>
            <option>@MarkerType.Pentagon</option>
            <option>@MarkerType.Hexagon</option>
            <option>@MarkerType.Tetragram</option>
            <option>@MarkerType.Pentagram</option>
            <option>@MarkerType.Hexagram</option>
            <option>@MarkerType.None</option>
        </select>
        <span class="options-label"> Marker Fill </span>
        <select @bind="@SelectedMarkerFillMode">
            <option>@MarkerFillMode.Normal</option>
            <option>@MarkerFillMode.MatchMarkerOutline</option>
        </select>
    </div>
    <div class="container vertical">
        @if (Data != null)
        {
            // TODO add this code when supported: MarkerTypes="Circle"

            // NOTE the MarkerTypes property is set in code-behind
            <IgbCategoryChart Height="100%" Width="100%" @ref="Chart"
                           DataSource="Data"
                           ChartTitle="Renewable Electricity Generated" TitleTopMargin="10"
                           ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
                           IsSeriesHighlightingEnabled="true"
                           ChartType="@SelectedChart"
                           MarkerFillMode="@SelectedMarkerFillMode"
                           MarkerThickness="1" MarkerFillOpacity="1.0" 
                           MarkerBrushes="White"
                           MarkerOutlines="#ee5879, #c4c4c4, #9af2e4"
                           Brushes="#ee5879, #c4c4c4, #9af2e4"
                           Outlines="#ee5879, #c4c4c4, #9af2e4"
                           IsTransitionInEnabled="true"
                           YAxisMinimumValue="0"
                           MarkerTypes>
            </IgbCategoryChart>
        }
    </div>
</div>

@code {

    private List<EnergyRenewableInfo> Data = new EnergyRenewableData();

    private IgbCategoryChart Chart;
    private CategoryChartType SelectedChart = CategoryChartType.Line;
    private MarkerFillMode SelectedMarkerFillMode = MarkerFillMode.Normal;
    private ComputedPlotAreaMarginMode ComputedPlotAreaMargin = ComputedPlotAreaMarginMode.Series;

    private MarkerType _SelectedMarker = MarkerType.Circle;
    private MarkerType SelectedMarker
    {
        get { return _SelectedMarker; }
        set
        {
            _SelectedMarker = value;
            SetChartMarker(_SelectedMarker);
        }
    }

    protected override void OnInitialized()
    {
        IgbCategoryChartModule.Register(IgniteUIBlazor);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
            SetChartMarker(SelectedMarker); // initalizing to Circle marker
    }

    protected void SetChartMarker(MarkerType marker)
    {
        if (this.Chart != null)
        {
            this.Chart.MarkerTypes.Clear();
            this.Chart.MarkerTypes.Add(marker);
        }
    }
}