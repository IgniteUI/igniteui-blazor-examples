@page "/SparklineUnknownValues"

@using Infragistics.Blazor.Controls
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject IJSRuntime JSRuntime;

@*TODO binding is not working*@

    <div class="igContainer">       

        <div className="igOptions">
            <label className="igOptions-item">
                <input @onchange="onRangeVisibilityChanged" type="checkbox" checked="checked" />Plot Unknown Values
            </label>
        </div>

        <div class="igComponent">
            @if (DataSource != null)
            {
                <Sparkline Height="100%"
                           Width="100%"
                           DataSource="DataSource"
                           ValueMemberPath="Label"
                           DisplayType="SparklineDisplayType.Area"
                           UnknownValuePlotting="@unknownValuePlotting">
                </Sparkline>
            }

        </div>
    </div>

@code {

    private List<DataItem> DataSource;
    private TrendLineType SelectedTrendlineType = TrendLineType.ExponentialFit;
    private UnknownValuePlotting unknownValuePlotting = UnknownValuePlotting .LinearInterpolate;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        SparklineModule.Register(InfragisticsBlazor);

        var dataItems = new List<DataItem>();
       
        dataItems.Add(new DataItem() { Label =4,Value =4 });
        dataItems.Add(new DataItem() { Label = 5, Value = 5});
        dataItems.Add(new DataItem() { Label = 2, Value = null });
        dataItems.Add(new DataItem() { Label = 7, Value = 7 });
        dataItems.Add(new DataItem() { Label = -1, Value = -1 });

        dataItems.Add(new DataItem() { Label = 3, Value = 3 });
        dataItems.Add(new DataItem() { Label = -2, Value = -2 });
        dataItems.Add(new DataItem() { Label = 5, Value = null });
        dataItems.Add(new DataItem() { Label = 2, Value = 2 });
        dataItems.Add(new DataItem() { Label = 6, Value = 6 });

        DataSource = dataItems;
    }

    public void onRangeVisibilityChanged(ChangeEventArgs e)
    {
        bool selection = (bool)e.Value;
        Console.WriteLine("selection:::::" + selection);

        if (selection)
        {
            Console.WriteLine("LinearInterpolate");

            this.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;
        }
        else
        {
            Console.WriteLine("DontPlot");

            this.unknownValuePlotting = UnknownValuePlotting.DontPlot;
        }
    }

    public class DataItem
    {
        public double Label { get; set; }
        public double? Value { get; set; }
    }


}
