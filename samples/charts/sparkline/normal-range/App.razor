@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

    <div class="igContainer">
        <div class="igOptions">
            <label class="igOptions-item">
                <input @onchange="onRangeVisibilityChanged" checked="checked" type="checkbox"  />Range Visibility</label>

            <label class="igOptions-item">
                <input type="range" min="-2" max="7" step="0.5" value=@normalRangeMinimum @onchange="onMinSliderChanged" />Min Range @normalRangeMinimum
            </label>
            <label class="igOptions-item">
                <input type="range" min="-2" max="7" step="0.5" value=@normalRangeMaximum @onchange="onMaxSliderChanged" />Max Range @normalRangeMaximum
            </label>
        </div>

        <div class="igComponent">

            @if (Data != null)
            {
                <Sparkline Height="100%"
                    Width="100%"
                    DataSource="Data"
                    DisplayType="SparklineDisplayType.Area"
                    ValueMemberPath="Value"
                    LabelMemberPath="Label"
                    NormalRangeVisibility="@normalRangeVisibility"
                    NormalRangeMinimum=@normalRangeMinimum
                    NormalRangeMaximum=@normalRangeMaximum
                    NormalRangeFill="rgba(255, 0, 0, 0.4)"
                    DisplayNormalRangeInFront="true">
                </Sparkline>

            }

        </div>
    </div>

@code {

    private List<SparklineSimpleItem> Data;
    private float normalRangeMinimum = 1;
    private float normalRangeMaximum = 4;
    private Visibility normalRangeVisibility = Visibility.Visible ;

    protected override void OnInitialized()
    {
        SparklineModule.Register(IgniteUIBlazor);

        this.Data = SparklineSimpleData.Generate();
    }

    public void onRangeVisibilityChanged(ChangeEventArgs e)
    {
        bool selection = (bool)e.Value;

        if (selection)
        {
            this.normalRangeVisibility = Visibility.Visible ;
        }
        else
        {
            this.normalRangeVisibility = Visibility.Collapsed ;
        }

    }

    public void onMinSliderChanged(ChangeEventArgs e)
    {
        float value = float.Parse(e.Value.ToString());
        this.normalRangeMinimum = value ;

    }

    public void onMaxSliderChanged(ChangeEventArgs e)
    {
        float value = float.Parse(e.Value.ToString());
        this.normalRangeMaximum = value;
    }

}