@using IgniteUI.Blazor.Controls

@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
	<div class="options vertical">
        <IgbPropertyEditorPanel
        
        DescriptionType="Sparkline"
        IsHorizontal="true"
        IsWrappingEnabled="true"
        Name="propertyEditorPanel1"
        @ref="propertyEditorPanel1">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="FirstMarkerVisibility"
            Label="First Markers"
            ValueType="PropertyEditorValueType.EnumValue"
            ShouldOverrideDefaultEditor="true"
            DropDownNames="@(new string[] { "Visible", "Collapsed" })"
            DropDownValues="@(new string[] { "Visible", "Collapsed" })"
            PrimitiveValue="@("Visible")"
            Name="FirstMarkerVisibilityEditor"
            @ref="firstMarkerVisibilityEditor">
            </IgbPropertyEditorPropertyDescription>
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "Visible", "Collapsed" })"
            PrimitiveValue="@("Visible")"
            PropertyPath="HighMarkerVisibility"
            Label="High Markers"
            ValueType="PropertyEditorValueType.EnumValue"
            DropDownNames="@(new string[] { "Visible", "Collapsed" })"
            Name="HighMarkerVisibilityEditor"
            @ref="highMarkerVisibilityEditor">
            </IgbPropertyEditorPropertyDescription>
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "Visible", "Collapsed" })"
            PrimitiveValue="@("Visible")"
            PropertyPath="LowMarkerVisibility"
            Label="Low Markers"
            ValueType="PropertyEditorValueType.EnumValue"
            DropDownNames="@(new string[] { "Visible", "Collapsed" })"
            Name="LowMarkerVisibilityEditor"
            @ref="lowMarkerVisibilityEditor">
            </IgbPropertyEditorPropertyDescription>
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "Visible", "Collapsed" })"
            PrimitiveValue="@("Visible")"
            PropertyPath="NegativeMarkerVisibility"
            Label="Negative Markers"
            ValueType="PropertyEditorValueType.EnumValue"
            DropDownNames="@(new string[] { "Visible", "Collapsed" })"
            Name="NegativeMarkerVisibilityEditor"
            @ref="negativeMarkerVisibilityEditor">
            </IgbPropertyEditorPropertyDescription>
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "Visible", "Collapsed" })"
            PrimitiveValue="@("Visible")"
            PropertyPath="LastMarkerVisibility"
            Label="Last Markers"
            ValueType="PropertyEditorValueType.EnumValue"
            DropDownNames="@(new string[] { "Visible", "Collapsed" })"
            Name="LastMarkerVisibilityEditor"
            @ref="lastMarkerVisibilityEditor">
            </IgbPropertyEditorPropertyDescription>
            <IgbPropertyEditorPropertyDescription
            DropDownValues="@(new string[] { "Visible", "Collapsed" })"
            PrimitiveValue="@("Visible")"
            PropertyPath="MarkerVisibility"
            Label="All Markers"
            ValueType="PropertyEditorValueType.EnumValue"
            DropDownNames="@(new string[] { "Visible", "Collapsed" })"
            Name="MarkerVisibilityEditor"
            @ref="markerVisibilityEditor">
            </IgbPropertyEditorPropertyDescription>
        </IgbPropertyEditorPanel>
    </div>
	
	
    <div class="container vertical fill">
        <IgbSparkline
        MarkerVisibility="Visibility.Visible"
        NegativeMarkerVisibility="Visibility.Visible"
        FirstMarkerVisibility="Visibility.Visible"
        LastMarkerVisibility="Visibility.Visible"
        LowMarkerVisibility="Visibility.Visible"
        HighMarkerVisibility="Visibility.Visible"
        MarkerSize="10"
        FirstMarkerSize="10"
        LastMarkerSize="10"
        HighMarkerSize="10"
        LowMarkerSize="10"
        NegativeMarkerSize="10"
        Minimum="0"
        Maximum="60"
        DataSource="SparklineProfitData"
        ValueMemberPath="Value"
        LabelMemberPath="Label"
        DisplayType="SparklineDisplayType.Line"
        Name="chart"
        @ref="chart">
        </IgbSparkline>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
    }

	private Action BindElements { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		var propertyEditorPanel1 = this.propertyEditorPanel1;
		var firstMarkerVisibilityEditor = this.firstMarkerVisibilityEditor;
		var highMarkerVisibilityEditor = this.highMarkerVisibilityEditor;
		var lowMarkerVisibilityEditor = this.lowMarkerVisibilityEditor;
		var negativeMarkerVisibilityEditor = this.negativeMarkerVisibilityEditor;
		var lastMarkerVisibilityEditor = this.lastMarkerVisibilityEditor;
		var markerVisibilityEditor = this.markerVisibilityEditor;
		var chart = this.chart;

        this.BindElements = () => {
            propertyEditorPanel1.Target = this.chart;
        };
        this.BindElements();
	}

	private IgbPropertyEditorPanel propertyEditorPanel1;
	private IgbPropertyEditorPropertyDescription firstMarkerVisibilityEditor;
	private IgbPropertyEditorPropertyDescription highMarkerVisibilityEditor;
	private IgbPropertyEditorPropertyDescription lowMarkerVisibilityEditor;
	private IgbPropertyEditorPropertyDescription negativeMarkerVisibilityEditor;
	private IgbPropertyEditorPropertyDescription lastMarkerVisibilityEditor;
	private IgbPropertyEditorPropertyDescription markerVisibilityEditor;
	private IgbSparkline chart;


    private SparklineProfitData _sparklineProfitData = null;
    public SparklineProfitData SparklineProfitData
    {
        get
        {
            if (_sparklineProfitData == null)
            {
                _sparklineProfitData = new SparklineProfitData(); 
            }
            return _sparklineProfitData;
        }
    }
    
}