@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

    <div class="container vertical">

        <div class="options horizontal">
            <label class="options-item">
                <input type="checkbox" @onchange="onHighMarkerCheckboxChanged" />High Markers</label>
            <label class="options-item">
                <input type="checkbox" @onchange="onLowMarkerCheckboxChanged" />Low Markers</label>
            <label class="options-item">
                <input type="checkbox" @onchange="onFirstMarkerCheckboxChanged" />First Markers</label>
            <label class="options-item">
                <input type="checkbox" @onchange="onLastMarkerCheckboxChanged" />Last Markers</label>
            <label class="options-item">
                <input type="checkbox" @onchange="onNegativeMarkerCheckboxChanged" />Negative Markers</label>
            <label class="options-item">
                <input type="checkbox" @onchange="onAllMarkerCheckboxChanged" />All Markers</label>
        </div>

        <div class="container vertical">

            @if (Data != null)
            {
                <Sparkline Height="100%"
                    Width="100%"
                    DataSource="Data"
                    DisplayType="SparklineDisplayType.Line"
                    ValueMemberPath="Value"
                    LabelMemberPath="Label"
                    Minimum="-3"
                    MarkerVisibility="@markerVisibility"
                    HighMarkerVisibility="@highMarkerVisibility"
                    LowMarkerVisibility="@lowMarkerVisibility"
                    FirstMarkerVisibility="@firstMarkerVisibility"
                    LastMarkerVisibility="@lastMarkerVisibility"
                    NegativeMarkerVisibility="@negativeMarkerVisibility"
                    MarkerSize="10"
                    FirstMarkerSize="10"
                    LastMarkerSize="10"
                    LowMarkerSize="10"
                    HighMarkerSize="10"
                    NegativeMarkerSize="10">
                 </Sparkline>
            }

        </div>
    </div>

@code {

        private List<SparklineMarkerItem> Data;

        private Visibility highMarkerVisibility = Visibility.Collapsed ;
        private Visibility lowMarkerVisibility = Visibility.Collapsed;
        private Visibility firstMarkerVisibility = Visibility.Collapsed;
        private Visibility lastMarkerVisibility = Visibility.Collapsed;
        private Visibility negativeMarkerVisibility = Visibility.Collapsed;
        private Visibility markerVisibility = Visibility.Collapsed;

        // private Visibility visibility = Visibility.Visible ;

        protected override void OnInitialized()
        {
            SparklineModule.Register(IgniteUIBlazor);

            this.Data = SparklineMarkerData.Generate();

        }

        public void onHighMarkerCheckboxChanged(ChangeEventArgs e)
        {
            bool selection = (bool)e.Value;
            if (selection)
            {
                this.highMarkerVisibility = Visibility.Visible;
            }
            else
            {
                this.highMarkerVisibility = Visibility.Collapsed;
            }
        }

        public void onLowMarkerCheckboxChanged(ChangeEventArgs e)
        {
            bool selection = (bool)e.Value;
            if (selection)
            {
                this.lowMarkerVisibility = Visibility.Visible;
            }
            else
            {
                this.lowMarkerVisibility = Visibility.Collapsed;
            }
        }

        public void onFirstMarkerCheckboxChanged(ChangeEventArgs e)
        {
            bool selection = (bool)e.Value;
            if (selection)
            {
                this.firstMarkerVisibility = Visibility.Visible;
            }
            else
            {
                this.firstMarkerVisibility = Visibility.Collapsed;
            }
        }

        public void onLastMarkerCheckboxChanged(ChangeEventArgs e)
        {
            bool selection = (bool)e.Value;
            if (selection)
            {
                this.lastMarkerVisibility = Visibility.Visible;
            }
            else
            {
                this.lastMarkerVisibility = Visibility.Collapsed;
            }
        }

        public void onNegativeMarkerCheckboxChanged(ChangeEventArgs e)
        {
            bool selection = (bool)e.Value;
            if (selection)
            {
                this.negativeMarkerVisibility = Visibility.Visible;

            }
            else
            {
                this.negativeMarkerVisibility = Visibility.Collapsed;
            }
        }

        public void onAllMarkerCheckboxChanged(ChangeEventArgs e)
        {
            bool selection = (bool)e.Value;
            if (selection)
            {
                this.markerVisibility = Visibility.Visible;

            }
            else
            {
                this.markerVisibility = Visibility.Collapsed;
            }
        }
}