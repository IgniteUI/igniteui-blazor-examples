@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options vertical">
        <button @onclick="onAnimationToggle">Animate Chart</button>
    </div>

    <div class="container vertical">
        @if (Data != null)
        {
            <DoughnutChart Height="100%" Width="100%">
                <RingSeries DataSource="Data"
                            LabelMemberPath="Summary"
                            ValueMemberPath="MarketShare"
                            LegendLabelMemberPath="Company"
                            LabelsPosition=LabelsPosition.InsideEnd
                            StartAngle="@StartAngle"
                            LabelExtent="@LabelExtent"
                            RadiusFactor="@RadiusFactor">
                </RingSeries>
            </DoughnutChart>
        }
    </div>
</div>

@code {

    private List<DataItem> Data;
    private double StartAngle = 0;
    private double RadiusFactor = 0.1;
    private double LabelExtent = 0.7;
    private Boolean isAnimating = false;

    private void onAnimationToggle()
    {
        if (!this.isAnimating)
        {
            this.StartAngle = 0;
            this.RadiusFactor = 0.1;
            this.isAnimating = true;

            Task.Delay(16).ContinueWith((t) => OnTimerTick());
        }
        else
        {
            this.isAnimating = false;
        }
    }

    protected override void OnInitialized()
    {
        DoughnutChartModule.Register(IgniteUIBlazor);

        var dataItems = new List<DataItem>();
        dataItems.Add(new DataItem() { MarketShare = 30, Company = "Google", });
        dataItems.Add(new DataItem() { MarketShare = 25, Company = "Apple", });
        dataItems.Add(new DataItem() { MarketShare = 20, Company = "Microsoft", });
        dataItems.Add(new DataItem() { MarketShare = 15, Company = "Samsung", });
        dataItems.Add(new DataItem() { MarketShare = 10, Company = "Other", });

        Data = dataItems;
        this.onAnimationToggle();
    }

    private void OnTimerTick()
    {
        if (this.isAnimating)
        {
            if (this.RadiusFactor < 1.0)
                this.RadiusFactor += 0.0025;

            if (this.StartAngle < 360)
                this.StartAngle++;

            if (this.RadiusFactor >= 1.0 &&
                this.StartAngle >= 360)
            {
                this.isAnimating = false;
            }

            Task.Delay(16).ContinueWith((t) => OnTimerTick());
            this.StateHasChanged();
        }
    }

    public class DataItem
    {
        public string Company { get; set; }
        public double MarketShare { get; set; }
        public string Summary { get { return Company + " " + MarketShare + "%"; } }
    }

}