@* this namespace is required for Infragistics controls *@
@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

    <div class="igContainer">

        <span class="igLegend-title">Global Electricity Demand by Energy Use</span>
        <div class="igLegend">
            <ItemLegend @ref="@Legend" />
        </div>
             
        <div class="igComponent">

            @if (DataSource != null)
            {
                <DoughnutChart Height="100%" Width="100%"
                               @ref="Chart"
                               AllowSliceSelection="true"
                               SliceClick="OnSliceClick">
                    <RingSeries DataSource="@DataSource"
                                LabelMemberPath="Summary"
                                LabelsPosition="@LabelsPosition.OutsideEnd"
                                LabelExtent="30"
                                ValueMemberPath="MarketShare"
                                LegendLabelMemberPath="Company"
                                Outlines="white"
                                SelectedSliceStroke="white"
                                SelectedSliceFill="rgb(143,143,143)"
                                SelectedSliceOpacity="1.0"
                                SelectedSliceStrokeThickness="2"
                                RadiusFactor="0.7"
                                StartAngle="0">
                    </RingSeries>
                </DoughnutChart>
            }

        </div>
    </div>

@code {

    private List<DataItem> DataSource;
    private string SelectedSlices = "";
    public ItemLegend Legend;
    public DoughnutChart Chart;

    protected override void OnInitialized()
    {
        DoughnutChartModule.Register(IgniteUIBlazor);
        ItemLegendModule.Register(IgniteUIBlazor);


        var dataItems = new List<DataItem>();
        dataItems.Add(new DataItem() { MarketShare = 25, Company = "Residential Appliance", });
        dataItems.Add(new DataItem() { MarketShare = 12, Company = "Heating", });
        dataItems.Add(new DataItem() { MarketShare = 8, Company = "Lighting", });
        dataItems.Add(new DataItem() { MarketShare = 18, Company = "Other Services", });
        dataItems.Add(new DataItem() { MarketShare = 37, Company = "Space Cooling", });

        DataSource = dataItems;

    }

    public class DataItem
    {
        public string Company { get; set; }
        public double MarketShare { get; set; }
        public string Summary { get { return Company + " " + MarketShare + "%"; } }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        Chart.ActualSeries[0].Legend = Legend;

    }

    protected void OnSliceClick(SliceClickEventArgs e)
    {
       
    }
}