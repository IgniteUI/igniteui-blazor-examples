@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">

    <div class="options vertical">

        <span class="legend-title">Legend: </span>
        <div class="legend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>

        <div class="overlay-right" >
            <div class="options horizontal" >
                <label class="options-label">Polar Series: </label>
                <select value=@SeriesType @onchange="OnSeriesTypeChanged">
                    <option>Area</option>
                    <option>Spline Area</option>
                    <option>Spline</option>
                    <option>Line</option>
                    <option>Scatter</option>
                </select>
            </div>
        </div>

    </div>

    <div class="container vertical">
        @if (Data != null)
        {
        <DataChart Height="100%" Width="100%"
                   ChartTitle="Sailing Chart"
                   Subtitle="Wind Speed vs. Boat Speed"
                   TitleTopMargin="10"
                   IsHorizontalZoomEnabled="false"
                   IsVerticalZoomEnabled="false"
                   Legend="Legend"
                   @ref="Chart">

            <NumericAngleAxis Name="angleAxis"
                              StartAngleOffset="-90"
                              Interval="30"
                              MinimumValue="0"
                              MaximumValue="360" />
            <NumericRadiusAxis Name="radiusAxis"
                               InnerRadiusExtentScale="0.1"
                               RadiusExtentScale="0.9"
                               MinimumValue="0"
                               MaximumValue="100"
                               Interval="25" />

            @if (SeriesType == "Area")
            {
                <PolarAreaSeries Name="series1"
                                 DataSource="Data"
                                 AngleAxisName="angleAxis"
                                 AngleMemberPath="Direction"
                                 RadiusMemberPath="WindSpeed"
                                 RadiusAxisName="radiusAxis"
                                 ShowDefaultTooltip="true"
                                 AreaFillOpacity="1"
                                 Title="Wind Speed"
                                 MarkerType="MarkerType.Circle" />
                <PolarAreaSeries Name="series2"
                                 DataSource="Data"
                                 AngleAxisName="angleAxis"
                                 AngleMemberPath="Direction"
                                 RadiusMemberPath="BoatSpeed"
                                 RadiusAxisName="radiusAxis"
                                 ShowDefaultTooltip="true"
                                 AreaFillOpacity="1"
                                 Title="Boat Speed"
                                 MarkerType="MarkerType.Circle" />
            }

            @if (SeriesType == "Spline Area")
            {
                <PolarSplineAreaSeries Name="series1"

                    AngleAxisName="angleAxis"
                    AngleMemberPath="Direction"
                    RadiusMemberPath="WindSpeed"
                    RadiusAxisName="radiusAxis"
                    ShowDefaultTooltip="true"
                    AreaFillOpacity="1"
                    Title="Wind Speed"
                    MarkerType="MarkerType.Circle"
                    DataSource="Data" >
                </PolarSplineAreaSeries>

                <PolarSplineAreaSeries Name="series2"

                    AngleAxisName="angleAxis"
                    AngleMemberPath="Direction"
                    RadiusMemberPath="BoatSpeed"
                    RadiusAxisName="radiusAxis"
                    ShowDefaultTooltip="true"
                    AreaFillOpacity="1"
                    Title="Boat Speed"
                    MarkerType="MarkerType.Circle"
                    DataSource="Data">
                </PolarSplineAreaSeries>
            }

            @if (SeriesType == "Spline")
            {
                <PolarSplineSeries AngleMemberPath="Direction"
                                   RadiusMemberPath="BoatSpeed"
                                   RadiusAxisName="radiusAxis"
                                   AngleAxisName="angleAxis"
                                   AreaFillOpacity="1"
                                   MarkerType="MarkerType.Circle"
                                   Title="Boat Speed"
                                   DataSource="Data">
                </PolarSplineSeries>

                <PolarSplineSeries AngleMemberPath="Direction"
                                   RadiusMemberPath="WindSpeed"
                                   RadiusAxisName="radiusAxis"
                                   AngleAxisName="angleAxis"
                                   AreaFillOpacity="1"
                                   MarkerType="MarkerType.Circle"
                                   Title="Wind Speed"
                                   DataSource="Data">
                </PolarSplineSeries>
            }

            @if (SeriesType == "Line")
            {
                <PolarLineSeries AngleMemberPath="Direction"
                                 RadiusMemberPath="BoatSpeed"
                                 RadiusAxisName="radiusAxis"
                                 AngleAxisName="angleAxis"
                                 AreaFillOpacity="1"
                                 MarkerType="MarkerType.Circle"
                                 Title="Boat Speed"
                                 DataSource="Data">
                </PolarLineSeries>

                <PolarLineSeries AngleMemberPath="Direction"
                                 RadiusMemberPath="WindSpeed"
                                 RadiusAxisName="radiusAxis"
                                 AngleAxisName="angleAxis"
                                 AreaFillOpacity="1"
                                 MarkerType="MarkerType.Circle"
                                 Title="Wind Speed"
                                 DataSource="Data">
                </PolarLineSeries>
            }

            @if (SeriesType == "Scatter")
            {
                <PolarScatterSeries AngleMemberPath="Direction"
                        RadiusMemberPath="BoatSpeed"
                        RadiusAxisName="radiusAxis"
                        AngleAxisName="angleAxis"
                        AreaFillOpacity="1"
                        MarkerType="MarkerType.Circle"
                        Title="Boat Speed"
                        DataSource="Data">
                </PolarScatterSeries>

                <PolarScatterSeries AngleMemberPath="Direction"
                        RadiusMemberPath="WindSpeed"
                        RadiusAxisName="radiusAxis"
                        AngleAxisName="angleAxis"
                        AreaFillOpacity="1"
                        MarkerType="MarkerType.Circle"
                        Title="Wind Speed"
                        DataSource="Data">
                </PolarScatterSeries>
            }
        </DataChart>
        }
    </div>
</div>

@code {

    private List<SamplePolarItem> Data;
    private DataChart _Chart;
    private DataChart Chart
    {
        get { return _Chart; }
        set
        {
            _Chart = value;
            SeriesType = "Spline Area";
            StateHasChanged();
        }
    }

    private Legend legend;
    private Legend Legend
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }
    private string seriesType;
    private string SeriesType
    {
        get { return seriesType; }
        set
        {
            seriesType = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartPolarCoreModule.Register(IgniteUIBlazor);
        DataChartPolarModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);

        LegendModule.Register(IgniteUIBlazor);
        Data = SamplePolarData.Create();
    }

    public void OnSeriesTypeChanged(ChangeEventArgs e)
    {
        var selectedSeries = e.Value.ToString();
        SeriesType = selectedSeries;
    }
}