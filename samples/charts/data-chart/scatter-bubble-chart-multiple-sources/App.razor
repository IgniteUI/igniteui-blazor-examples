@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options vertical">
        <span class="legend-title">Total Population for Selected Continents </span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="container vertical">

        <IgbDataChart Height="100%" Width="100%"
                   Legend="Legend"
                   IsHorizontalZoomEnabled="true"
                   IsVerticalZoomEnabled="true">

            <IgbNumericXAxis() Name="xAxis" Title="Death Rate (per 1,000 people)" MinimumValue="4" MaximumValue="16" Interval="1" />
            <IgbNumericYAxis Name="yAxis" Title="Birth Rate (per 1,000 people)" MinimumValue="0" MaximumValue="60" Interval="10" />

            <IgbBubbleSeries XAxisName="xAxis"
                          YAxisName="yAxis"
                          Title="Africa"
                          DataSource="AfricaData"
                          XMemberPath="DeathRate"
                          YMemberPath="BirthRate"
                          RadiusMemberPath="Total"
                          RadiusScale="@SizeScale"
                          MarkerType="MarkerType.Circle">
            </IgbBubbleSeries>

            <IgbBubbleSeries XAxisName="xAxis"
                          YAxisName="yAxis"
                          Title="Europe"
                          DataSource="EuropeData"
                          XMemberPath="DeathRate"
                          YMemberPath="BirthRate"
                          RadiusMemberPath="Total"
                          RadiusScale="@SizeScale"
                          MarkerType="MarkerType.Circle">
            </IgbBubbleSeries>
        </IgbDataChart>

    </div>
</div>

@code {

    private IgbLegend _legend;
    public IgbLegend Legend
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    private List<PopulationInfo> AfricaData;
    private List<PopulationInfo> EuropeData;
    private IgbSizeScale SizeScale = new IgbSizeScale { MinimumValue = 10, MaximumValue = 100 };

    public void InitializeData()
    {
        var data = new PopulationData();

        var comparer = new BubbleSeriesSortComparer();

        this.AfricaData = data.Where(d => d.Continent == "Africa").ToList();
        this.AfricaData.Sort(comparer);

        this.EuropeData = data.Where(d => d.Continent == "Europe").ToList();
        this.EuropeData.Sort(comparer);
    }

    protected override void OnInitialized()
    {
        IgbLegendModule.Register(IgniteUIBlazor);
        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartScatterModule.Register(IgniteUIBlazor);
        IgbDataChartScatterCoreModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbNumberAbbreviatorModule.Register(IgniteUIBlazor);

        InitializeData();
    }

    private class BubbleSeriesSortComparer : IComparer<PopulationInfo>
    {
        public int Compare(PopulationInfo x, PopulationInfo y)
        {
            return y.Total.CompareTo(x.Total);
        }
    }
}