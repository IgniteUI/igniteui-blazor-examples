@using IgniteUI.Blazor.Controls

<div class="container vertical">
    <div class="legend-title">
        Total Population of Selected Countries
    </div>
    <div class="legend">
        <IgbLegend
        Name="legend"
        @ref="legend"
        Orientation="LegendOrientation.Horizontal">
        </IgbLegend>

    </div>
    <div class="container vertical fill">
        <IgbDataChart
        Name="chart"
        @ref="chart">
            <IgbNumericXAxis
            Name="xAxis"
            @ref="xAxis"
            IsLogarithmic="true"
            AbbreviateLargeNumbers="true"
            Title="Population">
            </IgbNumericXAxis>

            <IgbNumericYAxis
            Name="yAxis"
            @ref="yAxis"
            Title="GDP per Capita"
            IsLogarithmic="true"
            AbbreviateLargeNumbers="true">
            </IgbNumericYAxis>

            <IgbBubbleSeries
            Name="bubbleSeries1"
            @ref="bubbleSeries1"
            Title="African Countries"
            XAxisName="xAxis"
            YAxisName="yAxis"
            XMemberPath="Population"
            YMemberPath="GDP"
            RadiusMemberPath="Population"
            DataSource="CountryStatsAfrica"
            MarkerType="MarkerType.Circle"
            ShowDefaultTooltip="true"
            RadiusScale="SizeScale1">
            </IgbBubbleSeries>

            <IgbBubbleSeries
            Name="bubbleSeries2"
            @ref="bubbleSeries2"
            Title="European Countries"
            XAxisName="xAxis"
            YAxisName="yAxis"
            XMemberPath="Population"
            YMemberPath="GDP"
            RadiusMemberPath="Population"
            DataSource="CountryStatsEurope"
            MarkerType="MarkerType.Circle"
            ShowDefaultTooltip="true"
            RadiusScale="SizeScale2">
            </IgbBubbleSeries>

        </IgbDataChart>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var legend = this.legend;
        var chart = this.chart;
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;
        var bubbleSeries1 = this.bubbleSeries1;
        var bubbleSeries2 = this.bubbleSeries2;

        this.BindElements = () => {
            chart.Legend = this.legend;
        };
        this.BindElements();

    }

    private IgbLegend legend;
    private IgbDataChart chart;
    private IgbNumericXAxis xAxis;
    private IgbNumericYAxis yAxis;
    private IgbBubbleSeries bubbleSeries1;
    private IgbSizeScale _sizeScale1 = null;
    public IgbSizeScale SizeScale1
    {
        get
        {
            if (this._sizeScale1 == null)
            {
                var sizeScale1 = new IgbSizeScale();
                sizeScale1.IsLogarithmic = false;
                sizeScale1.MinimumValue = 10;
                sizeScale1.MaximumValue = 50;
                this._sizeScale1 = sizeScale1;
            }
            return this._sizeScale1;
        }
    }
    private IgbBubbleSeries bubbleSeries2;
    private IgbSizeScale _sizeScale2 = null;
    public IgbSizeScale SizeScale2
    {
        get
        {
            if (this._sizeScale2 == null)
            {
                var sizeScale2 = new IgbSizeScale();
                sizeScale2.IsLogarithmic = false;
                sizeScale2.MinimumValue = 10;
                sizeScale2.MaximumValue = 50;
                this._sizeScale2 = sizeScale2;
            }
            return this._sizeScale2;
        }
    }

    private CountryStatsAfrica _countryStatsAfrica = null;
    public CountryStatsAfrica CountryStatsAfrica
    {
        get
        {
            if (_countryStatsAfrica == null)
            {
                _countryStatsAfrica = new CountryStatsAfrica();
            }
            return _countryStatsAfrica;
        }
    }

    private CountryStatsEurope _countryStatsEurope = null;
    public CountryStatsEurope CountryStatsEurope
    {
        get
        {
            if (_countryStatsEurope == null)
            {
                _countryStatsEurope = new CountryStatsEurope();
            }
            return _countryStatsEurope;
        }
    }

}