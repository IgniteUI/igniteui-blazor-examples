@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options horizontal">
        <span class="legend-title">Total Population (Gapminder, HYDE & UN): 1k - 181M </span>
    </div>
    <div class="options horizontal">
        <span class="legend-title">Continent: </span>
        <div class="legend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="container vertical">

        <DataChart Height="100%" Width="100%"
                   Legend="Legend"
                   IsHorizontalZoomEnabled="true"
                   IsVerticalZoomEnabled="true">

            <NumericXAxis Name="xAxis" Title="Death Rate, crude (per 1,000 people)" MinimumValue="2" MaximumValue="16" Interval="1" />
            <NumericYAxis Name="yAxis" Title="Birth Rate, crude (per 1,000 people)" MinimumValue="0" MaximumValue="60" Interval="20" />

            <BubbleSeries XAxisName="xAxis"
                           YAxisName="yAxis"
                           DataSource="AfricaData"
                           XMemberPath="DeathRate"
                           YMemberPath="BirthRate"
                           MarkerType="MarkerType.Circle"
                           Title="Africa"
                           RadiusMemberPath="TotalPopulation"
                           RadiusScale="@SizeScale">
            </BubbleSeries>

            <BubbleSeries XAxisName="xAxis"
                           YAxisName="yAxis"
                           DataSource="EuropeData"
                           XMemberPath="DeathRate"
                           YMemberPath="BirthRate"
                           MarkerType="MarkerType.Circle"
                           Title="Europe"
                           RadiusMemberPath="TotalPopulation"
                           RadiusScale="@SizeScale">
            </BubbleSeries>
        </DataChart>

    </div>
</div>

@code {

    private Legend _legend;
    public Legend Legend
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    private List<BirthAndDeathRateInfo> AfricaData;
    private List<BirthAndDeathRateInfo> EuropeData;
    private ValueBrushScale AfricaFillScale = new ValueBrushScale { Brushes = "rgba(186, 231, 114, 0.75)" };
    private ValueBrushScale EuropeFillScale = new ValueBrushScale { Brushes = "rgba(248, 174, 95, 0.75)" };
    private SizeScale SizeScale = new SizeScale { MinimumValue = 10, MaximumValue = 100 };

    public void InitializeData()
    {
        var data = new BirthAndDeathRateData();

        var comparer = new BubbleSeriesSortComparer();

        this.AfricaData = data.Where(d => d.Continent == "Africa").ToList();
        this.AfricaData.Sort(comparer);

        this.EuropeData = data.Where(d => d.Continent == "Europe").ToList();
        this.EuropeData.Sort(comparer);
    }

    protected override void OnInitialized()
    {
        LegendModule.Register(IgniteUIBlazor);
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartScatterModule.Register(IgniteUIBlazor);
        DataChartScatterCoreModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        NumberAbbreviatorModule.Register(IgniteUIBlazor);

        InitializeData();
    }

    private class BubbleSeriesSortComparer : IComparer<BirthAndDeathRateInfo>
    {
        public int Compare(BirthAndDeathRateInfo x, BirthAndDeathRateInfo y)
        {
            return y.TotalPopulation.CompareTo(x.TotalPopulation);
        }
    }
}