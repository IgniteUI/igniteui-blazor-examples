@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igComponent">
        @if (DataSource != null)
        {
            <DataChart Height="100%" Width="100%">
                <CategoryXAxis Name="xAxis" DataSource="DataSource" Label="Label" Interval="1"  />
                <NumericYAxis Name="yAxis" MinimumValue="20" MaximumValue="120" />
                
                <!-- The onDataChartSeriesMarkerTemplate script is implemented in the wwwroot/DataChartSeriesMarkerTemplate.js file-->
                <ColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource"
                              ValueMemberPath="Value" MarkerTemplateScript="onDataChartSeriesMarkerTemplate" />
            </DataChart>
        }
    </div>
</div>

@code {

    private List<MarkerTemplateDataPoint> DataSource;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);

        // initializing data
        var data = new List<MarkerTemplateDataPoint>();
        var values = new int[] { 80, 50, 75, 100, 80, 40, 80, 75, 80, 85, 50, 85, 50, 75, 100, 80, 40, 80, 75, 80, 85, 50, 85, 50, 75, 100 };

        for (int i = 0; i < values.Length; i++)
        {
            data.Add(new MarkerTemplateDataPoint() { Label = i.ToString(), Value = values[i] });
        }

        this.DataSource = data;
    }

    public class MarkerTemplateDataPoint
    {
        public string Label { get; set; }
        public int Value { get; set; }
    }
}
