@using IgniteUI.Blazor.Controls;

@inject IIgniteUIBlazor IgniteUIBlazor
@inject IJSRuntime JS

<div class="container vertical">
    <div class="legend-title">
        Monthly Temperature Range in LA and NYC
    </div>
    <div class="legend">
        <IgbLegend
        Orientation="LegendOrientation.Horizontal"
        Name="Legend"
        @ref="legend">
        </IgbLegend>
        
    </div>

    <div class="container vertical fill">
        <IgbDataChart
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        Name="chart"
        @ref="chart">
            <IgbCategoryXAxis
            Interval="1"
            DataSource="TemperatureRangeData"
            Label="Month"
            Name="xAxis"
            @ref="xAxis">
            </IgbCategoryXAxis>
            
            <IgbNumericYAxis
            Title="Temperature (in Celsius)"
            TitleAngle="90"
            TitleLeftMargin="10"
            Name="yAxis"
            @ref="yAxis">
            </IgbNumericYAxis>
            
            <IgbRangeColumnSeries
            XAxisName="xAxis"
            YAxisName="yAxis"
            LowMemberPath="LowLA"
            HighMemberPath="HighLA"
            DataSource="TemperatureRangeData"
            ShowDefaultTooltip="false"
            Title="Los Angeles"
            Name="RangeColumnSeries1"
            @ref="rangeColumnSeries1">
            </IgbRangeColumnSeries>
            
            <IgbRangeColumnSeries
            XAxisName="xAxis"
            YAxisName="yAxis"
            Title="New York"
            LowMemberPath="LowNY"
            HighMemberPath="HighNY"
            ShowDefaultTooltip="false"
            DataSource="TemperatureRangeData"
            Name="RangeColumnSeries2"
            @ref="rangeColumnSeries2">
            </IgbRangeColumnSeries>
            
            <IgbDataToolTipLayer
            Name="DataToolTipLayer"
            @ref="dataToolTipLayer">
            </IgbDataToolTipLayer>
            
        </IgbDataChart>
        
    </div>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {

    }

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var legend = this.legend;
        var chart = this.chart;
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;
        var rangeColumnSeries1 = this.rangeColumnSeries1;
        var rangeColumnSeries2 = this.rangeColumnSeries2;
        var dataToolTipLayer = this.dataToolTipLayer;

        this.BindElements = () => {
            chart.Legend = this.legend;
        };
        this.BindElements();


	}

    private IgbLegend legend;
    private IgbDataChart chart;
    private IgbCategoryXAxis xAxis;
    private IgbNumericYAxis yAxis;
    private IgbRangeColumnSeries rangeColumnSeries1;
    private IgbRangeColumnSeries rangeColumnSeries2;
    private IgbDataToolTipLayer dataToolTipLayer;

    private TemperatureRangeData _temperatureRangeData = null;
    public TemperatureRangeData TemperatureRangeData
    {
        get
        {
            if (_temperatureRangeData == null)
            {
                _temperatureRangeData = new TemperatureRangeData(); 
            }
            return _temperatureRangeData;
        }
    }
    
}