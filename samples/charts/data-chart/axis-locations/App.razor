@page "/DataChartAxisLocations"

@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions-horizontal">
        <span class="igLegend-title">Legend: </span>
        <div class="igLegend">
            <Legend @ref="LegendRef" Orientation="LegendOrientation.Horizontal"/>
        </div>
    </div>

    <div class="igComponent">        
        @if (DataSource != null)
        {
            <DataChart Height="100%" Width="100%" ChartTitle="Company Financial Projections" IsVerticalZoomEnabled="true"
                       IsHorizontalZoomEnabled="true" Legend="@LegendRef">           
                <CategoryXAxis Name="xAxisYears" DataSource="DataSource" Interval="12" LabelLocation="AxisLabelsLocation.OutsideBottom"
                               Overlap="1" Gap="0.4" Label="Year" LabelTextColor="Gray" TickLength="0" />
                <CategoryXAxis Name="xAxisMonths" DataSource="DataSource" Overlap="1" Gap="0.4" Interval="1"
                               LabelLocation="AxisLabelsLocation.OutsideBottom" Label="Month" LabelTextColor="Gray" />
                <NumericYAxis Name="yAxisLeft" Title="Expense | Revenue" TitleTextColor="Gray" MinimumValue="-900"
                              MaximumValue="900" LabelTextColor="Gray" Interval="300" />
                <NumericYAxis Name="yAxisRight" Title="Profit (%)" TitleTextColor="Gray" MinimumValue="0" MaximumValue="100"
                              LabelLocation="AxisLabelsLocation.OutsideRight" MajorStrokeThickness="0" LabelTextColor="Gray"
                              LabelHorizontalAlignment="HorizontalAlignment.Left" TitleVerticalAlignment="VerticalAlignment.Center" />

                <ColumnSeries Title="Revenue" DataSource="DataSource" ValueMemberPath="Revenue" Brush="#9B58E2" Outline="#9B58E2"
                              XAxisName="xAxisMonths" YAxisName="yAxisLeft" IsTransitionInEnabled="true" ShowDefaultTooltip="true" />
                <ColumnSeries Title="Expense" DataSource="DataSource" ValueMemberPath="Expense" Brush="#F23030" Outline="#F23030"
                              XAxisName="xAxisMonths" YAxisName="yAxisLeft" IsTransitionInEnabled="true" ShowDefaultTooltip="true" />
                <ColumnSeries Title="Profit" DataSource="DataSource" ValueMemberPath="Profit" Brush="#48BA39" Outline="#48BA39"
                              XAxisName="xAxisYears" YAxisName="yAxisRight" IsTransitionInEnabled="true" ShowDefaultTooltip="true" />
            </DataChart>
        }

    </div>
</div>

@code {

    private List<FinancialItem> DataSource;

    private Legend legend;
    private Legend LegendRef
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);

        this.InitData();
    }

    Random r = new Random();
    private void InitData()
    {
        var items = new List<FinancialItem>();

        string[] months = new string[] { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

        double revenue = 200;
        double profit = 15;
        double expense = 0;

        int year = 2020;
        int month = 0;

        for(int i=0; i<25; i++)
        {
            revenue += r.NextDouble() * 50 - 20;
            profit += r.NextDouble() * 4.0 - 2.0;
            expense = revenue - (revenue * profit / 100);

            items.Add(new FinancialItem()
            {
                Expense = Math.Round(-expense),
                Month = months[month],
                Profit = Math.Round(profit),
                Revenue = Math.Round(revenue),
                Year = year
            });

            month++;
            if(month >= 12)
            {
                month = 0;
                year++;
            }
        }

        this.DataSource = items;
    }



    private class FinancialItem
    {
        public double Expense { get; set; }
        public string Month { get; set; }
        public double Profit { get; set; }
        public double Revenue { get; set; }
        public int Year { get; set; }
    }
}
