@page "/DataChartTypeStacked100ColumnSeries"

@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Distribution of Online Traffic Worldwide in 2019, by Device</span>        
        <div class="igLegend">
            <Legend @ref="LegendRef" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="igComponent">
        @if (DataSource != null)
        {
            <DataChart Height="100%" Width="100%" IsVerticalZoomEnabled="false" IsHorizontalZoomEnabled="false">
                <CategoryXAxis Name="xAxis" DataSource="DataSource" Label="Category" Gap="0.75"/>
                <NumericYAxis Name="yAxis" MinimumValue="0" />

                <Stacked100ColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ShowDefaultTooltip="true" AreaFillOpacity="1" Legend="LegendRef">
                    <StackedFragmentSeries ValueMemberPath="Desktop" />
                    <StackedFragmentSeries ValueMemberPath="Mobile" />
                    <StackedFragmentSeries ValueMemberPath="Tablet" />
                </Stacked100ColumnSeries>

                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ValueMemberPath="DesktopMarker"
                             MarkerTemplateScript="onStacked100ChartMarkerTemplate" Title="THING" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ValueMemberPath="MobileMarker"
                             MarkerTemplateScript="onStacked100ChartMarkerTemplate" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ValueMemberPath="TabletMarker"
                             MarkerTemplateScript="onStacked100ChartMarkerTemplate" />
            </DataChart>
        }
    </div>
</div>

@code {

    private Legend _legend;
    public Legend LegendRef
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    private List<StackedOnlineTrafficInfo> DataSource = new StackedOnlineTrafficData();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartStackedModule.Register(IgniteUIBlazor);
        ColumnFragmentModule.Register(IgniteUIBlazor);
        StackedSplineSeriesModule.Register(IgniteUIBlazor);
        StackedFragmentSeriesModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);
    }
}
