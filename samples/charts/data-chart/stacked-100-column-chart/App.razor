@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="container vertical">
    <div class="options vertical">
        <span class="legend-title">Distribution of Online Traffic Worldwide in 2019, by Device</span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="container vertical">
        @if (Data != null)
        {
            <IgbDataChart Height="100%" Width="100%" IsVerticalZoomEnabled="false" IsHorizontalZoomEnabled="false">
                <IgbCategoryXAxis Name="xAxis" DataSource="Data" Label="Category" Gap="0.75"/>
                <IgbNumericYAxis Name="yAxis" MinimumValue="0" />

                <Stacked100ColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="true" AreaFillOpacity="1" Legend="Legend">
                    <StackedFragmentSeries ValueMemberPath="Desktop" />
                    <StackedFragmentSeries ValueMemberPath="Mobile" />
                    <StackedFragmentSeries ValueMemberPath="Tablet" />
                </Stacked100ColumnSeries>

                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ValueMemberPath="DesktopMarker"
                             MarkerTemplateScript="onStacked100ChartMarkerTemplate" Title="THING" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ValueMemberPath="MobileMarker"
                             MarkerTemplateScript="onStacked100ChartMarkerTemplate" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ValueMemberPath="TabletMarker"
                             MarkerTemplateScript="onStacked100ChartMarkerTemplate" />
            </IgbDataChart>
        }
    </div>
</div>

@code {

    private IgbLegend _legend;
    public IgbLegend Legend
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    private List<StackedOnlineTrafficInfo> Data = new StackedOnlineTrafficData();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbDataChartStackedModule.Register(IgniteUIBlazor);
        IgbColumnFragmentModule.Register(IgniteUIBlazor);
        IgbStackedSplineSeriesModule.Register(IgniteUIBlazor);
        IgbStackedFragmentSeriesModule.Register(IgniteUIBlazor);
        IgbLegendModule.Register(IgniteUIBlazor);
    }
}
