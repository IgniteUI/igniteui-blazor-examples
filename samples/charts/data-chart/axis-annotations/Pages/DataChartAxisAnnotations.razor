@page "/DataChartAxisAnnotations"

@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <span class="igOptions-item">Annotations: </span>
        <label class="igOptions-item">
            <input type="checkbox" checked="true" @onchange="OnFinalValueCheckboxChange"/>Final Value
        </label>
        <label class="igOptions-item">
            <input type="checkbox" checked="true" @onchange="OnCrosshairsCheckboxChange"/>Crosshairs
        </label>
        <label class="igOptions-item">
            <input type="checkbox" checked="true" @onchange="OnValueOverlayCheckboxChange"/>Value Overlay
        </label>
    </div>

    <div class="igComponent">        
        @if (DataSource != null)
        {
            <DataChart Height="100%" Width="100%" IsVerticalZoomEnabled="true" IsHorizontalZoomEnabled="true" @ref="DataChartRef">
                <CategoryXAxis Name="xAxis" DataSource="DataSource" Label="Label" Interval="1"/>
                <NumericYAxis Name="yAxis" Interval="20" MinimumValue="70" MaximumValue="110"
                              LabelLocation="AxisLabelsLocation.OutsideRight" />

                <ColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ValueMemberPath="Temperature"/>

                <CrosshairLayer IsAxisAnnotationEnabled="true" YAxisAnnotationInterpolatedValuePrecision="0" @ref="CrosshairRef"/>
                <FinalValueLayer @ref="FinalValueRef"/>
                <ValueOverlay AxisName="yAxis" Thickness="3" Brush="Orange" IsAxisAnnotationEnabled="true" Value="85" @ref="ValueOverlayRef"/>

            </DataChart>
        }
    </div>
</div>

@code {

    private List<TemperatureItem> DataSource;
    private DataChart DataChartRef;
    private CrosshairLayer CrosshairRef;
    private FinalValueLayer FinalValueRef;
    private ValueOverlay ValueOverlayRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartAnnotationModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        CrosshairLayerModule.Register(IgniteUIBlazor);
        FinalValueLayerModule.Register(IgniteUIBlazor);
        ValueOverlayModule.Register(IgniteUIBlazor);
        AnnotationLayerProxyModule.Register(IgniteUIBlazor);

        this.InitData();
    }

    private void InitData()
    {
        int year = new DateTime().Year;

        this.DataSource = new List<TemperatureItem>() {
            new TemperatureItem(){Label = "JAN", Temperature= 74, Date= new DateTime(year, 1, 1) },
            new TemperatureItem(){Label = "FEB", Temperature= 74, Date= new DateTime(year, 2, 1) },
            new TemperatureItem(){Label = "MAR", Temperature= 76, Date= new DateTime(year, 3, 1) },
            new TemperatureItem(){Label = "APR", Temperature= 78, Date= new DateTime(year, 4, 1) },
            new TemperatureItem(){Label = "MAY", Temperature= 83, Date= new DateTime(year, 5, 1) },
            new TemperatureItem(){Label = "JUN", Temperature= 87, Date= new DateTime(year, 6, 1) },
            new TemperatureItem(){Label = "JUL", Temperature= 94, Date= new DateTime(year, 7, 1) },
            new TemperatureItem(){Label = "AUG", Temperature= 97, Date= new DateTime(year, 8, 1) },
            new TemperatureItem(){Label = "SEP", Temperature= 93, Date= new DateTime(year, 9, 1) },
            new TemperatureItem(){Label = "OCT", Temperature= 86, Date= new DateTime(year, 10, 1) },
            new TemperatureItem(){Label = "NOV", Temperature= 81, Date= new DateTime(year, 11, 1) },
            new TemperatureItem(){Label = "DEC", Temperature= 79, Date= new DateTime(year, 12, 1) }
        };
    }

    private void OnFinalValueCheckboxChange(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.DataChartRef.ActualSeries.Add(this.FinalValueRef);
        }
        else
        {
            this.DataChartRef.ActualSeries.Remove(this.FinalValueRef);
        }
    }

    private void OnCrosshairsCheckboxChange(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.DataChartRef.ActualSeries.Add(this.CrosshairRef);
        }
        else
        {
            this.DataChartRef.ActualSeries.Remove(this.CrosshairRef);
        }

    }

    private void OnValueOverlayCheckboxChange(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.DataChartRef.ActualSeries.Add(this.ValueOverlayRef);
        }
        else
        {
            this.DataChartRef.ActualSeries.Remove(this.ValueOverlayRef);
        }
    }

    private class TemperatureItem
    {
        public double Temperature { get; set; }
        public DateTime Date { get; set; }
        public string Label { get; set; }
    }
}
