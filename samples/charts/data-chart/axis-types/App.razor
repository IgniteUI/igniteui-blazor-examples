@page "/DataChartAxisTypes"

@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions-horizontal">
        <span class="igOptions-item">Axis Type:</span>
        <select @onchange="OnAxisTypeChanged">
            <option>CategoryXAxis with Column Series</option>
            <option>CategoryYAxis with Bar Series</option>
            <option>NumericXAxis with Scatter Series</option>
            <option>TimeXAxis with Financial Series</option>
        </select>
    </div>

    <div class="igComponent">
        <DataChart Height="100%" Width="100%"
                   @ref="DataChartRef"
                   IsHorizontalZoomEnabled="true"
                   IsVerticalZoomEnabled="true" />
    </div>
</div>

@code {

    private List<SampleCategoryItem> CategoryData;
    private List<SampleFinancialItem> FinancialData;
    private List<SampleScatterPoint> ScatterData;

    private NumericXAxis NumericXAxis;
    private NumericYAxis NumericYAxis;

    private CategoryXAxis CategoryXAxis;
    private CategoryYAxis CategoryYAxis;

    private TimeXAxis TimeXAxis;

    private ColumnSeries ColumnSeries1;
    private ColumnSeries ColumnSeries2;

    private BarSeries BarSeries1;
    private BarSeries BarSeries2;

    private ScatterSeries ScatterSeries1;
    private ScatterSeries ScatterSeries2;

    private FinancialPriceSeries FinancialSeries;

    private DataChart _chart;
    private DataChart DataChartRef
    {
        get { return _chart; }
        set
        {
            _chart = value;
            this.OnDataChartRef();

            value.Axes.Add(this.CategoryXAxis);
            value.Axes.Add(this.NumericYAxis);

            value.Series.Add(this.ColumnSeries1);
            value.Series.Add(this.ColumnSeries2);

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartScatterCoreModule.Register(IgniteUIBlazor);
        DataChartScatterModule.Register(IgniteUIBlazor);
        DataChartFinancialModule.Register(IgniteUIBlazor);
        DataChartFinancialCoreModule.Register(IgniteUIBlazor);
        DataChartVerticalCategoryModule.Register(IgniteUIBlazor);
        TimeXAxisModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
    }

    private void OnDataChartRef()
    {
        this.InitData();
        this.InitAxes();
        this.InitCategorySeries();
        this.InitScatterSeries();
        this.InitFinancialSeries();
    }

    public void InitCategorySeries()
    {
        this.ColumnSeries1 = new ColumnSeries()
        {
            DataSource = this.CategoryData,
            XAxis = this.CategoryXAxis,
            YAxis = this.NumericYAxis,
            XAxisName = "CategoryXAxis",
            YAxisName = "NumericYAxis",
            ValueMemberPath = "USA"
        };

        this.ColumnSeries2 = new ColumnSeries()
        {
            DataSource = this.CategoryData,
            XAxis = this.CategoryXAxis,
            YAxis = this.NumericYAxis,
            XAxisName = "CategoryXAxis",
            YAxisName = "NumericYAxis",
            ValueMemberPath = "RUS"
        };

        this.BarSeries1 = new BarSeries()
        {
            DataSource = this.CategoryData,
            XAxis = this.NumericXAxis,
            YAxis = this.CategoryYAxis,
            XAxisName = "NumericXAxis",
            YAxisName = "CategoryYAxis",
            ValueMemberPath = "USA"
        };

        this.BarSeries2 = new BarSeries()
        {
            DataSource = this.CategoryData,
            XAxis = this.NumericXAxis,
            YAxis = this.CategoryYAxis,
            XAxisName = "NumericXAxis",
            YAxisName = "CategoryYAxis",
            ValueMemberPath = "RUS"
        };
    }

    public void InitAxes()
    {
        this.CategoryXAxis = new CategoryXAxis()
        {
            Name = "CategoryXAxis",
            Title = "Category X Axis",
            DataSource = this.CategoryData,
            Label = "Year"
        };

        this.CategoryYAxis = new CategoryYAxis()
        {
            Name = "CategoryYAxis",
            Title = "Category Y Axis",
            DataSource = this.CategoryData,
            Label = "Year"
        };

        this.NumericXAxis = new NumericXAxis() { Name = "NumericXAxis", Title = "Numeric X Axis" };
        this.NumericYAxis = new NumericYAxis() { Name = "NumericYAxis", Title = "Numeric Y Axis" };

        this.TimeXAxis = new TimeXAxis()
        {
            Name = "TimeXAxis",
            Title = "Time X Axis",
            DataSource = this.FinancialData,
            DateTimeMemberPath = "Time",
            Label = "Date"
        };
    }

    public void InitFinancialSeries()
    {
        this.FinancialSeries = new FinancialPriceSeries()
        {  //MAY BE MISSING NAME IF THIS DOESN'T WORK...
            DataSource = this.FinancialData,
            XAxis = this.TimeXAxis,
            YAxis = this.NumericYAxis,
            XAxisName = "TimeXAxis",
            YAxisName = "NumericYAxis",
            HighMemberPath = "High",
            LowMemberPath = "Low",
            CloseMemberPath = "Close",
            OpenMemberPath = "Open",
            VolumeMemberPath = "Volume"
        };
    }

    public void InitScatterSeries()
    {
        this.ScatterSeries1 = new ScatterSeries() {
            DataSource = this.ScatterData,
            XAxis = this.NumericXAxis,
            YAxis = this.NumericYAxis,
            XAxisName = "NumericXAxis",
            YAxisName = "NumericYAxis",
            XMemberPath = "Index",
            YMemberPath = "SinValue"
        };

        this.ScatterSeries2 = new ScatterSeries() {
            DataSource = this.ScatterData,
            XAxis = this.NumericXAxis,
            YAxis = this.NumericYAxis,
            XAxisName = "NumericXAxis",
            YAxisName = "NumericYAxis",
            XMemberPath = "Index",
            YMemberPath = "CosValue"
        };
    }

    public void InitData()
    {
        this.CategoryData = SampleCategoryData.Create();
        this.ScatterData = SampleScatterData.CreateWaveData();
        this.FinancialData = SampleFinancialData.Create();
    }

    private void OnAxisTypeChanged(ChangeEventArgs e)
    {
        this.DataChartRef.Axes.Clear();
        this.DataChartRef.Series.Clear();

        string value = e.Value.ToString();

        if (value.Contains("Column"))
        {
            this.DataChartRef.Axes.Add(this.CategoryXAxis);
            this.DataChartRef.Axes.Add(this.NumericYAxis);

            this.DataChartRef.Series.Add(this.ColumnSeries1);
            this.DataChartRef.Series.Add(this.ColumnSeries2);
        }
        else if (value.Contains("Bar"))
        {
            this.DataChartRef.Axes.Add(this.CategoryYAxis);
            this.DataChartRef.Axes.Add(this.NumericXAxis);

            this.DataChartRef.Series.Add(this.BarSeries1);
            this.DataChartRef.Series.Add(this.BarSeries2);
        }
        else if (value.Contains("Scatter"))
        {
            this.DataChartRef.Axes.Add(this.NumericXAxis);
            this.DataChartRef.Axes.Add(this.NumericYAxis);

            this.DataChartRef.Series.Add(this.ScatterSeries1);
            this.DataChartRef.Series.Add(this.ScatterSeries2);
        }
        else
        {
            this.DataChartRef.Axes.Add(this.TimeXAxis);
            this.DataChartRef.Axes.Add(this.NumericYAxis);

            this.DataChartRef.Series.Add(this.FinancialSeries);
        }

        StateHasChanged();
    }
}

