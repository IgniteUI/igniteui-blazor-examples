@using IgniteUI.Blazor.Controls

@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
	
	<div class="legend-title">
        GDP per Capita vs Hours Worked per Week
    </div>
	
    <div class="container vertical fill">
        <IgbDataChart
        Name="chart"
        @ref="chart">
            <IgbNumericXAxis
            Title="Hours Worked per Week"
            Name="xAxis"
            @ref="xAxis">
            </IgbNumericXAxis>
            <IgbNumericYAxis
            IsLogarithmic="false"
            AbbreviateLargeNumbers="true"
            Title="GDP per Capita"
            Name="yAxis"
            @ref="yAxis">
            </IgbNumericYAxis>
            <IgbBubbleSeries
            RadiusMemberPath="Population"
            XAxisName="xAxis"
            YAxisName="yAxis"
            XMemberPath="WorkedHours"
            YMemberPath="GDP"
            MarkerType="MarkerType.Circle"
            DataSource="CountryDemographicEurope"
            ShowDefaultTooltip="true"
            Title="European Countries"
            Name="BubbleSeries1"
            @ref="bubbleSeries1">
            </IgbBubbleSeries>
        </IgbDataChart>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
    }

	private Action BindElements { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		var chart = this.chart;
		var xAxis = this.xAxis;
		var yAxis = this.yAxis;
		var bubbleSeries1 = this.bubbleSeries1;

        this.BindElements = () => {
        };
        this.BindElements();
	}

	private IgbDataChart chart;
	private IgbNumericXAxis xAxis;
	private IgbNumericYAxis yAxis;
	private IgbBubbleSeries bubbleSeries1;


    private SizeScaleItem _sizeScale = null;
    public SizeScaleItem SizeScale
    {
        get
        {
            if (_sizeScale == null)
            {
                _sizeScale = 
                new SizeScaleItem()
                {
                    type = @"SizeScale",
                    minimumValue = 10,
                    maximumValue = 50
                }}
            return _sizeScale;
        }
    }
    
    private CountryDemographicEurope _countryDemographicEurope = null;
    public CountryDemographicEurope CountryDemographicEurope
    {
        get
        {
            if (_countryDemographicEurope == null)
            {
                _countryDemographicEurope = new CountryDemographicEurope(); 
            }
            return _countryDemographicEurope;
        }
    }
    
}