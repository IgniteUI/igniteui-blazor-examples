@using IgniteUI.Blazor.Controls

<div class="container vertical">
    <div class="legend-title">
        Total Population of Selected Countries
    </div>
    <div class="container vertical fill">
        <IgbDataChart
        Name="chart"
        @ref="chart">
            <IgbNumericXAxis
            Name="xAxis"
            @ref="xAxis"
            Title="Population"
            IsLogarithmic="true"
            AbbreviateLargeNumbers="true">
            </IgbNumericXAxis>

            <IgbNumericYAxis
            Name="yAxis"
            @ref="yAxis"
            Title="Public Debt"
            IsLogarithmic="false"
            AbbreviateLargeNumbers="true"
            MaximumValue="120">
            </IgbNumericYAxis>

            <IgbBubbleSeries
            Name="BubbleSeries1"
            @ref="bubbleSeries1"
            XMemberPath="Population"
            YMemberPath="PublicDebt"
            RadiusMemberPath="GdpPerCapita"
            RadiusScale="SizeScale1"
            FillMemberPath="GdpPerCapita"
            XAxisName="xAxis"
            YAxisName="yAxis"
            DataSource="WorldDebtAndPopulation"
            MarkerType="MarkerType.Circle"
            ShowDefaultTooltip="true">
            </IgbBubbleSeries>

            <IgbDataToolTipLayer
            Name="DataToolTipLayer"
            @ref="dataToolTipLayer">
            </IgbDataToolTipLayer>

        </IgbDataChart>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var chart = this.chart;
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;
        var bubbleSeries1 = this.bubbleSeries1;
        var dataToolTipLayer = this.dataToolTipLayer;

    }

    private IgbDataChart chart;
    private IgbNumericXAxis xAxis;
    private IgbNumericYAxis yAxis;
    private IgbBubbleSeries bubbleSeries1;
    private IgbSizeScale _sizeScale1 = null;
    public IgbSizeScale SizeScale1
    {
        get
        {
            if (this._sizeScale1 == null)
            {
                var sizeScale1 = new IgbSizeScale();
                sizeScale1.IsLogarithmic = false;
                sizeScale1.MinimumValue = 10;
                sizeScale1.MaximumValue = 50;
                this._sizeScale1 = sizeScale1;
            }
            return this._sizeScale1;
        }
    }
    private IgbDataToolTipLayer dataToolTipLayer;

    private WorldDebtAndPopulation _worldDebtAndPopulation = null;
    public WorldDebtAndPopulation WorldDebtAndPopulation
    {
        get
        {
            if (_worldDebtAndPopulation == null)
            {
                _worldDebtAndPopulation = new WorldDebtAndPopulation();
            }
            return _worldDebtAndPopulation;
        }
    }

}