@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">

    <div class="igOptions-horizontal">
        <span class="igOptions-label">Type of Polar Series: </span>
        <select value=@SeriesType
                @onchange="OnSeriesTypeChanged">
            <option>Area</option>
            <option>Column</option>
            <option>Pie</option>
            <option>Line</option>
        </select>

        <span class="igLegend-title">Legend: </span>
        <div class="igLegend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="igComponent">
        @if (DataSource != null)
        {
        <DataChart Height="100%" Width="100%"
                   GridMode="GridMode.BeforeSeries"
                   ChartTitle="Company Finances by Department"
                   Subtitle="Wind Speed vs. Boat Speed"
                   TitleTopMargin="10"
                   IsHorizontalZoomEnabled="false"
                   IsVerticalZoomEnabled="false"
                   Brushes="#9FB328, #7446B9"
                   Outlines="#9FB328, #7446B9"
                   Legend="Legend"
                   @ref="DataChartRef">

            <CategoryAngleAxis Name="angleAxis"
                               Label="Department"
                               DataSource="@DataSource" />
            <NumericRadiusAxis Name="radiusAxis"
                               InnerRadiusExtentScale="0.1"
                               MinimumValue="0" />

            @if (SeriesType == "Area")
            {
                <RadialAreaSeries
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    Title="Budget"
                    DataSource = "@DataSource">
                </RadialAreaSeries>
            }

            @if (SeriesType == "Column")
            {
                <RadialColumnSeries
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    Title="Budget"
                    DataSource = "@DataSource">
                </RadialColumnSeries>
            }

            @if (SeriesType == "Pie")
            {
                <RadialPieSeries
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    Title="Budget"
                    DataSource = "@DataSource">
                </RadialPieSeries>
            }

            @if (SeriesType == "Line")
            {
                <RadialLineSeries
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    Title="Budget"
                    DataSource = "@DataSource">
                </RadialLineSeries>
            }
        </DataChart>
        }
    </div>
</div>

@code {

    private List<SampleRadialItem> DataSource;
    private DataChart dataChart;
    private DataChart DataChartRef
    {
        get { return dataChart; }
        set
        {
            dataChart = value;
            SeriesType = "Pie";
            StateHasChanged();
        }
    }

    private Legend legend;
    private Legend Legend
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }
    private string seriesType;
    private string SeriesType
    {
        get { return seriesType; }
        set
        {
            seriesType = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartRadialCoreModule.Register(IgniteUIBlazor);
        DataChartRadialModule.Register(IgniteUIBlazor);
        DataChartExtendedAxesModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);

        LegendModule.Register(IgniteUIBlazor);
        DataSource = SampleRadialData.Create();
    }

    public void OnSeriesTypeChanged(ChangeEventArgs e)
    {
        var selectedSeries = e.Value.ToString();
        SeriesType = selectedSeries;
    }
}