@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options vertical">
        <span class="legend-title">Electricity Production from Renewables</span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="container vertical">
        @if (Data != null)
        {
            <IgbDataChart Height="100%" Width="100%" IsVerticalZoomEnabled="false" IsHorizontalZoomEnabled="false">
                <IgbCategoryXAxis Name="xAxis" DataSource="Data" Label="Year" Gap="0.75" />
                <IgbNumericYAxis Name="yAxis" MinimumValue="0" MaximumValue="300" Interval="50" Title="TWh" TitleLeftMargin="10" />

                <StackedColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="true" Legend="Legend">
                    <StackedFragmentSeries ValueMemberPath="USA" />
                    <StackedFragmentSeries ValueMemberPath="Europe" />
                    <StackedFragmentSeries ValueMemberPath="China" />
                </StackedColumnSeries>

                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ValueMemberPath="USAMarker"
                             MarkerTemplateScript="onStackedChartMarkerTemplate" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ValueMemberPath="EuropeMarker"
                             MarkerTemplateScript="onStackedChartMarkerTemplate" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ValueMemberPath="ChinaMarker"
                             MarkerTemplateScript="onStackedChartMarkerTemplate" />

                <CalloutLayer DataSource="CalloutData" XMemberPath="X" YMemberPath="Y" LabelMemberPath="Label"
                              CalloutBackground="Transparent" CalloutLeaderBrush="Transparent" CalloutTextColor="Black" />

            </IgbDataChart>
        }
    </div>
</div>

@code {

    private IgbLegend _legend;
    public IgbLegend Legend
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    public List<RenewableElectricityStackedInfo> Data = new RenewableElectricityStackedData();
    public List<CalloutInfo> CalloutData { get; set; }

    protected override void OnInitialized()
    {

        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbDataChartStackedModule.Register(IgniteUIBlazor);
        IgbColumnFragmentModule.Register(IgniteUIBlazor);
        IgbStackedSplineSeriesModule.Register(IgniteUIBlazor);
        IgbStackedFragmentSeriesModule.Register(IgniteUIBlazor);
        IgbCalloutLayerModule.Register(IgniteUIBlazor);
        IgbLegendModule.Register(IgniteUIBlazor);

        this.CalloutData = new List<CalloutInfo>();

        for (int i = 0; i < this.Data.Count; i++)
        {
            var item = this.Data[i];
            this.CalloutData.Add(new CalloutInfo() { X = i, Y = item.Sum, Label = item.Sum.ToString() });
        }

    }

    public class CalloutInfo
    {
        public int X { get; set; }
        public double Y { get; set; }
        public string Label { get; set; }
    }
}