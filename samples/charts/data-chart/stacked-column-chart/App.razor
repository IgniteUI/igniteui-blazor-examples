@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Electricity Production from Renewables</span>
        <div class="igLegend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="igComponent">
        @if (DataSource != null)
        {
            <DataChart Height="100%" Width="100%" IsVerticalZoomEnabled="false" IsHorizontalZoomEnabled="false">
                <CategoryXAxis Name="xAxis" DataSource="DataSource" Label="Year" Gap="0.75" />
                <NumericYAxis Name="yAxis" MinimumValue="0" MaximumValue="300" Interval="50" Title="TWh" TitleLeftMargin="10" />

                <StackedColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ShowDefaultTooltip="true" Legend="Legend">
                    <StackedFragmentSeries ValueMemberPath="USA" />
                    <StackedFragmentSeries ValueMemberPath="Europe" />
                    <StackedFragmentSeries ValueMemberPath="China" />
                </StackedColumnSeries>

                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ValueMemberPath="USAMarker"
                             MarkerTemplateScript="onStackedChartMarkerTemplate" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ValueMemberPath="EuropeMarker"
                             MarkerTemplateScript="onStackedChartMarkerTemplate" />
                <PointSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ValueMemberPath="ChinaMarker"
                             MarkerTemplateScript="onStackedChartMarkerTemplate" />

                <CalloutLayer DataSource="CalloutDataSource" XMemberPath="X" YMemberPath="Y" LabelMemberPath="Label"
                              CalloutBackground="Transparent" CalloutLeaderBrush="Transparent" CalloutTextColor="Black" />

            </DataChart>
        }
    </div>
</div>

@code {

    private Legend _legend;
    public Legend Legend
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    public List<RenewableElectricityStackedInfo> DataSource = new RenewableElectricityStackedData();
    public List<CalloutData> CalloutDataSource { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartStackedModule.Register(IgniteUIBlazor);
        ColumnFragmentModule.Register(IgniteUIBlazor);
        StackedSplineSeriesModule.Register(IgniteUIBlazor);
        StackedFragmentSeriesModule.Register(IgniteUIBlazor);
        CalloutLayerModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);

        this.CalloutDataSource = new List<CalloutData>();

        for(int i=0; i<this.DataSource.Count; i++)
        {
            var item = this.DataSource[i];
            this.CalloutDataSource.Add(new CalloutData() { X = i, Y = item.Sum, Label = item.Sum.ToString() });
        }

    }

    public class CalloutData
    {
        public int X { get; set; }
        public double Y { get; set; }
        public string Label { get; set; }
    }
}
