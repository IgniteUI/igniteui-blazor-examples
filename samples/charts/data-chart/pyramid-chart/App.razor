@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Population Demographic of Africa by Age</span>
        <div class="igLegend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="igContainer-horizontal" >
         <DataChart Height="100%" Width="100%"  @ref="Chart1"          
                    IsHorizontalZoomEnabled="false" GridMode="GridMode.BeforeSeries"
                    IsVerticalZoomEnabled="false">
             <NumericXAxis  Name="xAxis" Title="Males (Millions)" IsInverted="true" />
             <CategoryYAxis Name="yAxis" Label="Age" DataSource="@DataSource" Gap="0.4" Interval="1"
                            LabelLocation="AxisLabelsLocation.OutsideRight" 
                            LabelTextColor="Transparent" LabelExtent="10" />
             <BarSeries XAxisName="xAxis"
                        YAxisName="yAxis" Brush="#1885F7" Outline="#1885F7"
                        DataSource="@DataSource"
                        ValueMemberPath="Male" Title="Males"
                        ShowDefaultTooltip="true"
                        IsTransitionInEnabled="true"
                        IsHighlightingEnabled="true">
             </BarSeries>                
         </DataChart> 
         <DataChart Height="100%" Width="100%" @ref="Chart2"      
                    IsHorizontalZoomEnabled="false" GridMode="GridMode.BeforeSeries"
                    IsVerticalZoomEnabled="false">
             <NumericXAxis  Name="xAxis" Title="Female (Millions)" IsInverted="false"   />
             <CategoryYAxis Name="yAxis" Label="Age" DataSource="@DataSource" Gap="0.4" Interval="1"
                            LabelLocation="AxisLabelsLocation.OutsideLeft" 
                            LabelHorizontalAlignment="HorizontalAlignment.Center"
                            LabelRightMargin="5" LabelLeftMargin="0"/>
             <BarSeries XAxisName="xAxis"
                        YAxisName="yAxis" Brush="#D93EF4" Outline="#D93EF4"
                        DataSource="@DataSource"
                        ValueMemberPath="Female" Title="Females"
                        ShowDefaultTooltip="true"
                        IsTransitionInEnabled="true"
                        IsHighlightingEnabled="true">
             </BarSeries>               
         </DataChart>
    </div>
</div>

@code {

    private DataChart Chart1;
    private DataChart Chart2;
    private Legend Legend;

    private List<Population> DataSource = new List<Population>();
    
    protected override void OnInitialized()
    {
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartVerticalCategoryModule.Register(IgniteUIBlazor); 
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);

        var rand = new Random();
        for (int i = 0; i <= 80; i+=5)
        {
            var variant = 2 + Math.Abs(rand.Next(1, 5) / 10.0);
            var population = new Population();
            population.Age = i;
            population.Male =    Math.Abs(190 - (i * variant)) / 5.0;
            population.Female =  Math.Abs(190 - (i * variant)) / 5.0;
            DataSource.Add(population);
        }
    }
    
    public class Population
    {
        public double Male { get; set; }
        public double Female { get; set; }
        public int Age { get; set; }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (this.Chart1 != null && this.Legend != null && firstRender) { 
            this.Chart1.Legend = this.Legend;
        }

        if (this.Chart2 != null && this.Legend != null && firstRender) { 
            this.Chart2.Legend = this.Legend;
        }
    }

}
