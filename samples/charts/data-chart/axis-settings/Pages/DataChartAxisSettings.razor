@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;

<div class="igContainer">
    <div class="igOptions-horizontal">
        <span class="igLegend-title">Legend: </span>
        <div class="igLegend">
            <Legend @ref="LegendRef" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="igComponent">        
        @if (DataSource != null)
        {
        <DataChart Height="100%" Width="100%" Legend="@LegendRef" Subtitle="Energy Source of Biggest Countries"
                   IsHorizontalZoomEnabled="true" IsVerticalZoomEnabled="true">
            <CategoryXAxis Name="xAxis"
                           DataSource="DataSource"
                           Label="Country"
                           LabelTopMargin="5"
                           LabelTextColor="Gray"
                           Title="Countries"
                           TitleTextColor="Gray"
                           TitleAngle="0"
                           TickLength="10"
                           TickStrokeThickness="0.5"
                           TickStroke="Gray"
                           Interval="1"
                           MajorStroke="Gray"
                           MajorStrokeThickness="0.5"
                           Gap="0.125"
                           Overlap="0" />

            <NumericYAxis Name="yAxis"
                          LabelLocation="AxisLabelsLocation.OutsideRight"
                          LabelRightMargin="0"
                          LabelTextColor="Gray"
                          LabelHorizontalAlignment="HorizontalAlignment.Right"
                          Title="Energy Production (Wh)"
                          TitleTextColor="Gray"
                          TitleAngle="90"
                          TitleLeftMargin="5"
                          TickLength="10"
                          TickStrokeThickness="0.5"
                          TickStroke="Black"
                          MinimumValue="0"
                          MaximumValue="1000000000"
                          Interval="100000000"
                          MajorStroke="Black"
                          MajorStrokeThickness="1"
                          MinorInterval="25000000"
                          MinorStroke="Gray"
                          MinorStrokeThickness="0.5"
                          AbbreviateLargeNumbers="true" />

            <ColumnSeries Title="Coal" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Coal"
                          DataSource="DataSource" IsTransitionInEnabled="true" />
            <ColumnSeries Title="Hydro" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Hydro"
                          DataSource="DataSource" IsTransitionInEnabled="true" />
            <ColumnSeries Title="Nuclear" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Nuclear"
                          DataSource="DataSource" IsTransitionInEnabled="true" />
            <ColumnSeries Title="Gas" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Gas"
                          DataSource="DataSource" IsTransitionInEnabled="true" />
            <ColumnSeries Title="Oil" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Oil"
                          DataSource="DataSource" IsTransitionInEnabled="true" />
        </DataChart>

        }
    </div>
</div>

@code {

    private List<Energy> DataSource;
    private Legend legend;
    private Legend LegendRef
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        NumberAbbreviatorModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);

        this.DataSource = DataChartSharedData.getEnergyProduction();
    }
}
