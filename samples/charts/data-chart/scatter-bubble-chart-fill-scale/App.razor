@using IgniteUI.Blazor.Controls
@using IgniteUI.Blazor.Controls;
@using System;
@using System.Linq;

<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel
        Name="PropertyEditor"
        @ref="propertyEditor"

        DescriptionType="DataChart"
        IsHorizontal="true"
        IsWrappingEnabled="true">
            <IgbPropertyEditorPropertyDescription
            Name="FillScaleMinimumValueEditor"
            @ref="fillScaleMinimumValueEditor"
            Label="MinimumValue: "
            ValueType="PropertyEditorValueType.Slider"
            Min="0"
            Max="20000"
            Changed="ScatterBubbleSeriesFillScaleSliderChanged">
            </IgbPropertyEditorPropertyDescription>

            <IgbPropertyEditorPropertyDescription
            Name="FillScaleMaximumValueEditor"
            @ref="fillScaleMaximumValueEditor"
            Label="MaximumValue: "
            ValueType="PropertyEditorValueType.Slider"
            Min="25000"
            Max="100000"
            Changed="ScatterBubbleSeriesFillScaleSliderChanged">
            </IgbPropertyEditorPropertyDescription>

        </IgbPropertyEditorPanel>

    </div>
    <div class="container vertical fill">
        <IgbDataChart
        Name="chart"
        @ref="chart"
        IsHorizontalZoomEnabled="true"
        IsVerticalZoomEnabled="true"
        ChartTitle="Public Debt vs. Population"
        Subtitle="GDP per Capita">
            <IgbNumericXAxis
            Name="xAxis"
            @ref="xAxis"
            MinimumValue="10000"
            MaximumValue="10000000000"
            IsLogarithmic="true"
            AbbreviateLargeNumbers="true"
            Title="Population">
            </IgbNumericXAxis>

            <IgbNumericYAxis
            Name="yAxis"
            @ref="yAxis"
            IsLogarithmic="true"
            LogarithmBase="10"
            Title="Public Debt per GDP">
            </IgbNumericYAxis>

            <IgbBubbleSeries
            Name="BubbleSeries1"
            @ref="bubbleSeries1"
            XMemberPath="Population"
            YMemberPath="PublicDebt"
            RadiusMemberPath="GdpPerCapita"
            FillMemberPath="GdpPerCapita"
            XAxisName="xAxis"
            YAxisName="yAxis"
            DataSource="WorldDebtAndPopulation"
            MarkerType="MarkerType.Circle"
            MarkerOutline="black"
            ShowDefaultTooltip="true">
                <IgbSizeScale
                IsLogarithmic="false"
                MinimumValue="10"
                MaximumValue="120">
                </IgbSizeScale>

                <IgbValueBrushScale
                IsLogarithmic="false"
                MinimumValue="0"
                MaximumValue="100000"
                Brushes="#1aa1e2 #189ad9 #1692ce #1385bc #0f79ab #0c6b99 #095e88 #055277 #024669 #003f5e">
                </IgbValueBrushScale>

            </IgbBubbleSeries>

        </IgbDataChart>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditor = this.propertyEditor;
        var fillScaleMinimumValueEditor = this.fillScaleMinimumValueEditor;
        var fillScaleMaximumValueEditor = this.fillScaleMaximumValueEditor;
        var chart = this.chart;
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;
        var bubbleSeries1 = this.bubbleSeries1;

        this.BindElements = () => {
            propertyEditor.Target = this.chart;
        };
        this.BindElements();

    }

    private IgbPropertyEditorPanel propertyEditor;
    private IgbPropertyEditorPropertyDescription fillScaleMinimumValueEditor;
    private IgbPropertyEditorPropertyDescription fillScaleMaximumValueEditor;
    private IgbDataChart chart;
    private IgbNumericXAxis xAxis;
    private IgbNumericYAxis yAxis;
    private IgbBubbleSeries bubbleSeries1;

    public void ScatterBubbleSeriesFillScaleSliderChanged(IgbPropertyEditorPropertyDescriptionChangedEventArgs args)
    {
        var series = this.chart.ActualSeries[0] as IgbBubbleSeries;

    	var fillScale = series.FillScale as IgbValueBrushScale;

    	double newValue = (double)args.NewValue;

    	if(newValue >= 25000){
            fillScale.MaximumValue = args.NewValue;
        }
        else{
            fillScale.MinimumValue = args.NewValue;
        }
    }

    private WorldDebtAndPopulation _worldDebtAndPopulation = null;
    public WorldDebtAndPopulation WorldDebtAndPopulation
    {
        get
        {
            if (_worldDebtAndPopulation == null)
            {
                _worldDebtAndPopulation = new WorldDebtAndPopulation();
            }
            return _worldDebtAndPopulation;
        }
    }

}