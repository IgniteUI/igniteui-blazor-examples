@using IgniteUI.Blazor.Controls

@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
	
	<div class="legend-title">
        Renewable Electricity Generated
    </div>
	
    <div class="container vertical fill">
        <IgbDataChart
        Name="chart"
        @ref="chart">
            <IgbCategoryXAxis
            DataSource="CountryRenewableElectricity"
            Label="Year"
            Name="xAxis"
            @ref="xAxis">
            </IgbCategoryXAxis>
            <IgbNumericYAxis
            Title="TWh"
            Name="yAxis"
            @ref="yAxis">
            </IgbNumericYAxis>
            <IgbLineSeries
            XAxisName="xAxis"
            YAxisName="yAxis"
            ValueMemberPath="America"
            DataSource="CountryRenewableElectricity"
            Name="LineSeries1"
            @ref="lineSeries1">
            </IgbLineSeries>
            <IgbCalloutLayer
            LabelMemberPath="Label"
            XMemberPath="Index"
            YMemberPath="Value"
            CalloutCornerRadius="10"
            DataSource="CountryRenewableCallouts"
            Name="CalloutLayer1"
            @ref="calloutLayer1">
            </IgbCalloutLayer>
            <IgbFinalValueLayer
            AxisAnnotationBackgroundCornerRadius="100">
            </IgbFinalValueLayer>
            <IgbCrosshairLayer
            IsAxisAnnotationEnabled="true"
            XAxisAnnotationBackgroundCornerRadius="100"
            YAxisAnnotationBackgroundCornerRadius="100">
            </IgbCrosshairLayer>
            <IgbDataToolTipLayer
            Name="Tooltips"
            @ref="tooltips">
            </IgbDataToolTipLayer>
        </IgbDataChart>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
    }

	private Action BindElements { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		var chart = this.chart;
		var xAxis = this.xAxis;
		var yAxis = this.yAxis;
		var lineSeries1 = this.lineSeries1;
		var calloutLayer1 = this.calloutLayer1;
		var tooltips = this.tooltips;

        this.BindElements = () => {
        };
        this.BindElements();
	}

	private IgbDataChart chart;
	private IgbCategoryXAxis xAxis;
	private IgbNumericYAxis yAxis;
	private IgbLineSeries lineSeries1;
	private IgbCalloutLayer calloutLayer1;
	private IgbDataToolTipLayer tooltips;


    private CountryRenewableElectricity _countryRenewableElectricity = null;
    public CountryRenewableElectricity CountryRenewableElectricity
    {
        get
        {
            if (_countryRenewableElectricity == null)
            {
                _countryRenewableElectricity = new CountryRenewableElectricity(); 
            }
            return _countryRenewableElectricity;
        }
    }
    
    private CountryRenewableCallouts _countryRenewableCallouts = null;
    public CountryRenewableCallouts CountryRenewableCallouts
    {
        get
        {
            if (_countryRenewableCallouts == null)
            {
                _countryRenewableCallouts = new CountryRenewableCallouts(); 
            }
            return _countryRenewableCallouts;
        }
    }
    
}