@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">

    <div class="options vertical">
        <span class="legend-title">Points of Sail Chart </span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="overlay-right" style="margin-right: 1rem">
         <label class="options-label">Type of Polar Chart </label>
         <select value=@SeriesType @onchange="OnSeriesTypeChanged">
             <option>Polar Area Chart</option>
             <option>Polar Spline Chart</option>
             <option>Polar Line Chart</option>
             <option>Polar Scatter Chart</option>
         </select> 
    </div>

    <div class="container vertical">
        @if (Data != null)
        {
        <IgbDataChart Height="100%" Width="100%"
                   TitleTopMargin="10"
                   IsHorizontalZoomEnabled="false"
                   IsVerticalZoomEnabled="false"
                   Legend="Legend"
                   @ref="Chart">

            <IgbNumericAngleAxis Name="angleAxis"
                              StartAngleOffset="-90"
                              Interval="30"
                              MinimumValue="0"
                              MaximumValue="360" />
            <IgbNumericRadiusAxis Name="radiusAxis"
                               InnerRadiusExtentScale="0.1"
                               RadiusExtentScale="0.9"
                               MinimumValue="0"
                               MaximumValue="100"
                               Interval="25" />

            @if (SeriesType == "Polar Area Chart")
            {
                <IgbPolarAreaSeries DataSource="Data"
                                 AngleAxisName="angleAxis"
                                 AngleMemberPath="Direction"
                                 RadiusMemberPath="WindSpeed"
                                 RadiusAxisName="radiusAxis"
                                 ShowDefaultTooltip="true"
                                 Title="Wind Speed"
                                 MarkerType="MarkerType.Circle" />
                <IgbPolarAreaSeries DataSource="Data"
                                 AngleAxisName="angleAxis"
                                 AngleMemberPath="Direction"
                                 RadiusMemberPath="BoatSpeed"
                                 RadiusAxisName="radiusAxis"
                                 ShowDefaultTooltip="true"
                                 Title="Boat Speed"
                                 MarkerType="MarkerType.Circle" />
            }

            @if (SeriesType == "Polar Spline Chart")
            {
                <IgbPolarSplineSeries AngleMemberPath="Direction"
                                   RadiusMemberPath="BoatSpeed"
                                   RadiusAxisName="radiusAxis"
                                   AngleAxisName="angleAxis"
                                   MarkerType="MarkerType.Circle"
                                   Title="Boat Speed"
                                   DataSource="Data">
                </IgbPolarSplineSeries>
                <IgbPolarSplineSeries AngleMemberPath="Direction"
                                   RadiusMemberPath="WindSpeed"
                                   RadiusAxisName="radiusAxis"
                                   AngleAxisName="angleAxis"
                                   MarkerType="MarkerType.Circle"
                                   Title="Wind Speed"
                                   DataSource="Data">
                </IgbPolarSplineSeries>
            }

            @if (SeriesType == "Polar Line Chart")
            {
                <IgbPolarLineSeries AngleMemberPath="Direction"
                                 RadiusMemberPath="BoatSpeed"
                                 RadiusAxisName="radiusAxis"
                                 AngleAxisName="angleAxis"
                                 MarkerType="MarkerType.Circle"
                                 Title="Boat Speed"
                                 DataSource="Data">
                </IgbPolarLineSeries>
                <IgbPolarLineSeries AngleMemberPath="Direction"
                                 RadiusMemberPath="WindSpeed"
                                 RadiusAxisName="radiusAxis"
                                 AngleAxisName="angleAxis"
                                 MarkerType="MarkerType.Circle"
                                 Title="Wind Speed"
                                 DataSource="Data">
                </IgbPolarLineSeries>
            }

            @if (SeriesType == "Polar Scatter Chart")
            {
                <IgbPolarScatterSeries AngleMemberPath="Direction"
                        RadiusMemberPath="BoatSpeed"
                        RadiusAxisName="radiusAxis"
                        AngleAxisName="angleAxis"
                        MarkerType="MarkerType.Circle"
                        Title="Boat Speed"
                        DataSource="Data">
                </IgbPolarScatterSeries>
                <IgbPolarScatterSeries AngleMemberPath="Direction"
                        RadiusMemberPath="WindSpeed"
                        RadiusAxisName="radiusAxis"
                        AngleAxisName="angleAxis"
                        MarkerType="MarkerType.Circle"
                        Title="Wind Speed"
                        DataSource="Data">
                </IgbPolarScatterSeries>
            }
        </IgbDataChart>
        }
    </div>
</div>

@code {

    private List<SamplePolarItem> Data;
    private IgbDataChart _chart;
    private IgbDataChart Chart
    {
        get { return _chart; }
        set { _chart = value; StateHasChanged(); }
    }

    private IgbLegend _legend;
    private IgbLegend Legend
    {
        get { return _legend; }
        set { _legend = value; StateHasChanged(); }
    }

    private string seriesType = "Polar Spline Chart";
    private string SeriesType
    {
        get { return seriesType; }
        set { seriesType = value; StateHasChanged(); }
    }

    protected override void OnInitialized()
    {
        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartPolarCoreModule.Register(IgniteUIBlazor);
        IgbDataChartPolarModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);

        IgbLegendModule.Register(IgniteUIBlazor);
        Data = SamplePolarData.Create();
    }

    public void OnSeriesTypeChanged(ChangeEventArgs e)
    {
        var selectedSeries = e.Value.ToString();
        SeriesType = selectedSeries;
    }
}