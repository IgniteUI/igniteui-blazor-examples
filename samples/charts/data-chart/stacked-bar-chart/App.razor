@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options vertical">
        <span class="legend-title">Renewable energy consumption</span>
        <div class="legend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="container vertical">
        @if (Data != null)
        {
            <DataChart Height="100%" Width="100%" IsVerticalZoomEnabled="false" IsHorizontalZoomEnabled="false">

                <CategoryYAxis Name="yAxis" DataSource="Data" Label="Location" Gap="0.75" IsInverted="true" />
                <NumericXAxis Name="xAxis" MinimumValue="0" Title="TWh" />

                <StackedBarSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="true" AreaFillOpacity="1" Legend="Legend">
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Wind" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Other" />
                </StackedBarSeries>
                <CalloutLayer DataSource="CalloutData" XMemberPath="X" YMemberPath="Y" LabelMemberPath="Label"
                              CalloutBackground="Transparent" CalloutLeaderBrush="Transparent" CalloutTextColor="Black" />
            </DataChart>
        }
    </div>
</div>

@code {
    private Legend _legend;
    public Legend Legend
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    public List<EnergySource> Data = new EnergyData();
    public List<CalloutInfo> CalloutData { get; set; }

    protected override void OnInitialized()
    {

        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbDataChartStackedModule.Register(IgniteUIBlazor);
        IgbColumnFragmentModule.Register(IgniteUIBlazor);
        IgbStackedSplineSeriesModule.Register(IgniteUIBlazor);
        IgbStackedFragmentSeriesModule.Register(IgniteUIBlazor);
        IgbLegendModule.Register(IgniteUIBlazor);
        IgbCalloutLayerModule.Register(IgniteUIBlazor);

        this.CalloutData = new List<CalloutInfo>();

        for (int i = 0; i < this.Data.Count; i++)
        {
            var item = this.Data[i];

            this.CalloutData.Add(new CalloutInfo() { X = item.Sum, Y = i, Label = item.Sum.ToString() });
        }

    }

    public class CalloutInfo
    {
        public double X { get; set; }
        public double Y { get; set; }
        public string Label { get; set; }
    }

}