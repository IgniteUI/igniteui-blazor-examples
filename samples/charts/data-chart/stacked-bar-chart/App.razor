@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Renewable energy consumption</span>
        <div class="igLegend">
            <Legend @ref="LegendRef" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="igComponent">
        @if (DataSource != null)
        {
            <DataChart Height="100%" Width="100%" IsVerticalZoomEnabled="false" IsHorizontalZoomEnabled="false">

                <CategoryYAxis Name="yAxis" DataSource="DataSource" Label="Location" Gap="0.75" IsInverted="true" />
                <NumericXAxis Name="xAxis" MinimumValue="0" Title="TWh" />

                <StackedBarSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ShowDefaultTooltip="true" AreaFillOpacity="1" Legend="LegendRef">
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Wind" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Other" />
                </StackedBarSeries>
                <CalloutLayer DataSource="CalloutDataSource" XMemberPath="X" YMemberPath="Y" LabelMemberPath="Label"
                              CalloutBackground="Transparent" CalloutLeaderBrush="Transparent" CalloutTextColor="Black" />
            </DataChart>
        }
    </div>
</div>

@code {
    private Legend _legend;
    public Legend LegendRef
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }


    public List<SampleStackedBarChartItem> DataSource = new SampleStackedBarChartData();
    public List<CalloutData> CalloutDataSource { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartStackedModule.Register(IgniteUIBlazor);
        ColumnFragmentModule.Register(IgniteUIBlazor);
        StackedSplineSeriesModule.Register(IgniteUIBlazor);
        StackedFragmentSeriesModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);
        CalloutLayerModule.Register(IgniteUIBlazor);


        this.CalloutDataSource = new List<CalloutData>();

        for (int i = 0; i < this.DataSource.Count; i++)
        {
            var item = this.DataSource[i];

            this.CalloutDataSource.Add(new CalloutData() { X = item.Sum, Y = i, Label = item.Sum.ToString() });
        }

    }

    public class CalloutData
    {
        public double X { get; set; }
        public double Y { get; set; }
        public string Label { get; set; }
    }

}
