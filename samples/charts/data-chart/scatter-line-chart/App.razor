@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions-vertical">
        <span class="igLegend-title">Total Population (Gapminder, HYDE & UN): 1k - 181M </span>
    </div>
    <div class="igOptions-horizontal">        
        <span class="igLegend-title">Continent: </span>
        <div class="igLegend">
            <Legend @ref="LegendRef" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="igComponent">
        <DataChart Height="100%" Width="100%"
                   Legend="@LegendRef"                   
                   IsHorizontalZoomEnabled="true"
                   IsVerticalZoomEnabled="true">

            <NumericXAxis Name="xAxis" Title="Death Rate, crude (per 1,000 people)"  Interval="1" />
            <NumericYAxis Name="yAxis" Title="Birth Rate, crude (per 1,000 people)"  Interval="20" />

            <ScatterLineSeries XAxisName="xAxis" 
                           YAxisName="yAxis"
                           DataSource="@AfricaDataSource"
                           XMemberPath="DeathRate"
                           YMemberPath="BirthRate"
                           MarkerType="MarkerType.Circle"
                           Title="Africa" />             

            <ScatterLineSeries XAxisName="xAxis"
                           YAxisName="yAxis"
                           DataSource="@EuropeDataSource"
                           XMemberPath="DeathRate"
                           YMemberPath="BirthRate"
                           MarkerType="MarkerType.Circle"
                           Title="Europe"/>
        </DataChart>
    </div>
</div>

@code {

    private Legend _legend;
    public Legend LegendRef
    {
        get { return _legend; }
        set
        {
            _legend = value;
            StateHasChanged();
        }
    }

    private List<BirthAndDeathRateInfo> AfricaDataSource;
    private List<BirthAndDeathRateInfo> EuropeDataSource;

    public void InitializeData()
    {
        var data = new BirthAndDeathRateData();

        var comparer = new BirthAndDeathRateSortComparer();

        this.AfricaDataSource = data.Where(d => d.Continent == "Africa").ToList();
        this.AfricaDataSource.Sort(comparer);

        this.EuropeDataSource = data.Where(d => d.Continent == "Europe").ToList();
        this.EuropeDataSource.Sort(comparer);

        List<BirthAndDeathRateInfo> itemsToRemove = new List<BirthAndDeathRateInfo>();

        foreach (var item in AfricaDataSource)
        {
            if (item.BirthRate == 0 && item.DeathRate == 0)
            {
                itemsToRemove.Add(item);
            }
        }

        foreach(var item in EuropeDataSource)
        {
            if (item.BirthRate == 0 && item.DeathRate == 0)
            {
                itemsToRemove.Add(item);
            }
        }

        foreach (var item in itemsToRemove)
        {
            if (EuropeDataSource.Contains(item))
            {
                this.EuropeDataSource.Remove(item);
            }
            else
            {
                this.AfricaDataSource.Remove(item);
            }
        }
    }

    protected override void OnInitialized()
    {
        LegendModule.Register(IgniteUIBlazor);
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartScatterModule.Register(IgniteUIBlazor);
        DataChartScatterCoreModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        NumberAbbreviatorModule.Register(IgniteUIBlazor);

        InitializeData();
    }

    public class BirthAndDeathRateSortComparer : IComparer<BirthAndDeathRateInfo>
    {
        public int Compare(BirthAndDeathRateInfo x, BirthAndDeathRateInfo y)
        {
            return x.DeathRate.CompareTo(y.DeathRate);
        }
    }
}