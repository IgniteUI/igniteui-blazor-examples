@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">

    <div class="options vertical">

        <span class="legend-title">Legend: </span>
        <div class="legend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>

        <div class="overlay-right" >
            <div class="options horizontal" >
                <label class="options-label">Financial Series: </label>
                <select @bind=@SeriesType>
                    <option>@PriceDisplayType.Candlestick</option>
                    <option>@PriceDisplayType.OHLC</option>
                </select>
                <label class="options-label">Indicator Display: </label>
                <select @bind=@IndicatorsType>
                    <option>@IndicatorDisplayType.Line</option>
                    <option>@IndicatorDisplayType.Area</option>
                    <option>@IndicatorDisplayType.Column</option>
                </select>
            </div>
        </div>


    </div>

    <div class="container vertical">
        @if (Data != null)
        {
            <DataChart Height="100%" Width="100%"
                       TitleTopMargin="10"
                       IsHorizontalZoomEnabled="true"
                       IsVerticalZoomEnabled="true"
                       Legend="Legend"
                       @ref="Chart">

                <CategoryXAxis Name="xAxis" Label="Label" DataSource="Data"
                               LabelAngle="45" />
                <NumericYAxis Name="yAxis1" LabelLocation="AxisLabelsLocation.OutsideRight" Title="Financial Prices" />

                <NumericYAxis Name="yAxis2" LabelLocation="AxisLabelsLocation.OutsideLeft"
                              Title="Indicator Values" MajorStrokeThickness="0" MaximumValue="800" />
                <BollingerBandsOverlay Name="series1"
                                       XAxisName="xAxis"
                                       YAxisName="yAxis1"
                                       HighMemberPath="High"
                                       LowMemberPath="Low"
                                       CloseMemberPath="Close"
                                       OpenMemberPath="Open"
                                       Brush="rgba(171, 82, 235, 0.39)"
                                       DataSource="Data" />

                <FinancialPriceSeries Name="series2"
                                      XAxisName="xAxis"
                                      YAxisName="yAxis1"
                                      DisplayType=@SeriesType
                                      HighMemberPath="High"
                                      LowMemberPath="Low"
                                      CloseMemberPath="Close"
                                      OpenMemberPath="Open"
                                      VolumeMemberPath="Volume"
                                      DataSource="Data"
                                      Title="Price" />

                <MedianPriceIndicator Name="series3"
                                      XAxisName="xAxis"
                                      YAxisName="yAxis2"
                                      DisplayType="@IndicatorsType"
                                      HighMemberPath="High"
                                      LowMemberPath="Low"
                                      CloseMemberPath="Close"
                                      OpenMemberPath="Open"
                                      VolumeMemberPath="Volume"
                                      DataSource="Data" />
            </DataChart>
        }
    </div>
</div>

@code {

    private List<SampleFinancialItem> Data;
    private DataChart _Chart;
    private DataChart Chart
    {
        get { return _Chart; }
        set
        {
            _Chart = value;
            StateHasChanged();
        }
    }

    private Legend legend;
    private Legend Legend
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }
    private PriceDisplayType seriesType;
    private PriceDisplayType SeriesType
    {
        get { return seriesType; }
        set
        {
            seriesType = value;

            StateHasChanged();
        }
    }

    private IndicatorDisplayType indicatorsType;
    private IndicatorDisplayType IndicatorsType
    {
        get { return indicatorsType; }
        set
        {
            indicatorsType = value;

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        // registering chart/axis modules
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        // registering financial modules
        DataChartFinancialCoreModule.Register(IgniteUIBlazor);
        DataChartFinancialModule.Register(IgniteUIBlazor);
        DataChartFinancialIndicatorsModule.Register(IgniteUIBlazor);
        DataChartFinancialOverlaysModule.Register(IgniteUIBlazor);
        // registering other modules
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);

        Data = SampleFinancialData.Create();
    }
}