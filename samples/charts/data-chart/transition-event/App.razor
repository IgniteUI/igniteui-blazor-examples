@using IgniteUI.Blazor.Controls

@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
	<div class="options vertical">
        <IgbPropertyEditorPanel
        
        DescriptionType="DataChart"
        IsHorizontal="true"
        IsWrappingEnabled="false"
        Name="propertyEditorPanel1"
        @ref="propertyEditorPanel1">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="ReplayTransitionIn"
            Label=""
            ValueType="PropertyEditorValueType.Button"
            PrimitiveValue="@("Replay")"
            ButtonClicked="EditorButtonReplayTransitionIn"
            Name="propertyEditorPropertyDescription1"
            @ref="propertyEditorPropertyDescription1">
            </IgbPropertyEditorPropertyDescription>
        </IgbPropertyEditorPanel>
    </div>
	<div class="legend-title">
        Facebook Consolidated Statements of Income
    </div>
	
    <div class="container vertical fill">
        <IgbDataChart
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false"
        Name="chart"
        @ref="chart">
            <IgbCategoryXAxis
            Interval="1"
            DataSource="CompanyIncomeData"
            Overlap="1"
            Label="Category"
            Name="xAxis"
            @ref="xAxis">
            </IgbCategoryXAxis>
            <IgbNumericYAxis
            MinimumValue="0"
            MaximumValue="60"
            Title="Millions of Dollars"
            TitleAngle="-90"
            TitleLeftMargin="10"
            Name="yAxis"
            @ref="yAxis">
            </IgbNumericYAxis>
            <IgbWaterfallSeries
            XAxisName="xAxis"
            YAxisName="yAxis"
            ValueMemberPath="Costs"
            IsTransitionInEnabled="true"
            DataSource="CompanyIncomeData"
            ShowDefaultTooltip="true"
            Name="WaterfallSeries1"
            @ref="waterfallSeries1">
            </IgbWaterfallSeries>
            <IgbWaterfallSeries
            XAxisName="xAxis"
            YAxisName="yAxis"
            DataSource="CompanyIncomeData"
            ValueMemberPath="NetIncome"
            ShowDefaultTooltip="true"
            IsTransitionInEnabled="true"
            Brush="#7446b9"
            Outline="#7446b9"
            Name="WaterfallSeries2"
            @ref="waterfallSeries2">
            </IgbWaterfallSeries>
        </IgbDataChart>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
    }

	private Action BindElements { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		var propertyEditorPanel1 = this.propertyEditorPanel1;
		var propertyEditorPropertyDescription1 = this.propertyEditorPropertyDescription1;
		var chart = this.chart;
		var xAxis = this.xAxis;
		var yAxis = this.yAxis;
		var waterfallSeries1 = this.waterfallSeries1;
		var waterfallSeries2 = this.waterfallSeries2;

        this.BindElements = () => {
            propertyEditorPanel1.Target = this.chart;
        };
        this.BindElements();
	}

	private IgbPropertyEditorPanel propertyEditorPanel1;
	private IgbPropertyEditorPropertyDescription propertyEditorPropertyDescription1;
	private IgbDataChart chart;
	private IgbCategoryXAxis xAxis;
	private IgbNumericYAxis yAxis;
	private IgbWaterfallSeries waterfallSeries1;
	private IgbWaterfallSeries waterfallSeries2;

    
    public void EditorButtonReplayTransitionIn(IgbPropertyEditorPropertyDescriptionButtonClickEventArgs args)
    {
        var series = this.chart.ActualSeries;
        for (var i = 0; i < series.Count; i++)
        {
            series[i].ReplayTransitionIn();
        }
    }
        

    private CompanyIncomeData _companyIncomeData = null;
    public CompanyIncomeData CompanyIncomeData
    {
        get
        {
            if (_companyIncomeData == null)
            {
                _companyIncomeData = new CompanyIncomeData(); 
            }
            return _companyIncomeData;
        }
    }
    
}