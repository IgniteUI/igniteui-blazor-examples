@using IgniteUI.Blazor.Controls
@using IgniteUI.Blazor.Controls;
@using System;

<div class="container vertical">
    <div class="options vertical">
        <IgbPropertyEditorPanel

        DescriptionType="DataChart"
        IsHorizontal="true"
        IsWrappingEnabled="false"
        Name="propertyEditorPanel1"
        @ref="propertyEditorPanel1">
            <IgbPropertyEditorPropertyDescription
            PropertyPath="ReplayTransitionIn"
            Label=""
            ValueType="PropertyEditorValueType.Button"
            PrimitiveValue="@("Replay")"
            ButtonClicked="EditorButtonReplayTransitionIn"
            Name="propertyEditorPropertyDescription1"
            @ref="propertyEditorPropertyDescription1">
            </IgbPropertyEditorPropertyDescription>

        </IgbPropertyEditorPanel>

    </div>
    <div class="legend-title">
        Facebook Consolidated Statements of Income
    </div>

    <div class="container vertical fill">
        <IgbDataChart
        Name="chart"
        @ref="chart"
        IsHorizontalZoomEnabled="false"
        IsVerticalZoomEnabled="false">
            <IgbCategoryXAxis
            Name="xAxis"
            @ref="xAxis"
            Label="Category"
            Interval="1"
            DataSource="CompanyIncomeData"
            Overlap="1">
            </IgbCategoryXAxis>

            <IgbNumericYAxis
            Name="yAxis"
            @ref="yAxis"
            Title="Millions of Dollars"
            TitleLeftMargin="10"
            TitleAngle="-90"
            MinimumValue="0"
            MaximumValue="60">
            </IgbNumericYAxis>

            <IgbWaterfallSeries
            Name="WaterfallSeries1"
            @ref="waterfallSeries1"
            XAxisName="xAxis"
            YAxisName="yAxis"
            DataSource="CompanyIncomeData"
            ValueMemberPath="Costs"
            ShowDefaultTooltip="true"
            IsTransitionInEnabled="true">
            </IgbWaterfallSeries>

            <IgbWaterfallSeries
            Name="WaterfallSeries2"
            @ref="waterfallSeries2"
            XAxisName="xAxis"
            YAxisName="yAxis"
            DataSource="CompanyIncomeData"
            Brush="#7446b9"
            Outline="#7446b9"
            ValueMemberPath="NetIncome"
            ShowDefaultTooltip="true"
            IsTransitionInEnabled="true">
            </IgbWaterfallSeries>

        </IgbDataChart>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var propertyEditorPanel1 = this.propertyEditorPanel1;
        var propertyEditorPropertyDescription1 = this.propertyEditorPropertyDescription1;
        var chart = this.chart;
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;
        var waterfallSeries1 = this.waterfallSeries1;
        var waterfallSeries2 = this.waterfallSeries2;

        this.BindElements = () => {
            propertyEditorPanel1.Target = this.chart;
        };
        this.BindElements();

    }

    private IgbPropertyEditorPanel propertyEditorPanel1;
    private IgbPropertyEditorPropertyDescription propertyEditorPropertyDescription1;
    private IgbDataChart chart;
    private IgbCategoryXAxis xAxis;
    private IgbNumericYAxis yAxis;
    private IgbWaterfallSeries waterfallSeries1;
    private IgbWaterfallSeries waterfallSeries2;

    public void EditorButtonReplayTransitionIn(IgbPropertyEditorPropertyDescriptionButtonClickEventArgs args)
    {
        var series = this.chart.ActualSeries;
        for (var i = 0; i < series.Count; i++)
        {
            series[i].ReplayTransitionIn();
        }
    }

    private CompanyIncomeData _companyIncomeData = null;
    public CompanyIncomeData CompanyIncomeData
    {
        get
        {
            if (_companyIncomeData == null)
            {
                _companyIncomeData = new CompanyIncomeData();
            }
            return _companyIncomeData;
        }
    }

}