@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="container vertical">
    <div class="container vertical">
        @if (Data != null)
        {
            <DataChart Height="100%" Width="100%" IsVerticalZoomEnabled="true" IsHorizontalZoomEnabled="true">
                <CategoryYAxis Name="yAxis" DataSource="Data" Label="Country" />
                <NumericXAxis Name="xAxis" MinimumValue="0" />

                <StackedBarSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="true" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </StackedBarSeries>
            </DataChart>
        }
    </div>
</div>

@code {

    private List<Infragistics.Samples.SampleStackedItem> Data;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbDataChartStackedModule.Register(IgniteUIBlazor);
        IgbColumnFragmentModule.Register(IgniteUIBlazor);
        IgbStackedSplineSeriesModule.Register(IgniteUIBlazor);
        IgbStackedFragmentSeriesModule.Register(IgniteUIBlazor);

        this.Data = SampleStackedData.Create();

    }
}
