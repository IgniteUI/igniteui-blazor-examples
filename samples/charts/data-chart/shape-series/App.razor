@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">

    <div class="options vertical">

        <span class="legend-title">Legend: </span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>

        <div class="overlay-right" >
            <div class="options horizontal" >
                <label class="options-label">Shape Series: </label>
                <select value=@SeriesType @onchange="OnSeriesTypeChanged">
                    <option>Polygon</option>
                    <option>Polyline</option>
                </select>
            </div>
        </div>
    </div>

    <div class="container vertical">
        @if (Data != null)
        {
        <IgbDataChart Height="100%" Width="100%"
                   ChartTitle="Annual Temperature Changes"
                   IsHorizontalZoomEnabled="false"
                   IsVerticalZoomEnabled="false"
                   Legend="Legend"
                   @ref="Chart">

            <IgbNumericXAxis Name="xAxis"
                          TitleBottomMargin="10"
                          MinimumValue="-1"
                          MaximumValue="11"
                          Interval="2" />
            <IgbNumericYAxis Name="yAxis"
                          MinimumValue="-1"
                          MaximumValue="11"
                          Interval="1" />

            @if (SeriesType == "Polygon")
            {
                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" Title="Rooms"
                    ShapeMemberPath="Points" DataSource="Data"
                    ShowDefaultTooltip="true">

                </ScatterPolygonSeries>

            }
            @if (SeriesType == "Polyline")
            {
                <ScatterPolylineSeries XAxisName="xAxis" YAxisName="yAxis" Title="Rooms"
                    ShapeMemberPath="Points" DataSource="Data"
                    ShowDefaultTooltip="true">

                </ScatterPolylineSeries>
            }
        </IgbDataChart>
        }
    </div>
</div>

@code {

    private List<SampleShapeItem> Data;
    private IgbDataChart _Chart;
    private IgbDataChart Chart
    {
        get { return _Chart; }
        set
        {
            _Chart = value;
            SeriesType = "Polyline";
            StateHasChanged();
        }
    }

    private IgbLegend legend;
    private IgbLegend Legend
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }
    private string seriesType;
    private string SeriesType
    {
        get { return seriesType; }
        set
        {
            seriesType = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartScatterCoreModule.Register(IgniteUIBlazor);
        IgbDataChartScatterModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbScatterPolygonSeriesModule.Register(IgniteUIBlazor);
        IgbScatterPolylineSeriesModule.Register(IgniteUIBlazor);

        IgbLegendModule.Register(IgniteUIBlazor);
        Data = SampleShapeData.Create();
    }

    public void OnSeriesTypeChanged(ChangeEventArgs e)
    {
        var selectedSeries = e.Value.ToString();
        SeriesType = selectedSeries;

    }
}