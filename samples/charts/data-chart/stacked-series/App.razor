@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">

    <div class="igOptions-horizontal">
        <span class="igOptions-label">Type of Stacked Series: </span>
                    <select value=@SeriesType
                        @onchange="OnSeriesTypeChanged">
                        <option>Stacked Column</option>
                        <option>Stacked 100 Column</option>
                        <option>Stacked Area</option>
                        <option>Stacked 100 Area</option>
                        <option>Stacked Line</option>
                        <option>Stacked 100 Line</option>
                        <option>Stacked Spline</option>
                        <option>Stacked 100 Spline</option>
                        <option>Stacked Bar</option>
                        <option>Stacked 100 Bar</option>
                    </select>

        @*<span class="igLegend-title">Legend: </span>
        <div class="igLegend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>*@
    </div>

    <div class="igComponent">
        @if (Data != null)
        {
        <DataChart Height="100%" Width="100%"
                   IsHorizontalZoomEnabled="false"
                   IsVerticalZoomEnabled="false"
                   @ref="Chart">

            @if (SeriesType != "Stacked Bar")
            {
                <CategoryXAxis Name="xAxis" Label="Country" DataSource="Data"
                               Title="Countries" />
                <NumericYAxis Name="yAxis" MinimumValue="0" />
            }
            @if (SeriesType == "Stacked Bar")
            {
                <NumericXAxis Name="xAxis2" MinimumValue="0" />
                <CategoryYAxis Name="yAxis2" Label="Country" Title="Countries" DataSource="Data" />

                <StackedBarSeries XAxisName="xAxis2" YAxisName="yAxis2" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </StackedBarSeries>
            }

            @if (SeriesType == "Stacked 100 Bar")
            {
                <NumericXAxis Name="xAxis2" MinimumValue="0" />
                <CategoryYAxis Name="yAxis2" Label="Country" Title="Countries" DataSource="Data" />

                <Stacked100BarSeries XAxisName="xAxis2" YAxisName="yAxis2" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </Stacked100BarSeries>
            }

            @if (SeriesType == "Stacked Column")
            {
                <StackedColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </StackedColumnSeries>
            }
            @if (SeriesType == "Stacked 100 Column")
            {
                <Stacked100ColumnSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </Stacked100ColumnSeries>
            }

            @if (SeriesType == "Stacked Area")
            {
                <StackedAreaSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </StackedAreaSeries>
            }

            @if (SeriesType == "Stacked 100 Area")
            {
                <Stacked100AreaSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </Stacked100AreaSeries>
            }

            @if (SeriesType == "Stacked Line")
            {
                <StackedLineSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </StackedLineSeries>
            }

            @if (SeriesType == "Stacked 100 Line")
            {
                <Stacked100LineSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </Stacked100LineSeries>
            }

            @if (SeriesType == "Stacked Spline")
            {
                <StackedSplineSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </StackedSplineSeries>
            }

            @if (SeriesType == "Stacked 100 Spline")
            {
                <Stacked100SplineSeries XAxisName="xAxis" YAxisName="yAxis" DataSource="Data" ShowDefaultTooltip="false" AreaFillOpacity="1">
                    <StackedFragmentSeries ValueMemberPath="Coal" />
                    <StackedFragmentSeries ValueMemberPath="Hydro" />
                    <StackedFragmentSeries ValueMemberPath="Nuclear" />
                    <StackedFragmentSeries ValueMemberPath="Solar" />
                    <StackedFragmentSeries ValueMemberPath="Oil" />
                </Stacked100SplineSeries>
            }
        </DataChart>
        }
        </div>
</div>

@code {

    private List<SampleStackedItem> Data;
    private DataChart _Chart;
    private DataChart Chart
    {
        get { return _Chart; }
        set
        {
            _Chart = value;
            SeriesType = "Stacked Column";
            StateHasChanged();
        }
    }

    private Legend legend;
    private Legend Legend
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }
    private string seriesType;
    private string SeriesType
    {
        get { return seriesType; }
        set
        {
            seriesType = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);

        DataChartStackedModule.Register(IgniteUIBlazor);
        StackedColumnSeriesModule.Register(IgniteUIBlazor);
        Stacked100ColumnSeriesModule.Register(IgniteUIBlazor);
        StackedAreaSeriesModule.Register(IgniteUIBlazor);
        Stacked100AreaSeriesModule.Register(IgniteUIBlazor);

        ColumnFragmentModule.Register(IgniteUIBlazor);
        StackedFragmentSeriesModule.Register(IgniteUIBlazor);

        StackedSplineSeriesModule.Register(IgniteUIBlazor);

        LegendModule.Register(IgniteUIBlazor);
        Data = SampleStackedData.Create();
    }

    public void OnSeriesTypeChanged(ChangeEventArgs e)
    {
        var selectedSeries = e.Value.ToString();
        SeriesType = selectedSeries;
    }

}