@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="container vertical">
    <div class="options vertical">
        <span class="legend-title">Ronaldo vs. Messi Player Stats</span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>
    <div class="container vertical">
        <IgbDataChart @ref="Chart" Height="100%" Width="100%"
                   IsHorizontalZoomEnabled="false"
                   IsVerticalZoomEnabled="false"
                   Legend="Legend">
            <IgbCategoryAngleAxis Name="angleAxis" DataSource="Data"
                               Label="Attribute" LabelFontWeight="Bold" />
            <IgbNumericRadiusAxis Name="radiusAxis"
                               RadiusExtentScale="0.6"
                               InnerRadiusExtentScale="0.1"
                               MinimumValue="0" MaximumValue="10" Interval="2" />

            <IgbRadialAreaSeries DataSource="Data"
                              AngleAxisName="angleAxis"
                              ValueMemberPath="RonaldoValue"
                              ValueAxisName="radiusAxis"
                              ShowDefaultTooltip="true"
                              AreaFillOpacity="0.30"
                              Thickness="3"
                              Title="Ronaldo"
                              MarkerType="MarkerType.Circle" />

            <IgbRadialAreaSeries DataSource="Data"
                              AngleAxisName="angleAxis"
                              ValueMemberPath="MessiValue"
                              ValueAxisName="radiusAxis"
                              ShowDefaultTooltip="true"
                              AreaFillOpacity="0.30"
                              Thickness="3"
                              Title="Messi"
                              MarkerType="MarkerType.Circle" />
        </IgbDataChart>

    </div>
</div>

@code {

    private List<PlayerStatsInfo> Data = new PlayerStatsData();

    private IgbLegend _Legend;
    private IgbLegend Legend
    {
        get { return _Legend; }
        set { _Legend = value; StateHasChanged(); }
    }

    private IgbDataChart __Chart;
    private IgbDataChart Chart
    {
        get { return __Chart; }
        set
        {
            __Chart = value;
            if (this.Chart != null)
            {
                this.Chart.MarkerBrushes = "White";
                this.Chart.MarkerOutlines = "rgb(140, 231, 217) rgb(238, 88, 121)";
                this.Chart.Brushes = "rgb(140, 231, 217) rgb(238, 88, 121)";
                this.Chart.Outlines = "rgb(140, 231, 217) rgb(238, 88, 121)";

                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartRadialModule.Register(IgniteUIBlazor);
        IgbDataChartRadialCoreModule.Register(IgniteUIBlazor);

        IgbDataChartExtendedAxesModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbLegendModule.Register(IgniteUIBlazor);
    }

}