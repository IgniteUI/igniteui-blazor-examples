@using IgniteUI.Blazor.Controls

<div class="container vertical">
    <div class="container vertical fill">
        <IgbDataChart
        Name="chart"
        @ref="chart"
        ShouldAutoExpandMarginForInitialLabels="true"
        ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series"
        IsVerticalZoomEnabled="false"
        IsHorizontalZoomEnabled="true"
        Brushes="green red"
        Outlines="green red"
        PlotAreaMarginLeft="10"
        PlotAreaMarginTop="0"
        PlotAreaMarginRight="20"
        PlotAreaMarginBottom="0"
        LeftMargin="10"
        TopMargin="0"
        RightMargin="20"
        BottomMargin="0"
        IsWindowSyncedToVisibleRange="false"
        ChartTitle="This Data Chart demonstrates the DataAnnotationRectLayer bound to data that annotates bearish patterns in stock prices.">
            <IgbCategoryXAxis
            Name="xAxis"
            @ref="xAxis"
            DataSource="StockTesla"
            Label="Date"
            LabelLeftMargin="0"
            LabelTopMargin="10"
            LabelRightMargin="0"
            LabelBottomMargin="10">
            </IgbCategoryXAxis>

            <IgbNumericYAxis
            Name="yAxis"
            @ref="yAxis"
            MinimumValue="0"
            MaximumValue="550">
            </IgbNumericYAxis>

            <IgbFinancialPriceSeries
            Name="series1"
            @ref="series1"
            Title="Stock Price"
            DisplayType="PriceDisplayType.Candlestick"
            XAxisName="xAxis"
            YAxisName="yAxis"
            DataSource="StockTesla"
            OpenMemberPath="Open"
            HighMemberPath="High"
            LowMemberPath="Low"
            CloseMemberPath="Close"
            ShowDefaultTooltip="false">
            </IgbFinancialPriceSeries>

            <IgbDataToolTipLayer
            Name="Tooltip"
            @ref="tooltip"
            IncludedColumns="@(new string[] { "High", "Low", "Open", "Close" })"
            LayoutMode="DataLegendLayoutMode.Vertical">
            </IgbDataToolTipLayer>

            <IgbDataAnnotationRectLayer
            Name="RectLayer"
            @ref="rectLayer"
            DataSource="AnnotationRectData"
            CenterLabelXDisplayMode="DataAnnotationDisplayMode.Hidden"
            StartLabelXDisplayMode="DataAnnotationDisplayMode.Hidden"
            EndLabelXDisplayMode="DataAnnotationDisplayMode.Hidden"
            StartLabelYDisplayMode="DataAnnotationDisplayMode.Hidden"
            EndLabelYDisplayMode="DataAnnotationDisplayMode.Hidden"
            ActualAreaFillOpacity="0.1"
            Brush="purple"
            Outline="purple"
            OverlayTextColor="purple"
            OverlayTextVerticalMargin="20"
            OverlayTextHorizontalMargin="-50"
            OverlayTextLocation="OverlayTextLocation.OutsideBottomCenter"
            OverlayTextMemberPath="Label"
            StartLabelXMemberPath="StartLabel"
            EndLabelXMemberPath="EndLabel"
            StartValueXMemberPath="StartX"
            StartValueYMemberPath="StartY"
            EndValueXMemberPath="EndX"
            EndValueYMemberPath="EndY">
            </IgbDataAnnotationRectLayer>

        </IgbDataChart>

    </div>
</div>

@code {

    private Action BindElements { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var chart = this.chart;
        var xAxis = this.xAxis;
        var yAxis = this.yAxis;
        var series1 = this.series1;
        var tooltip = this.tooltip;
        var rectLayer = this.rectLayer;

        this.BindElements = () => {
            rectLayer.TargetAxis = this.xAxis;
        };
        this.BindElements();

    }

    private IgbDataChart chart;
    private IgbCategoryXAxis xAxis;
    private IgbNumericYAxis yAxis;
    private IgbFinancialPriceSeries series1;
    private IgbDataToolTipLayer tooltip;
    private IgbDataAnnotationRectLayer rectLayer;

    private StockTesla _stockTesla = null;
    public StockTesla StockTesla
    {
        get
        {
            if (_stockTesla == null)
            {
                _stockTesla = new StockTesla();
            }
            return _stockTesla;
        }
    }

    private AnnotationRectData _annotationRectData = null;
    public AnnotationRectData AnnotationRectData
    {
        get
        {
            if (_annotationRectData == null)
            {
                _annotationRectData = new AnnotationRectData();
            }
            return _annotationRectData;
        }
    }

}