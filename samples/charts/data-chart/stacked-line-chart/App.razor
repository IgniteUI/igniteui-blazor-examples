@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Renewable Electricity generated combined</span>
    </div>
    <div class="igComponent">
        @if (DataSource != null)
        {
            <DataChart Height="100%" Width="100%" IsVerticalZoomEnabled="false" IsHorizontalZoomEnabled="false">
                <CategoryXAxis Name="xAxis" DataSource="DataSource" Label="Year" Gap="0.75" />
                <NumericYAxis Name="yAxis" MinimumValue="0" MaximumValue="300" Interval="50" Title="TWh" TitleLeftMargin="10" />

                <StackedLineSeries MarkerType="MarkerType.Circle" XAxisName="xAxis" YAxisName="yAxis" DataSource="DataSource" ShowDefaultTooltip="false">
                    <StackedFragmentSeries ValueMemberPath="USA" />
                    <StackedFragmentSeries ValueMemberPath="Europe" />
                    <StackedFragmentSeries ValueMemberPath="China" />
                </StackedLineSeries>
            </DataChart>
        }
    </div>
</div>

@code {

    public List<RenewableElectricityStackedInfo> DataSource = new RenewableElectricityStackedData();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartStackedModule.Register(IgniteUIBlazor);
        StackedFragmentSeriesModule.Register(IgniteUIBlazor);
    }
}
