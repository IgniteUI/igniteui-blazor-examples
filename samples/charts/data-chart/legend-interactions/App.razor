@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <label class="igOptions-label">Enable Highlighting: </label>
        <label class="igOptions-item">
            <input type="checkbox" @bind="SeriesHighlightEnabled" /> Series
        </label>
        <label class="igOptions-item">
            <input type="checkbox" @onchange="OnItemHighlightCheckboxChanged"/>Item
        </label>
        <label class="igOptions-item">
            <input type="checkbox" @onchange="OnCategoryHighlightCheckboxChanged" />Category
        </label>
        <label class="igOptions-item">
            <input type="checkbox" @onchange="OnItemTooltipCheckboxChanged" />Tooltip
        </label>
    </div>
    <div class="igOptions">
        <label style="background: orange" class="igOptions-item" @onclick="@(e => onLegendClick(0))" @onmouseover="@(e => onLegendHover(0))" @onmouseout="@(e => onLegendLeave(0))"> Europe  </label>
        <label style="background: orange" class="igOptions-item" @onclick="@(e => onLegendClick(1))" @onmouseover="@(e => onLegendHover(1))" @onmouseout="@(e => onLegendLeave(1))"> China  </label>
        <label style="background: orange" class="igOptions-item" @onclick="@(e => onLegendClick(2))" @onmouseover="@(e => onLegendHover(2))" @onmouseout="@(e => onLegendLeave(2))"> USA  </label>
    </div>

    <div class="igComponent">
        <DataChart Height="100%" Width="100%"
                   IsVerticalZoomEnabled="true"
                   IsHorizontalZoomEnabled="true" @ref="Chart">
            <CategoryXAxis Name="xAxis" DataSource="DataSource" Label="Year" />
            <NumericYAxis  Name="yAxis" MinimumValue="0" Title="TWh" TitleLeftMargin="10" />

            <AreaSeries Title="Europe" XAxisName="xAxis" YAxisName="yAxis"
                        ValueMemberPath="Europe" MarkerType="MarkerType.Circle"
                        DataSource="DataSource" Opacity="SeriesOpacity[0]"
                        IsTransitionInEnabled="true" ShowDefaultTooltip="true"
                        IsHighlightingEnabled="SeriesHighlightEnabled"/>

            <AreaSeries Title="China" XAxisName="xAxis" YAxisName="yAxis"
                        ValueMemberPath="China" MarkerType="MarkerType.Circle"
                        DataSource="DataSource" Opacity="SeriesOpacity[1]"
                        IsTransitionInEnabled="true" ShowDefaultTooltip="true"
                        IsHighlightingEnabled="SeriesHighlightEnabled"/>

            <AreaSeries Title="USA" XAxisName="xAxis" YAxisName="yAxis"
                        ValueMemberPath="USA" MarkerType="MarkerType.Circle"
                        DataSource="DataSource" Opacity="SeriesOpacity[2]"
                        IsTransitionInEnabled="true" ShowDefaultTooltip="true"
                        IsHighlightingEnabled="SeriesHighlightEnabled"/>

            @*<ItemToolTipLayer Name="ItemTooltip" Outline="Red" />*@

        </DataChart>
    </div>
</div>

@code {

    public class SeriesInfo
    {

        public string Brush = "#8F000000";
        public string Outline = "Black";
        public double Opacity = 1.0;
        public int Index = 0;
    }

    private bool[] IsSeriesVisible = new[] { true, true, true };
    private bool[] IsSeriesHighlighted = new[] { false, false, false };

    private double[] SeriesOpacity = new[] { 1.0, 1.0, 1.0 };

    private void onLegendClick(int index)
    {
        //IsSeriesVisible[index] = !IsSeriesVisible[index];

        //if (IsSeriesVisible[index]) {
        //    this.Chart.ActualSeries[index].Opacity = 1.0;
        //    SeriesOpacity[index] = 1.0;
        //}
        //else
        //{
        //    this.Chart.ActualSeries[index].Opacity = 0.5;
        //    SeriesOpacity[index] = 0.0;
        //}

        Console.WriteLine("onLegendClick " + index + " " + IsSeriesVisible[index]);
        //this.StateHasChanged();
        this.Chart.NotifyContainerResized();
        //this.Chart.ActualSeries[2].Opacity = 0.5;
        //this.Chart.ActualSeries[index].Opacity = 1.0;
    }

    private void onLegendLeave(int index)
    {
        for (int i = 0; i < SeriesOpacity.Length; i++)
        {
            SeriesOpacity[i] = i == index ? 1.0 : 0.25;
        }
        //SeriesOpacity[0] = 1.0;
        //SeriesOpacity[1] = 1.0;
        //SeriesOpacity[2] = 1.0;

        //IsSeriesHighlighted[index] = true;

        //SeriesOpacity[0] = 0.25;
        //SeriesOpacity[1] = 0.25;
        //SeriesOpacity[2] = 0.25;
        //SeriesOpacity[index] = 1.0;

        Console.WriteLine("onLegendLeave " + index + " " + IsSeriesHighlighted[index] + " " + SeriesOpacity[index] + " " + SeriesOpacity[0] );
        this.Chart.NotifyContainerResized();
    }

    private void onLegendHover(int index)
    {
        for (int i = 0; i < SeriesOpacity.Length; i++)
        {
            SeriesOpacity[i] = 1.0;
        }

        //IsSeriesHighlighted[index] = false;

        //SeriesOpacity[0] = 1.0;
        //SeriesOpacity[1] = 1.0;
        //SeriesOpacity[2] = 1.0;
        Console.WriteLine("onLegendHover " + index + " " + IsSeriesHighlighted[index] + " " +SeriesOpacity[index] + " " + SeriesOpacity[0] );

        this.Chart.NotifyContainerResized();
    }

    private List<EnergyRenewableInfo> DataSource = new EnergyRenewableData();
    private bool SeriesHighlightEnabled = true;

    private CategoryItemHighlightLayer ItemHighlightLayer;
    private CategoryHighlightLayer CategoryHighlightLayer;
    private DataChart Chart;
    private ItemToolTipLayer ItemTooltipLayer;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        CategoryHighlightLayerModule.Register(IgniteUIBlazor);
        CategoryItemHighlightLayerModule.Register(IgniteUIBlazor);
        ItemToolTipLayerModule.Register(IgniteUIBlazor);
        CategoryToolTipLayerModule.Register(IgniteUIBlazor);

        //this.DataSource = EnergyProductionData.Generate();

        this.ItemTooltipLayer = new ItemToolTipLayer();
        this.ItemHighlightLayer = new CategoryItemHighlightLayer();
        this.CategoryHighlightLayer = new CategoryHighlightLayer();
    }



    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);


        if (this.Chart != null)
        {
            //this.Chart.Series.Add(this.ItemTooltip);
            //this.Chart.Legend = Legend;
        }

    }

    private void OnItemTooltipCheckboxChanged(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.Chart.ActualSeries.Add(this.ItemTooltipLayer);
            this.Chart.ActualSeries[0].Outline = "Lime";
        }
        else
        {
            this.Chart.ActualSeries.Remove(this.ItemTooltipLayer);
            this.Chart.ActualSeries[0].Outline = "Red";
        }
    }

    private void OnCategoryHighlightCheckboxChanged(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.Chart.ActualSeries.Add(this.CategoryHighlightLayer);
        }
        else
        {
            this.Chart.ActualSeries.Remove(this.CategoryHighlightLayer);
        }
    }

    private void OnItemHighlightCheckboxChanged(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.Chart.ActualSeries.Add(this.ItemHighlightLayer);
        }
        else
        {
            this.Chart.ActualSeries.Remove(this.ItemHighlightLayer);
        }
    }
}

