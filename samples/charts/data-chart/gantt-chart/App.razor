@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Tasks Distribution per Company Department</span>
        <div class="igLegend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="igComponent">

        @if (AllTasks != null)
        {
            <DataChart Height="100%" Width="100%" @ref="Chart"   
                       SeriesMouseEnterScript="onGanttChartMouseEnter"
                       IsHorizontalZoomEnabled="true"
                       IsVerticalZoomEnabled="true">

                <NumericXAxis Name="xAxis" MinimumValue="0" MaximumValue="200" Title="Work Days" />
                <NumericYAxis Name="yAxis" MinimumValue="0" MaximumValue="6" Interval="1" IsInverted="true" LabelVisibility="Visibility.Collapsed" />

                <CategoryYAxis Name="labelAxis" Label="Category" DataSource="@CategoriesList" Interval="1" 
                               Title="Company Departments" TitleRightMargin="5" TitleLeftMargin="10" LabelLeftMargin="0"
                               LabelLocation="AxisLabelsLocation.OutsideLeft" IsInverted="true"/>
                 
                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" 
                                      DataSource="@ResearchTasks" 
                                      Title="@ResearchTasks[0].Name"
                                      Brush="@ResearchTasks[0].Color" />

                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" 
                                      DataSource="@PlanningTasks" 
                                      Title="@PlanningTasks[0].Name"
                                      Brush="@PlanningTasks[0].Color" />

                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" 
                                      DataSource="@CodingTasks" 
                                      Title="@CodingTasks[0].Name"
                                      Brush="@CodingTasks[0].Color" />

                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" 
                                      DataSource="@ReportingTasks" 
                                      Title="@ReportingTasks[0].Name"
                                      Brush="@ReportingTasks[0].Color" />
                
                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" 
                                      DataSource="@FixingTasks" 
                                      Title="@FixingTasks[0].Name"
                                      Brush="@FixingTasks[0].Color" />

                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" 
                                      DataSource="@WritingTasks" 
                                      Title="@WritingTasks[0].Name"
                                      Brush="@WritingTasks[0].Color" />

                <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis" 
                                      DataSource="@DesigningTasks" 
                                      Title="@DesigningTasks[0].Name"
                                      Brush="@DesigningTasks[0].Color" />

                @*<ScatterSeries XAxisName="xAxis"
                               YAxisName="yAxis"
                               DataSource="@AllTasks"
                               IsHighlightingEnabled="true"
                               Title="Tasks"
                               XMemberPath="CenterX"
                               YMemberPath="CenterY"/>*@

            </DataChart>
        }

    </div>
</div>

@code {

    private Legend Legend;
    private DataChart Chart;
    private List<TaskInfo> AllTasks;
    private List<TaskInfo> CategoriesList;
    private Dictionary<string, TaskInfo> CategoriesLookup;

    private List<TaskInfo> ResearchTasks = new List<TaskInfo>();
    private List<TaskInfo> PlanningTasks = new List<TaskInfo>();
    private List<TaskInfo> FixingTasks = new List<TaskInfo>();
    private List<TaskInfo> CodingTasks = new List<TaskInfo>();
    private List<TaskInfo> ReportingTasks = new List<TaskInfo>();
    private List<TaskInfo> WritingTasks = new List<TaskInfo>();
    private List<TaskInfo> DesigningTasks = new List<TaskInfo>();

    protected override async Task OnInitializedAsync()
    {
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartVerticalCategoryModule.Register(IgniteUIBlazor);

        DataChartScatterModule.Register(IgniteUIBlazor);
        DataChartScatterCoreModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        ScatterPolygonSeriesModule.Register(IgniteUIBlazor);
        LegendModule.Register(IgniteUIBlazor);
         
        AllTasks = new List<TaskInfo>(); 
        // tasks for VD department
        AllTasks.Add(new TaskInfo { Start = 10, Stop = 20, Category = "VD", Name = "Research" });
        AllTasks.Add(new TaskInfo { Start = 20, Stop = 30, Category = "VD", Name = "Planning" });
        AllTasks.Add(new TaskInfo { Start = 30, Stop = 60, Category = "VD", Name = "Designing" });
        AllTasks.Add(new TaskInfo { Start = 60, Stop = 70, Category = "VD", Name = "Fixing" });
        // tasks for DEV department
        AllTasks.Add(new TaskInfo { Start = 50,  Stop = 60,  Category = "DEV", Name = "Research" });
        AllTasks.Add(new TaskInfo { Start = 60,  Stop = 70,  Category = "DEV", Name = "Planning" });
        AllTasks.Add(new TaskInfo { Start = 70,  Stop = 120, Category = "DEV", Name = "Coding" });
        AllTasks.Add(new TaskInfo { Start = 120, Stop = 190, Category = "DEV", Name = "Fixing" });
        // tasks for QE department
        AllTasks.Add(new TaskInfo { Start = 60,  Stop = 70,  Category = "QE", Name = "Research" });
        AllTasks.Add(new TaskInfo { Start = 70,  Stop = 80,  Category = "QE", Name = "Planning" });
        AllTasks.Add(new TaskInfo { Start = 80,  Stop = 110, Category = "QE", Name = "Coding" });
        AllTasks.Add(new TaskInfo { Start = 110, Stop = 190, Category = "QE", Name = "Reporting" });
        // tasks for DOCS department
        AllTasks.Add(new TaskInfo { Start = 10,  Stop = 20,  Category = "DOCS", Name = "Research" });
        AllTasks.Add(new TaskInfo { Start = 20,  Stop = 30,  Category = "DOCS", Name = "Planning" });
        AllTasks.Add(new TaskInfo { Start = 30,  Stop = 80,  Category = "DOCS", Name = "Writing" });
        AllTasks.Add(new TaskInfo { Start = 80,  Stop = 110, Category = "DOCS", Name = "Coding" });
        AllTasks.Add(new TaskInfo { Start = 110, Stop = 130, Category = "DOCS", Name = "Reporting" });
        AllTasks.Add(new TaskInfo { Start = 130, Stop = 170, Category = "DOCS", Name = "Coding" });
        AllTasks.Add(new TaskInfo { Start = 170, Stop = 190, Category = "DOCS", Name = "Fixing" });
        // tasks for SUPPORT department
        AllTasks.Add(new TaskInfo { Start = 10,  Stop = 30,  Category = "SUPPORT", Name = "Research" });
        AllTasks.Add(new TaskInfo { Start = 30,  Stop = 90,  Category = "SUPPORT", Name = "Writing" });
        AllTasks.Add(new TaskInfo { Start = 90,  Stop = 110, Category = "SUPPORT", Name = "Coding" });
        AllTasks.Add(new TaskInfo { Start = 110, Stop = 130, Category = "SUPPORT", Name = "Research" });
        AllTasks.Add(new TaskInfo { Start = 130, Stop = 170, Category = "SUPPORT", Name = "Coding" });
        AllTasks.Add(new TaskInfo { Start = 170, Stop = 190, Category = "SUPPORT", Name = "Reporting" });

        CategoriesLookup = new Dictionary<string, TaskInfo>();

        var categoryIndex = 0;
        var taskHeight = 0.4;
        for (int i = 0; i < AllTasks.Count; i++)
        {
            // styling and filtering tasks
            var task = AllTasks[i];
            if (task.Name == "Coding")
            {
                task.Color = "#E49F24"; CodingTasks.Add(task);
            }
            else if (task.Name == "Designing")
            {
                task.Color = "#ECE432"; DesigningTasks.Add(task);
            }
            else if (task.Name == "Planning")
            {
                task.Color = "#DE4AE1"; PlanningTasks.Add(task);
            }
            else if (task.Name == "Research")
            {
                task.Color = "#24B3E4"; ResearchTasks.Add(task);
            }
            else if (task.Name == "Writing")
            {
                task.Color = "#979A9B"; WritingTasks.Add(task);
            }
            else if (task.Name == "Reporting")
            {
                task.Color = "#EF2E2E"; ReportingTasks.Add(task);
            }
            else if (task.Name == "Fixing")
            {
                task.Color = "#2EC12B"; FixingTasks.Add(task);
            }

            // grouping tasks by their category
            if (CategoriesLookup.ContainsKey(task.Category))
            {
                task.CategoryID = CategoriesLookup[task.Category].CategoryID;
            }
            else
            {
                task.CategoryID = categoryIndex++;
                CategoriesLookup.Add(task.Category, task);
            }

            task.CenterX = task.Start + (task.Duration / 2.0);
            task.CenterY = task.CategoryID + 1;

            // generating shape points for each task
            var points = new List<Point>();
            points.Add(new Point { X = task.Start, Y = task.CenterY - taskHeight });
            points.Add(new Point { X = task.Start + task.Duration, Y = task.CenterY - taskHeight });
            points.Add(new Point { X = task.Start + task.Duration, Y = task.CenterY + taskHeight });
            points.Add(new Point { X = task.Start, Y = task.CenterY + taskHeight });
            task.Points = new List<List<Point>> { points };
        }

        CategoriesList = new List<TaskInfo>();
        CategoriesList.Add(new TaskInfo());
        CategoriesList.AddRange(CategoriesLookup.Values.ToList());
        CategoriesList.Add(new TaskInfo());
       
        await Task.Delay(1);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (this.Chart != null && this.Legend != null && firstRender) {
            this.Chart.Legend = this.Legend;
            foreach (var s in this.Chart.ActualSeries)
            {
                var polygon = s as ScatterPolygonSeries;
                if (polygon != null)
                {
                    polygon.Thickness = 1;
                    polygon.Outline = "Transparent";
                    polygon.ShapeMemberPath = "Points";
                }
            }
        }
    }

    public class TaskInfo
    {
        public double Duration { get { return this.Stop - this.Start; } }
        public double Start { get; set; }
        public double Stop { get; set; }
        public string Name { get; set; }
        public string Color { get; set; }
        public string Category { get; set; }
        public int CategoryID { get; set; }

        public double CenterX { get; set; }
        public double CenterY { get; set; }
        public List<List<Point>> Points { get; set; }

        public TaskInfo()
        { 
            Points = new List<List<Point>>();
        } 
    }
     
}