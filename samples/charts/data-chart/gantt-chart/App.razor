@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions">
        <span class="igLegend-title">Task Distribution based on Company Departments</span>
        <div class="igLegend">
            <Legend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="igComponent">

        @if (this.TaskDefinitions != null && this.TasksByName != null)
        {
            <DataChart Height="100%" Width="100%" @ref="Chart"
                       HighlightingMode="SeriesHighlightingMode.FadeOthers"
                       SeriesMouseEnterScript="onGanttChartMouseEnter"
                       IsHorizontalZoomEnabled="false"
                       IsVerticalZoomEnabled="false">

                <NumericXAxis Name="xAxis" MinimumValue="0" MaximumValue="200" Title="Work Days" />
                <NumericYAxis Name="yAxis" MinimumValue="0" MaximumValue="6" Interval="1" IsInverted="true" LabelVisibility="Visibility.Collapsed" />

                <CategoryYAxis Name="labelAxis" Label="Category" DataSource="TaskCategories" Interval="1"
                               LabelLeftMargin="0" Title="Departments" TitleRightMargin="5" TitleLeftMargin="10"
                               LabelLocation="AxisLabelsLocation.OutsideLeft" IsInverted="true"/>

                @foreach (var taskDataItems in this.TasksByName.Values)
                {
                    <ScatterPolygonSeries XAxisName="xAxis" YAxisName="yAxis"
                                          DataSource="@taskDataItems"
                                          ShapeMemberPath="Points"
                                          Outline="Transparent"
                                          Title="@taskDataItems[0].Name"
                                          Brush="@taskDataItems[0].Color"
                                          MarkerTemplateScript="onGanttMarker"/>
                }


            </DataChart>
        }

    </div>
</div>

@code {

    private Legend Legend;
    private DataChart Chart;
    private List<TaskInfo> TaskDefinitions;
    private List<TaskInfo> TaskCategories;
    private Dictionary<string, List<TaskInfo>> TasksByName;

    protected override async Task OnInitializedAsync()
    {
        DataChartCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryCoreModule.Register(IgniteUIBlazor);
        DataChartCategoryModule.Register(IgniteUIBlazor);
        DataChartVerticalCategoryModule.Register(IgniteUIBlazor);
        DataChartInteractivityModule.Register(IgniteUIBlazor);
        DataChartScatterModule.Register(IgniteUIBlazor);
        DataChartScatterCoreModule.Register(IgniteUIBlazor);
        ScatterPolygonSeriesModule.Register(IgniteUIBlazor);

        LegendModule.Register(IgniteUIBlazor);

        // deinfing information about tasks
        TaskDefinitions = new List<TaskInfo>();
        // tasks for VD department
        TaskDefinitions.Add(new TaskInfo { Start = 10, Stop = 20, Category = "VD", Name = "Research" });
        TaskDefinitions.Add(new TaskInfo { Start = 20, Stop = 30, Category = "VD", Name = "Planning" });
        TaskDefinitions.Add(new TaskInfo { Start = 30, Stop = 60, Category = "VD", Name = "Designing" });
        TaskDefinitions.Add(new TaskInfo { Start = 60, Stop = 70, Category = "VD", Name = "Fixing" });
        // tasks for DEV department
        TaskDefinitions.Add(new TaskInfo { Start = 50,  Stop = 60,  Category = "DEV", Name = "Research" });
        TaskDefinitions.Add(new TaskInfo { Start = 60,  Stop = 70,  Category = "DEV", Name = "Planning" });
        TaskDefinitions.Add(new TaskInfo { Start = 70,  Stop = 120, Category = "DEV", Name = "Coding" });
        TaskDefinitions.Add(new TaskInfo { Start = 120, Stop = 190, Category = "DEV", Name = "Fixing" });
        // tasks for QE department
        TaskDefinitions.Add(new TaskInfo { Start = 60,  Stop = 70,  Category = "QE", Name = "Research" });
        TaskDefinitions.Add(new TaskInfo { Start = 70,  Stop = 80,  Category = "QE", Name = "Planning" });
        TaskDefinitions.Add(new TaskInfo { Start = 80,  Stop = 110, Category = "QE", Name = "Coding" });
        TaskDefinitions.Add(new TaskInfo { Start = 110, Stop = 190, Category = "QE", Name = "Reporting" });
        // tasks for DOCS department
        TaskDefinitions.Add(new TaskInfo { Start = 10,  Stop = 20,  Category = "DOCS", Name = "Research" });
        TaskDefinitions.Add(new TaskInfo { Start = 20,  Stop = 30,  Category = "DOCS", Name = "Planning" });
        TaskDefinitions.Add(new TaskInfo { Start = 30,  Stop = 80,  Category = "DOCS", Name = "Writing" });
        TaskDefinitions.Add(new TaskInfo { Start = 80,  Stop = 110, Category = "DOCS", Name = "Coding" });
        TaskDefinitions.Add(new TaskInfo { Start = 110, Stop = 130, Category = "DOCS", Name = "Reporting" });
        TaskDefinitions.Add(new TaskInfo { Start = 130, Stop = 170, Category = "DOCS", Name = "Coding" });
        TaskDefinitions.Add(new TaskInfo { Start = 170, Stop = 190, Category = "DOCS", Name = "Fixing" });
        // tasks for SUPPORT department
        TaskDefinitions.Add(new TaskInfo { Start = 10,  Stop = 30,  Category = "SUPPORT", Name = "Research" });
        TaskDefinitions.Add(new TaskInfo { Start = 30,  Stop = 90,  Category = "SUPPORT", Name = "Writing" });
        TaskDefinitions.Add(new TaskInfo { Start = 90,  Stop = 110, Category = "SUPPORT", Name = "Coding" });
        TaskDefinitions.Add(new TaskInfo { Start = 110, Stop = 130, Category = "SUPPORT", Name = "Research" });
        TaskDefinitions.Add(new TaskInfo { Start = 130, Stop = 170, Category = "SUPPORT", Name = "Coding" });
        TaskDefinitions.Add(new TaskInfo { Start = 170, Stop = 190, Category = "SUPPORT", Name = "Reporting" });

        // defining lookup dictionary for colors of tasks'
        var taskColors = new Dictionary<string, string>();
        taskColors.Add("Coding",    "#E49F24");
        taskColors.Add("Designing", "#ECE432");
        taskColors.Add("Planning",  "#C054E9");
        taskColors.Add("Research",  "#24B3E4");
        taskColors.Add("Writing",   "#2EA0A0");
        taskColors.Add("Fixing",    "#33C633");
        taskColors.Add("Reporting", "#EF2E2E");

        // groupping tasks by their name and category
        var tasksByCategory = new Dictionary<string, TaskInfo>();
        var tasksByName = new Dictionary<string, List<TaskInfo>>();
        var taskCategoryID = 0;
        var taskHeight = 0.4;
        for (int i = 0; i < TaskDefinitions.Count; i++)
        {
            var task = TaskDefinitions[i];

            if (!tasksByName.ContainsKey(task.Name))
                tasksByName.Add(task.Name, new List<TaskInfo>());

            tasksByName[task.Name].Add(task);

            if (taskColors.ContainsKey(task.Name))
                task.Color = taskColors[task.Name];

            // grouping tasks by their category index
            if (tasksByCategory.ContainsKey(task.Category))
            {
                task.CategoryID = tasksByCategory[task.Category].CategoryID;
            }
            else
            {
                task.CategoryID = taskCategoryID++;
                tasksByCategory.Add(task.Category, task);
            }

            task.CenterX = task.Start + (task.Duration / 2.0);
            task.CenterY = task.CategoryID + 1;

            // generating shape points for each task
            var points = new List<Point>();
            points.Add(new Point { X = task.Start, Y = task.CenterY - taskHeight });
            points.Add(new Point { X = task.Start + task.Duration, Y = task.CenterY - taskHeight });
            points.Add(new Point { X = task.Start + task.Duration, Y = task.CenterY + taskHeight });
            points.Add(new Point { X = task.Start, Y = task.CenterY + taskHeight });
            task.Points = new List<List<Point>> { points };
        }

        this.TaskCategories = new List<TaskInfo>();
        this.TaskCategories.Add(new TaskInfo());
        this.TaskCategories.AddRange(tasksByCategory.Values.ToList());
        this.TaskCategories.Add(new TaskInfo());
        this.TasksByName = tasksByName;

        await Task.Delay(1);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (this.Chart != null && this.Legend != null && firstRender) {
            this.Chart.Legend = this.Legend;
        }
    }

    public class TaskInfo
    {
        public double Duration { get { return this.Stop - this.Start; } }
        public double Start { get; set; }
        public double Stop { get; set; }
        public string Name { get; set; }
        public string Color { get; set; }
        public string Category { get; set; }
        public int CategoryID { get; set; }

        public double CenterX { get; set; }
        public double CenterY { get; set; }
        public List<List<Point>> Points { get; set; }

        public TaskInfo()
        {
            Color = "gray";
            Points = new List<List<Point>>();
        }
    }

}