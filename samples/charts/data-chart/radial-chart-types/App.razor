@using IgniteUI.Blazor.Controls


<div class="container sample">

    <div class="options vertical">
        <span class="legend-title">Company Finances by Department </span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="overlay-right" style="margin-right: 1rem">
        <span class="options-label">Type of Radial Chart </span>
        <select value=@SeriesType @onchange="OnSeriesTypeChanged">
            <option>Radial Pie Chart</option>
            <option>Radial Area Chart</option>
            <option>Radial Column Chart</option>
            <option>Radial Line Chart</option>
        </select>
    </div>

    <div class="container vertical">
        @if (Data != null)
        {
        <IgbDataChart Height="100%" Width="100%"
                   GridMode="GridMode.BeforeSeries"
                   IsHorizontalZoomEnabled="false"
                   IsVerticalZoomEnabled="false"
                   Legend="Legend"
                   @ref="Chart">

            <IgbCategoryAngleAxis Name="angleAxis" Label="Department" DataSource="Data" />
            <IgbNumericRadiusAxis Name="radiusAxis" InnerRadiusExtentScale="0.1" MinimumValue="0" />

            @if (SeriesType == "Radial Area Chart")
            {
                <IgbRadialAreaSeries
                    Title="Budget"
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialAreaSeries>
                <IgbRadialAreaSeries
                    Title="Spending"
                    ValueMemberPath="Spending"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialAreaSeries>
            }

            @if (SeriesType == "Radial Column Chart")
            {
                <IgbRadialColumnSeries
                    Title="Budget"
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialColumnSeries>
                <IgbRadialColumnSeries
                    Title="Spending"
                    ValueMemberPath="Spending"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialColumnSeries>
            }

            @if (SeriesType == "Radial Pie Chart")
            {
                <IgbRadialPieSeries
                    Title="Budget"
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialPieSeries>
                <IgbRadialPieSeries
                    Title="Spending"
                    ValueMemberPath="Spending"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialPieSeries>
            }

            @if (SeriesType == "Radial Line Chart")
            {
                <IgbRadialLineSeries
                    Title="Budget"
                    ValueMemberPath="Budget"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialLineSeries>
                <IgbRadialLineSeries
                    Title="Spending"
                    ValueMemberPath="Spending"
                    ValueAxisName="radiusAxis"
                    AngleAxisName="angleAxis"
                    DataSource="Data">
                </IgbRadialLineSeries>
            }
        </IgbDataChart>
        }
    </div>
</div>

@code {

    private List<SampleRadialItem> Data;
    private IgbDataChart _Chart;
    private IgbDataChart Chart
    {
        get { return _Chart; }
        set { _Chart = value; StateHasChanged(); }
    }

    private IgbLegend _Legend;
    private IgbLegend Legend
    {
        get { return _Legend; }
        set { _Legend = value; StateHasChanged(); }
    }

    private string _SeriesType = "Radial Pie Chart";
    private string SeriesType
    {
        get { return _SeriesType; }
        set { _SeriesType = value; StateHasChanged(); }
    }

    protected override void OnInitialized()
    {
        Data = SampleRadialData.Create();
    }

    public void OnSeriesTypeChanged(ChangeEventArgs e)
    {
        var selectedSeries = e.Value.ToString();
        SeriesType = selectedSeries;
    }
}