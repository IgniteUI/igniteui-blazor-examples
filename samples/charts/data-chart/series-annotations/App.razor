@using IgniteUI.Blazor.Controls


<div class="container vertical">
    <div class="options horizontal">
        <span class="options-item">Annotations: </span>
        <label class="options-item">
            <input type="checkbox" checked="true" @onchange="OnCalloutsCheckboxChange"/>Callouts
        </label>
        <label class="options-item">
            <input type="checkbox" checked="true" @onchange="OnFinalValueCheckboxChange"/>Final Value
        </label>
        <label class="options-item">
            <input type="checkbox" checked="true" @onchange="OnCrosshairsCheckboxChange"/>Crosshairs
        </label>
        @*<label class="options-item">
            <input type="checkbox" checked="true" @onchange="OnValueOverlayCheckboxChange"/>Value Overlay
        </label>*@
    </div>
    <div class="container vertical">
        @if (Data != null)
        {
            <IgbDataChart Height="100%" Width="100%" @ref="Chart"
                       IsHorizontalZoomEnabled="true"
                       IsVerticalZoomEnabled="true">
                <IgbCategoryXAxis Name="xAxis" Label="Angle" Interval="2" DataSource="Data" />
                <IgbNumericYAxis Name="yAxis" MinimumValue="-1.25" MaximumValue="1.25" LabelLocation="AxisLabelsLocation.OutsideRight" />
                <IgbLineSeries XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="SinValue" DataSource="Data"
                            MarkerType="MarkerType.Circle" Brush="#0577E8" MarkerOutline="#0577E8" />
                <IgbCalloutLayer XMemberPath="Index" YMemberPath="SinValue" LabelMemberPath="Label" Brush="#0577E8"
                              Outline="White" DataSource="Data" @ref="CalloutRef" />
                <IgbCrosshairLayer IsAxisAnnotationEnabled="true" YAxisAnnotationInterpolatedValuePrecision="2" Brush="#9FB328"
                                Outline="Black" @ref="CrosshairRef"/>
                <IgbFinalValueLayer AxisAnnotationInterpolatedValuePrecision="2" AxisAnnotationTextColor="White" AxisAnnotationBackground="#0577E8"
                                 FinalValueSelectionMode="FinalValueSelectionMode.FinalVisibleInterpolated" @ref="FinalValueRef" />
                <IgbValueOverlay AxisName="yAxis" Thickness="3" Value="0.25" Brush="Brown" IsAxisAnnotationEnabled="true" @ref="ValueOverlayRef"/>
            </IgbDataChart>
        }

    </div>
</div>

@code {

    private List<SampleScatterPoint> Data;

    private IgbDataChart Chart;
    private IgbCalloutLayer CalloutRef;
    private IgbCrosshairLayer CrosshairRef;
    private IgbFinalValueLayer FinalValueRef;
    private IgbValueOverlay ValueOverlayRef;

    protected override void OnInitialized()
    {
        this.Data = SampleScatterData.CreateWaveData();
    }

    private void OnCalloutsCheckboxChange(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.Chart.ActualSeries.Add(this.CalloutRef);
        }
        else
        {
            this.Chart.ActualSeries.Remove(this.CalloutRef);
        }
    }

    private void OnFinalValueCheckboxChange(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.Chart.ActualSeries.Add(this.FinalValueRef);
        }
        else
        {
            this.Chart.ActualSeries.Remove(this.FinalValueRef);
        }
    }

    private void OnCrosshairsCheckboxChange(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.Chart.ActualSeries.Add(this.CrosshairRef);
        }
        else
        {
            this.Chart.ActualSeries.Remove(this.CrosshairRef);
        }
    }

    private void OnValueOverlayCheckboxChange(ChangeEventArgs e)
    {
        bool val = (bool)e.Value;
        if (val)
        {
            this.Chart.ActualSeries.Add(this.ValueOverlayRef);
        }
        else
        {
            this.Chart.ActualSeries.Remove(this.ValueOverlayRef);
        }
    }
}
