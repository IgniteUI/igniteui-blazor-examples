@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor;
@inject IJSRuntime JSRuntime;

<div class="container vertical">
    <div class="options horizontal">
        <span class="legend-title">Legend: </span>
        <div class="legend">
            <IgbLegend @ref="Legend" Orientation="LegendOrientation.Horizontal" />
        </div>
    </div>

    <div class="container vertical">
        @if (Data != null)
        {
            <IgbDataChart Height="100%" Width="100%" IsVerticalZoomEnabled="true"
                       IsHorizontalZoomEnabled="true" Legend="Legend" ChartTitle="Energy Use Per Country"
                       Subtitle="Results over a two year period">
                <IgbCategoryXAxis Name="xAxis" DataSource="Data" Label="Country" />
                <IgbNumericYAxis Name="yAxis" MinimumValue="0" AbbreviateLargeNumbers="true" />

                <IgbColumnSeries Title="Coal" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Coal"
                              DataSource="Data" IsTransitionInEnabled="true" />
                <IgbColumnSeries Title="Hydro" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Hydro"
                              DataSource="Data" IsTransitionInEnabled="true" />
                <IgbColumnSeries Title="Nuclear" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Nuclear"
                              DataSource="Data" IsTransitionInEnabled="true" />
                <IgbColumnSeries Title="Gas" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Gas"
                              DataSource="Data" IsTransitionInEnabled="true" />
                <IgbColumnSeries Title="Oil" XAxisName="xAxis" YAxisName="yAxis" ValueMemberPath="Oil"
                              DataSource="Data" IsTransitionInEnabled="true" />
            </IgbDataChart>

        }
    </div>
</div>

@code {

    private List<EnergyProductionData.Energy> Data;

    private IgbLegend legend;
    private IgbLegend Legend
    {
        get { return legend; }
        set
        {
            legend = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IgbDataChartCoreModule.Register(IgniteUIBlazor);
        IgbDataChartCategoryModule.Register(IgniteUIBlazor);
        IgbNumberAbbreviatorModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);
        IgbLegendModule.Register(IgniteUIBlazor);

        this.Data = EnergyProductionData.Generate();
    }
}
