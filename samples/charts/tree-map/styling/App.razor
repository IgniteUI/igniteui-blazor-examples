@using IgniteUI.Blazor.Controls

<div class="container vertical">
    <div class="legend-title">
        Comparing Population of Countries
    </div>
    <div class="container vertical fill">
        <IgbTreemap
        Name="treemap"
        @ref="treemap"
        DataSource="CountyHierarchicalData"
        ParentIdMemberPath="Parent"
        CustomValueMemberPath="Parent"
        IdMemberPath="Name"
        LabelMemberPath="Name"
        ValueMemberPath="Population"
        RootTitle="Countries"
        HeaderDisplayMode="TreemapHeaderDisplayMode.Overlay"
        OverlayHeaderBackground="#3f403f"
        HeaderHoverBackground="#3f403f"
        HeaderBackground="#3f403f"
        ParentNodeBottomPadding="0"
        ParentNodeLeftPadding="0"
        ParentNodeRightPadding="0"
        ParentNodeTopPadding="0"
        Outline="black"
        StrokeThickness="1">
            <IgbTreemapNodeStyleMapping
            Name="styling1"
            @ref="styling1"
            Value="@("Africa")"
            Fill="#735656"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

            <IgbTreemapNodeStyleMapping
            Name="styling2"
            @ref="styling2"
            Value="@("Europe")"
            Fill="#61ab37"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

            <IgbTreemapNodeStyleMapping
            Name="styling3"
            @ref="styling3"
            Value="@("Asia")"
            Fill="#8b5bb1"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

            <IgbTreemapNodeStyleMapping
            Name="styling4"
            @ref="styling4"
            Value="@("North America")"
            Fill="#5fbaac"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

            <IgbTreemapNodeStyleMapping
            Name="styling5"
            @ref="styling5"
            Value="@("South America")"
            Fill="#ee5879"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

            <IgbTreemapNodeStyleMapping
            Name="styling6"
            @ref="styling6"
            Value="@("Middle East")"
            Fill="#6db1ff"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

            <IgbTreemapNodeStyleMapping
            Name="styling7"
            @ref="styling7"
            Value="@("Central America")"
            Fill="#f7d262"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

            <IgbTreemapNodeStyleMapping
            Name="styling8"
            @ref="styling8"
            Value="@("Oceania")"
            Fill="#a8a8b7"
            MappingMode="TreemapValueMappingMode.CustomValue">
            </IgbTreemapNodeStyleMapping>

        </IgbTreemap>

    </div>
</div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var treemap = this.treemap;
        var styling1 = this.styling1;
        var styling2 = this.styling2;
        var styling3 = this.styling3;
        var styling4 = this.styling4;
        var styling5 = this.styling5;
        var styling6 = this.styling6;
        var styling7 = this.styling7;
        var styling8 = this.styling8;

    }

    private IgbTreemap treemap;
    private IgbTreemapNodeStyleMapping styling1;
    private IgbTreemapNodeStyleMapping styling2;
    private IgbTreemapNodeStyleMapping styling3;
    private IgbTreemapNodeStyleMapping styling4;
    private IgbTreemapNodeStyleMapping styling5;
    private IgbTreemapNodeStyleMapping styling6;
    private IgbTreemapNodeStyleMapping styling7;
    private IgbTreemapNodeStyleMapping styling8;

    private CountyHierarchicalData _countyHierarchicalData = null;
    public CountyHierarchicalData CountyHierarchicalData
    {
        get
        {
            if (_countyHierarchicalData == null)
            {
                _countyHierarchicalData = new CountyHierarchicalData();
            }
            return _countyHierarchicalData;
        }
    }

}