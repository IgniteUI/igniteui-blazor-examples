@page "/FinancialChartCustomIndicators"
@* this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls
@using Samples.Services
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igComponent">

        @if (DataSource != null)
        {
            //TODO set customindicator properties
            <FinancialChart Width="100%"
                Height="100%"
                ChartType=FinancialChartType.Line
                Thickness=2                            
                DataSource="DataSource"
                CustomIndicatorNames="Custom Indicator (Price Changes)"
                ApplyCustomIndicators="OnApplyCustomIndicators"/>
        }
    </div>
</div>

@code {

    public FinancialChartXAxisMode XAxisMode = FinancialChartXAxisMode.Ordinal;
    public FinancialChartYAxisMode YAxisMode = FinancialChartYAxisMode.Numeric;
    List<StockList> DataSource;
    List<StockEvent> CalloutsDataSource;

    public String Index = "";
    public String Value = "";
    public CrosshairsDisplayMode CrosshairsMode = CrosshairsDisplayMode.Default;
    public Boolean CalloutsAnnotationVisible = true;
    public Boolean CrosshairsVisible = true;
    public Boolean FinalValuesVisible = true;
    public Boolean MarkersVisible = true;
    public MarkerType MarkerTypes = MarkerType.Automatic;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FinancialChartModule.Register(InfragisticsBlazor);
        var vm = new StockDataWithEvents();
        this.DataSource = vm.DataSources;
    }

    private void OnApplyCustomIndicators(FinancialChart chart, FinancialChartCustomIndicatorArgs e) {

        if (e.Index == 0) {

            //TODO
            var info = e.IndicatorInfo;

            if (info = null)
            {
                Console.WriteLine("indicatorInfo is undefined"); return;
            }

            var ds = info.dataSource;
            if (ds == null)
            {
                Console.WriteLine("dataSource is undefined"); return;
            }
            if (ds.openColumn == null)
            {
                Console.WriteLine("dataSource has no openColumn"); return;
            }
            if (ds.indicatorColumn.length == 0)
            {
                Console.WriteLine("dataSource has no indicatorColumn"); return;
            }

            var prices = ds.openColumn;
            var priceStart = ds.openColumn[0];
            var min = int.MaxValue;
            var max = int.MinValue;

            // calculating price changes using start price as reference
            for (var i = 0; i < ds.indicatorColumn.length; i++)
            {
                var priceChange = prices[i] - priceStart;
                var pricePercentage = (priceChange / priceStart) * 100;
                min = Math.Min(min, pricePercentage);
                max = Math.Max(max, pricePercentage);
                // setting values for indicator
                ds.indicatorColumn[i] = pricePercentage;
            }

            // setting min and max on data source
            ds.minimumValue = min;
            ds.maximumValue = max;

            Console.WriteLine("custom indicator created between " + min + "  " + max);
        }
    }

    public class StockEvent
    {
        public int Index { get; set; }
        public double Value { get; set; }
        public string Content { get; set; }
    }

    public class StockDataWithEvents : List<StockEvent>
    {
        public StockDataWithEvents()
        {
            Initialize();
        }
        public List<StockList> DataSources { get; set; }
        public List<StockEvent> DataEvents { get; set; }

        protected Random Rand = new Random();

        private void Initialize()
        {
            var start = DateTime.Now.Year - 2;
            var stop = DateTime.Now.Year + 1;
            var interval = TimeSpan.FromDays(1);
            DataSources = new List<StockList>();
            DataSources.Add(new StockList(start, 1, 1, stop, 1, 1, "TSLA", interval, 300, 30000));
            DataSources.Add(new StockList(start, 1, 1, stop, 1, 1, "MSFT", interval, 200, 20000));

            this.DataEvents = new List<StockEvent>();

            // generating data callouts/events based on multiple data sources
            foreach (StockList dataList in DataSources)
            {
                var intervalSplit = Rand.Next(280, 300);
                var intervalDiv = Rand.Next(360, 400);
                int index = 0;
                var priceLowest = new StockEvent { Value = double.MaxValue, Content = "MIN PRICE" };
                var priceHighest = new StockEvent { Value = double.MinValue, Content = "MAX PRICE" };

                foreach (StockItem item in dataList)
                {
                    var stockEvent = new StockEvent { Index = index };

                    // finding item with lowest price
                    if (priceLowest.Value > item.Close)
                    {
                        priceLowest.Value = item.Close;
                        priceLowest.Index = index;
                    }
                    // finding item with highest price
                    if (priceHighest.Value < item.Close)
                    {
                        priceHighest.Value = item.Close;
                        priceHighest.Index = index;
                    }

                    // creating SPLIT/DIVIDENT events at specific intervals
                    if (index % intervalSplit == 5)
                    {
                        stockEvent.Value = item.Close;
                        stockEvent.Content = "SPLIT";
                        this.DataEvents.Add(stockEvent);
                    }
                    else if (index % intervalDiv == 5)
                    {
                        stockEvent.Value = item.Close;
                        stockEvent.Content = "DIV";
                        this.DataEvents.Add(stockEvent);
                    }
                    index++;
                }

                this.DataEvents.Add(priceLowest);
                this.DataEvents.Add(priceHighest);
            }
        }
    }
}
