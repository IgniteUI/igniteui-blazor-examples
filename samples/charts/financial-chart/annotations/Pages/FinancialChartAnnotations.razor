@page "/FinancialChartAnnotations"
@* this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls
@using Samples.Services
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <label className="igOptions-label">Annotations: </label>
        <label className="igOptions-item">
            <input type="checkbox"
                   checked=CrosshairsVisible
                   @onchange="OnCrosshairsVisible" /> Crosshair
        </label>
        <label className="igOptions-item">
            <input type="checkbox"
                   checked=CalloutsAnnotationVisible
                   @onchange="OnCalloutsVisible" /> Callouts
        </label>
        <label className="igOptions-item">
            <input type="checkbox"
                   checked=FinalValuesVisible
                   @onchange="OnFinalValuesVisible" /> Final Values
        </label>
        <label className="igOptions-item">
            <input type="checkbox"
                   checked=MarkersVisible
                   @onchange="OnMarkersVisible" /> Markers
        </label>
    </div>

    <div class="igComponent">

        @if (DataSource != null)
        {
            <FinancialChart Width="100%"
                            Height="100%"
                            ChartType=FinancialChartType.Line
                            Thickness=2
                            XAxisMode="XAxisMode"
                            YAxisMode="YAxisMode"
                            DataSource="DataSource"
                            CalloutsVisible="CalloutsAnnotationVisible"
                            CalloutsXMemberPath="Index"
                            CalloutsYMemberPath="Value"
                            CalloutsLabelMemberPath="Info"
                            CalloutsContentMemberPath="Info"                            
                            CrosshairsSnapToData=false
                            CrosshairsDisplayMode="CrosshairsMode"
                            CrosshairsAnnotationEnabled="CrosshairsVisible"
                            FinalValueAnnotationsVisible="FinalValuesVisible"
                            SeriesAdded="OnSeriesAdded"/>
        }
        @*TODO MarkerType="MarkerType" *@
        @*TODO test callouts with a new build when fixed*@

    </div>
</div>

@code {

    public FinancialChartXAxisMode XAxisMode = FinancialChartXAxisMode.Ordinal;
    public FinancialChartYAxisMode YAxisMode = FinancialChartYAxisMode.Numeric;
    List<StockItem> DataSource;
    public String Index = "";
    public String Value = "";
    public CrosshairsDisplayMode CrosshairsMode = CrosshairsDisplayMode.Default;
    public Boolean CalloutsAnnotationVisible = true;
    public Boolean CrosshairsVisible = true;
    public Boolean FinalValuesVisible = true;
    public Boolean MarkersVisible = true;
    public MarkerType MarkerTypes = MarkerType.Automatic;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FinancialChartModule.Register(InfragisticsBlazor);
        InitData();
    }

    private void OnCrosshairsVisible(ChangeEventArgs e)
    {
        var value = (bool)e.Value;

        if (value == true)
        {
            CrosshairsMode = CrosshairsDisplayMode.Both;
        }
        else
        {
            CrosshairsMode = CrosshairsDisplayMode.None;
        }
    }
    private void OnCalloutsVisible(ChangeEventArgs e)
    {
        CalloutsAnnotationVisible = (bool)e.Value;
    }
    private void OnFinalValuesVisible(ChangeEventArgs e)
    {
        FinalValuesVisible = (bool)e.Value;
    }
    private void OnMarkersVisible(ChangeEventArgs e)
    {
        var visible = (bool)e.Value;
        var markers = visible ? "Circle" : "None";
        //TODO
        //MarkerTypes = markers;
        MarkersVisible = visible;
    }

    private void OnSeriesAdded(ChartSeriesEventArgs e)
    {
        //todo set series title
    }

    public void InitData()
    {
        var today = DateTime.Now;
        var year = today.Year;
        var dateMonth = today.Month;
        var dateEnd = new DateTime(year, dateMonth, 1);
        var dateStart = new DateTime(year - 1, dateMonth, 1);

        var stockData = StocksUtility.GetStocksBetween(dateStart, dateEnd);

        var minVal = int.MaxValue;
        var maxVal = int.MinValue;
        var minIndex = 0;
        var maxIndex = 0;
        var idx = 0;
        var currentYear = 0;
        var currentQuarter = 0;

        // adding annotation data for some data item
        foreach (var item in stockData) {

            if (minVal > item.Close)
            {
                minVal = (int)item.Close;
                minIndex = idx;
            }
            if (maxVal < item.Close)
            {
                maxVal = (int)item.Close;
                maxIndex = idx;
            }
            var itemYear = StocksUtility.GetYear(item.Date);
            if (currentYear != itemYear.Year)
            {
                currentYear = itemYear.Year;
                item.Info = itemYear.Year.ToString();
            }

            var itemQuarter = StocksUtility.GetQuarter(item.Date);
            if (currentQuarter != itemQuarter)
            {
                currentQuarter = (int)itemQuarter;
                item.Info = "Q" + itemQuarter;
            }

            item.Index = idx;
            item.Value = (int)item.Close;
            idx++;
        }

        stockData[100].Info = "SPLIT";
        stockData[200].Info = "SPLIT";
        stockData[250].Info = "SPLIT";

        stockData[130].Info = "DIV";
        stockData[270].Info = "DIV";
        stockData[320].Info = "DIV";

        stockData[minIndex].Info = "MIN";
        stockData[maxIndex].Info = "MAX";

        this.DataSource = stockData;
    }
}
