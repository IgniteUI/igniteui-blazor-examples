@page "/CategoryChartOverview"
@* this namespace is required for Infragistics controls *@
@using Infragistics.Blazor.Controls
@using Services
@inject IInfragisticsBlazor InfragisticsBlazor;
@inject Samples.Services.StockItem StockItem;
@inject Samples.Services.StockList StockList;
@inject IJSRuntime JSRuntime;

<div class="igContainer">
    <div class="igOptions">
        <label class="igOptions-label">Annotations: </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=CrosshairsVisible
                   @onchange="eventArgs => { OnCrosshairsVisible(eventArgs.Value); }" /> Crosshair
        </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=CalloutsAnnotationVisible
                   @onchange="eventArgs => { OnCalloutsVisible(eventArgs.Value); }" /> Callouts
        </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=FinalValuesVisible
                   @onchange="eventArgs => { OnFinalValuesVisible(eventArgs.Value); }" /> Final Values
        </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=MarkersVisible
                   @onchange="eventArgs => { OnMarkersVisible(eventArgs.Value); }" /> Markers
        </label>
    </div>

    <div class="igComponent">

        @if (DataSource != null)
        {
            <FinancialChart Width="100%"
                            Height="100%"
                            ChartType=FinancialChartType.Line
                            Thickness=2
                            XAxisMode="XAxisMode"
                            YAxisMode="YAxisMode"
                            DataSource="DataSource"
                            CalloutsVisible="CalloutsAnnotationVisible"
                            CalloutsXMemberPath="Index"
                            CalloutsYMemberPath="Value"
                            CalloutsLabelMemberPath="Content"
                            CalloutsContentMemberPath="Content"
                            CrosshairsSnapToData=false
                            CrosshairsDisplayMode="CrosshairsMode"
                            CrosshairsAnnotationEnabled="CrosshairsVisible"
                            FinalValueAnnotationsVisible="FinalValuesVisible"
                            SeriesAdded="OnSeriesAdded"/>
        }
        @*TODO MarkerType="MarkerType" *@
        @*TODO test callouts with a new build when fixed*@

    </div>
</div>

@code {

    public FinancialChartXAxisMode XAxisMode = FinancialChartXAxisMode.Ordinal;
    public FinancialChartYAxisMode YAxisMode = FinancialChartYAxisMode.Numeric;
    List<StockList> DataSource;
    List<StockEvent> CalloutsDataSource;

    public String Index = "";
    public String Value = "";
    public CrosshairsDisplayMode CrosshairsMode = CrosshairsDisplayMode.Default;
    public Boolean CalloutsAnnotationVisible = true;
    public Boolean CrosshairsVisible = true;
    public Boolean FinalValuesVisible = true;
    public Boolean MarkersVisible = true;
    public MarkerType MarkerTypes = MarkerType.Automatic;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Console.WriteLine("Sample OnInitialized...");
        FinancialChartModule.Register(InfragisticsBlazor);
        var vm = new StockDataWithEvents();
        this.DataSource = vm.DataSources;
    }

    public void OnCrosshairsVisible(object e)
    {
        CrosshairsVisible = (Boolean)e;
        if (CrosshairsVisible == true)
        {
            CrosshairsMode = CrosshairsDisplayMode.Both;
        }
        else
        {
            CrosshairsMode = CrosshairsDisplayMode.None;
        }
    }
    public void OnCalloutsVisible(object e)
    {
        CalloutsAnnotationVisible = (Boolean)e;
    }
    public void OnFinalValuesVisible(object e)
    {
        FinalValuesVisible = (Boolean)e;
    }
    public void OnMarkersVisible(object e)
    {
        //TODO
        var visible = (Boolean)e;
        var markers = visible ? "Circle" : "None";

        //MarkerTypes = markers;
        MarkersVisible = visible;
    }

    public void OnSeriesAdded(ChartSeriesEventArgs e)
    {
        //todo set series title
    }

    public class StockEvent
    {
        public int Index { get; set; }
        public double Value { get; set; }
        public string Content { get; set; }
    }

    public class StockDataWithEvents : List<StockEvent>
    {
        public StockDataWithEvents()
        {
            Initialize();
        }
        public List<StockList> DataSources { get; set; }
        public List<StockEvent> DataEvents { get; set; }

        protected Random Rand = new Random();

        private void Initialize()
        {
            var start = DateTime.Now.Year - 2;
            var stop = DateTime.Now.Year + 1;
            var interval = TimeSpan.FromDays(1);
            DataSources = new List<StockList>();
            DataSources.Add(new StockList(start, 1, 1, stop, 1, 1, "TSLA", interval, 300, 30000));
            DataSources.Add(new StockList(start, 1, 1, stop, 1, 1, "MSFT", interval, 200, 20000));

            this.DataEvents = new List<StockEvent>();

            // generating data callouts/events based on multiple data sources
            foreach (StockList dataList in DataSources)
            {
                var intervalSplit = Rand.Next(280, 300);
                var intervalDiv = Rand.Next(360, 400);
                int index = 0;
                var priceLowest = new StockEvent { Value = double.MaxValue, Content = "MIN PRICE" };
                var priceHighest = new StockEvent { Value = double.MinValue, Content = "MAX PRICE" };

                foreach (StockItem item in dataList)
                {
                    var stockEvent = new StockEvent { Index = index };

                    // finding item with lowest price
                    if (priceLowest.Value > item.Close)
                    {
                        priceLowest.Value = item.Close;
                        priceLowest.Index = index;
                    }
                    // finding item with highest price
                    if (priceHighest.Value < item.Close)
                    {
                        priceHighest.Value = item.Close;
                        priceHighest.Index = index;
                    }

                    // creating SPLIT/DIVIDENT events at specific intervals
                    if (index % intervalSplit == 5)
                    {
                        stockEvent.Value = item.Close;
                        stockEvent.Content = "SPLIT";
                        this.DataEvents.Add(stockEvent);
                    }
                    else if (index % intervalDiv == 5)
                    {
                        stockEvent.Value = item.Close;
                        stockEvent.Content = "DIV";
                        this.DataEvents.Add(stockEvent);
                    }
                    index++;
                }

                this.DataEvents.Add(priceLowest);
                this.DataEvents.Add(priceHighest);
            }
        }
    }
}
