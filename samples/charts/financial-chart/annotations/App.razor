
@using IgniteUI.Blazor.Controls

@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions">
        <label class="igOptions-label">Annotations: </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=@CrosshairsVisible
                   @onchange="OnCrosshairsVisible" /> Crosshair
        </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=@CalloutsAnnotationVisible
                   @onchange="OnCalloutsVisible" /> Callouts
        </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=@ItemTooltipVisible
                   @onchange="OnItemTooltipVisible" /> Item Tooltip
        </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=@FinalValuesVisible
                   @onchange="OnFinalValuesVisible" /> Final Values
        </label>
        <label class="igOptions-item">
            <input type="checkbox"
                   checked=@MarkersVisible
                   @onchange="OnMarkersVisible" /> Markers
        </label>
    </div>

    <div class="igComponent">

        @if (Data != null)
        {
            <FinancialChart Width="100%"
                Height="100%"
                @ref="@Chart"
                ChartType=FinancialChartType.Line
                Thickness=2
                XAxisMode="XAxisMode"
                YAxisMode="YAxisMode"
                DataSource="Data"
                ExcludedProperties=ExcludedProps
                CalloutsVisible="@CalloutsAnnotationVisible"
                CalloutsXMemberPath="Index"
                CalloutsYMemberPath="Value"
                CalloutsLabelMemberPath="Info"
                CalloutsContentMemberPath="Info"
                CrosshairsSnapToData=false
                ToolTipType="@TooltipType"
                CrosshairsDisplayMode="CrosshairsMode"
                CrosshairsAnnotationEnabled="@CrosshairsVisible"
                FinalValueAnnotationsVisible="@FinalValuesVisible"/>
        }
    </div>
</div>

@code {

    public FinancialChart _Chart;
    public FinancialChart Chart
    {
        get { return _Chart; }
        set
        {
            _Chart = value;
            this.Chart.MarkerTypes.Clear();
            this.Chart.MarkerTypes.Add(MarkerType.None);
            StateHasChanged();
        }
    }
    public FinancialChartXAxisMode XAxisMode = FinancialChartXAxisMode.Ordinal;
    public FinancialChartYAxisMode YAxisMode = FinancialChartYAxisMode.Numeric;
    List<StockItem> Data;

    public string[] ExcludedProps { get; set; } = new string[] { "Index", "Info" };
    public CrosshairsDisplayMode CrosshairsMode = CrosshairsDisplayMode.Both;
    public ToolTipType TooltipType = ToolTipType.Item;
    public Boolean CalloutsAnnotationVisible { get; set; } = true;
    public Boolean CrosshairsVisible { get; set; } = true;
    public Boolean FinalValuesVisible { get; set; } = true;
    public Boolean ItemTooltipVisible { get; set; } = true;
    public Boolean MarkersVisible { get; set; } = false;

    protected override void OnInitialized()
    {
        FinancialChartModule.Register(IgniteUIBlazor);
        InitData();
    }

    private void OnItemTooltipVisible(ChangeEventArgs e)
    {
        if ((bool)e.Value == true)
        {
            TooltipType = ToolTipType.Item;
        }
        else
        {
            TooltipType = ToolTipType.None;
        }
        ItemTooltipVisible = (bool)e.Value;
    }
    private void OnCrosshairsVisible(ChangeEventArgs e)
    {
        if ((bool)e.Value == true)
        {
            CrosshairsMode = CrosshairsDisplayMode.Both;
        }
        else
        {
            CrosshairsMode = CrosshairsDisplayMode.None;
        }
        CrosshairsVisible = (bool)e.Value;
    }
    private void OnCalloutsVisible(ChangeEventArgs e)
    {
        CalloutsAnnotationVisible = (bool)e.Value;
    }
    private void OnFinalValuesVisible(ChangeEventArgs e)
    {
        FinalValuesVisible = (bool)e.Value;
    }
    private void OnMarkersVisible(ChangeEventArgs e)
    {

        if ((bool)e.Value == true)
        {
            this.Chart.MarkerTypes.Clear();
            this.Chart.MarkerTypes.Add(MarkerType.Automatic);
        }
        else
        {
            this.Chart.MarkerTypes.Clear();
            this.Chart.MarkerTypes.Add(MarkerType.None);
        }
        MarkersVisible = (bool)e.Value;
    }

    public void InitData()
    {
        var today = DateTime.Now;
        var year = today.Year;
        var dateMonth = today.Month;
        var dateEnd = new DateTime(year + 5, dateMonth, 1);
        var dateStart = new DateTime(year - 1, dateMonth, 1);

        var stockData = StocksUtility.GetStocksBetween(dateStart, dateEnd);

        var minVal = int.MaxValue;
        var maxVal = int.MinValue;
        var minIndex = 0;
        var maxIndex = 0;
        var idx = 0;
        var currentYear = 0;
        var currentQuarter = 0;

        // adding annotation data for some data item
        foreach (var item in stockData) {

            if (minVal > item.Close)
            {
                minVal = (int)item.Close;
                minIndex = idx;
            }
            if (maxVal < item.Close)
            {
                maxVal = (int)item.Close;
                maxIndex = idx;
            }
            var itemYear = StocksUtility.GetYear(item.Date);
            if (currentYear != itemYear.Year)
            {
                currentYear = itemYear.Year;
                item.Info = itemYear.Year.ToString();
            }

            var itemQuarter = StocksUtility.GetQuarter(item.Date);
            if (currentQuarter != itemQuarter)
            {
                currentQuarter = (int)itemQuarter;
                item.Info = "Q" + itemQuarter;
            }

            item.Index = idx;
            item.Value = (int)item.Close;
            idx++;
        }

        stockData[100].Info = "SPLIT";
        stockData[200].Info = "SPLIT";
        stockData[250].Info = "SPLIT";

        stockData[130].Info = "DIV";
        stockData[270].Info = "DIV";
        stockData[320].Info = "DIV";

        stockData[minIndex].Info = "MIN";
        stockData[maxIndex].Info = "MAX";

        this.Data = stockData;
    }
}