@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.AspNetCore.Components.Web
@using System.Text.RegularExpressions;
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.JSInterop
@using Microsoft.JSInterop.WebAssembly
@using Infragistics.Documents.Excel
@using Documents.Excel.ConditionalFormatting
@using Documents.Excel.Sorting
@using Documents.Excel.Filtering

<div class="container vertical">

    <div class="options vertical">
        <button @onclick="CreateXlsx">Save Workbook to XLSX</button>
        <div class="options vertical">
            <span>Select Table to Export:</span>
            <label class="options-item"><input checked=@isSorted @onchange="OnSortChange" type="checkbox" />Apply Sort</label>
            <label class="options-item"><input checked=@isFiltered @onchange=OnFilterChange type="checkbox" />Apply Filter</label>
            <label class="options-item"><input checked=@isProtected @onchange=OnProtectChange type="checkbox" />Protect Worksheet</label>
            <label class="options-item"><input checked=@showGridlines @onchange=OnGridlinesChange type="checkbox" />Show Gridlines</label>
            <label class="options-item"><input checked=@showHeaders @onchange=OnHeadersChange type="checkbox" />Show Row and Column Headers</label>
            <label class="options-item"><input checked=@applyConditionalFormatting @onchange=OnFormatChange type="checkbox" />Apply Conditional Formatting</label>
        </div>
    </div>
</div>

@code {

    [Inject]

    public IJSRuntime Runtime { get; set; }
    public bool canSave = false;
    public Random Rand = new Random();

    public object data;
    public bool isSorted;
    public bool isFiltered;
    public bool isProtected;
    public bool showGridlines;
    public bool showHeaders;
    public bool applyConditionalFormatting;
    public Workbook wb;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Workbook.InProcessRuntime = this.Runtime as IJSInProcessRuntime;

    }

    public void ExportData(WorkbookFormat format) {
        this.InitData();
        this.wb.SetCurrentFormat(format);

        var sheet = this.wb.Worksheets[0];
        sheet.DefaultColumnWidth = 220 * 20;

        if (this.isSorted)
        {
            Console.WriteLine(this.isSorted);
            sheet.SortSettings.SetRegion("A2:A20");
            sheet.SortSettings.SortConditions.Add(
                new RelativeIndex(0), new OrderedSortCondition(SortDirection.Ascending));
        }
        if (this.isFiltered)
        {
            sheet.FilterSettings.SetRegion("C1:C20");
            sheet.FilterSettings.ApplyCustomFilter(0, new CustomFilterCondition(ExcelComparisonOperator.Equals, "USA"));
        }
        if (this.isProtected)
        {
            sheet.Protect();
        }
        if (!this.showHeaders)
        {
            sheet.DisplayOptions.ShowRowAndColumnHeaders = false;
        }
        if (!this.showGridlines)
        {
            sheet.DisplayOptions.ShowGridlines = false;
        }
        if (this.applyConditionalFormatting)
        {
            var orange = Infragistics.Core.Graphics.Colors.Orange;
            var blue = Infragistics.Core.Graphics.Colors.Blue;
            var red = Infragistics.Core.Graphics.Colors.Red;

            var format1 = sheet.ConditionalFormats.AddTextCondition(
            "A1:A20", "Amazon", FormatConditionTextOperator.Contains);

            var format2 = sheet.ConditionalFormats.AddTextCondition(
            "A1:A20", "IBM", FormatConditionTextOperator.Contains);

            var format3 = sheet.ConditionalFormats.AddTextCondition(
            "A1:A20", "Tesla", FormatConditionTextOperator.Contains);

            format1.CellFormat.Font.ColorInfo = new WorkbookColorInfo(orange);
            format2.CellFormat.Font.ColorInfo = new WorkbookColorInfo(blue);
            format3.CellFormat.Font.ColorInfo = new WorkbookColorInfo(red);
        }
    }

    public void InitData()
    {
        var companies = new string[] { "Amazon", "Ford", "Jaguar", "Tesla", "IBM", "Microsoft" };
        var firstNames = new string[] { "Andrew", "Mike", "Martin", "Ann", "Victoria", "John", "Brian", "Jason", "David" };
        var lastNames = new string[] { "Smith", "Jordan", "Johnson", "Anderson", "Louis", "Phillips", "Williams" };
        var cities = new string[] { "London", "Paris", "Boston", "Berlin" };
        var countries = new string[] { "UK", "France", "USA", "Germany", "Poland", "Brazil" };
        var titles = new string[] { "Sales Rep.", "Owner", "Administrator", "Manager" };
        var streets = new string[] { "Main St", "Madison St", "Broad Way" };
        var headers = new string[] {"Company Name",
            "Contact Title",
            "Country",
            "City",
            "Contact Name",
            "Address",
            "Postal Code",
            "Customer ID",
            "Salary",
            "Age" };

        // generating excel data source
        this.wb = new Workbook();
        var sheet = this.wb.Worksheets.Add("Sheet1");

        for (var i = 0; i < headers.Length; i++)
        {
            sheet.Rows[0].Cells[i].Value = headers[i];
        }

        for (var i = 1; i < 20; i++)
        {
            var companyName = this.GetItem(companies);
            var contactTitle = this.GetItem(titles);
            var country = this.GetItem(countries);
            var city = this.GetItem(cities);
            var contactName = this.GetItem(firstNames) + " " + this.GetItem(lastNames);
            var address = this.GetRandom(10, 60) + " " + this.GetItem(streets);
            var postalCode = this.GetRandom(100, 400) + " " + this.GetRandom(50, 90);
            var customerID = "CID-" + this.GetRandom(500, 900);
            var salary = this.GetRandom(85000, 200000).ToString();
            var age = this.GetRandom(20, 65).ToString();
            var dataItem = new string[] {
                companyName,
                contactTitle,
                country,
                city,
                contactName,
                address,
                postalCode,
                customerID,
                salary,
                age
            };
            for (var j = 0; j < dataItem.Length; j++)
            {
                sheet.Rows[i].Cells[j].Value = dataItem[j];
            }
        }
    }

    private void CreateXlsx()
    {
        ExportData(WorkbookFormat.Excel2007);
        this.SaveFile(this.wb, "ExcelWorkbook");
    }

    public void SaveFile(Workbook wb, string fileNameWithoutExtension)
    {
        var ms = new System.IO.MemoryStream();

        if (wb != null)
        {
            wb.Save(ms);
            string extension;

            switch (wb.CurrentFormat)
            {
                default:
                case WorkbookFormat.StrictOpenXml:
                case WorkbookFormat.Excel2007:
                    extension = ".xlsx";
                    break;
                case WorkbookFormat.Excel2007MacroEnabled:
                    extension = ".xlsm";
                    break;
                case WorkbookFormat.Excel2007MacroEnabledTemplate:
                    extension = ".xltm";
                    break;
                case WorkbookFormat.Excel2007Template:
                    extension = ".xltx";
                    break;

                case WorkbookFormat.Excel97To2003:
                    extension = ".xls";
                    break;
                case WorkbookFormat.Excel97To2003Template:
                    extension = ".xlt";
                    break;
            }

            string fileName = fileNameWithoutExtension + extension;
            string mime;

            switch (wb.CurrentFormat)
            {
                default:
                case WorkbookFormat.Excel2007:
                case WorkbookFormat.Excel2007MacroEnabled:
                case WorkbookFormat.Excel2007MacroEnabledTemplate:
                case WorkbookFormat.Excel2007Template:
                case WorkbookFormat.StrictOpenXml:
                    mime = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    break;
                case WorkbookFormat.Excel97To2003:
                case WorkbookFormat.Excel97To2003Template:
                    mime = "application/vnd.ms-excel";
                    break;
            }

            ms.Position = 0;
            var bytes = ms.ToArray();
            SaveFile(bytes, fileName, mime);
        }

    }

    public void SaveFile(byte[] bytes, string fileName, string mime)
    {
        if (Runtime is WebAssemblyJSRuntime wasmRuntime)
            wasmRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, mime, bytes);
        else if (Runtime is IJSInProcessRuntime inProc)
            inProc.InvokeVoid("BlazorDownloadFile", fileName, mime, bytes);
    }

    public void OnSortChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        if (value == true)
        {
            this.isSorted = true;
        }
    }

    public void OnFilterChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        if (value == true)
        {
            this.isFiltered = true;
        }
    }

    public void OnProtectChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        if (value == true)
        {
            this.isProtected = true;
        }
    }

    public void OnGridlinesChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        if (value == true)
        {
            this.showGridlines = true;
        }
    }

    public void OnHeadersChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        if (value == true)
        {
            this.showHeaders = true;
        }
    }

    public void OnFormatChange(ChangeEventArgs args)
    {
        bool value = (bool)args.Value;
        if (value == true)
        {
            this.applyConditionalFormatting = true;
        }
    }

    public double GetRandom(double min, double max)
    {
        return Math.Round(min + (Rand.NextDouble() * (max - min)));
    }

    public string GetItem(string[] array)
    {
        var index = (int)Math.Round(GetRandom(0, array.Length - 1));
        return array[index];
    }

}