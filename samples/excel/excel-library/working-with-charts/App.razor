@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Microsoft.JSInterop.WebAssembly
@using Infragistics.Documents.Excel
@using IgniteUI.Blazor.Controls
@inject IIgniteUIBlazor IgniteUIBlazor

<div class="igContainer">
    <div class="igOptions">
        <button @onclick="ExportData">Save to Excel</button>
    </div>
    <div class="igComponent">
        <CategoryChart Height="50%" Width="100%"
                       DataSource="@ChartData"
                       YAxisMinimumValue="0"
                       XAxisInterval="1"
                       ChartType="@CategoryChartType.Column"
                       Brushes="#4f81bd, #c0504d, #9bbb59, #8064a2"
                       Outlines="#4f81bd, #c0504d, #9bbb59, #8064a2"
                       Thickness="0" />
        <DataGrid Height="50%" Width="100%" DataSource="GridData">
            <TextColumn Field="Expense" Width="@("*>100")" />
            <NumericColumn Field="Jan" Width="@("*>75")" />
            <NumericColumn Field="Feb" Width="@("*>75")" />
            <NumericColumn Field="Mar" Width="@("*>75")" />
            <NumericColumn Field="Apr" Width="@("*>75")" />
            <NumericColumn Field="May" Width="@("*>75")" />
            <NumericColumn Field="Jun" Width="@("*>75")" />
            <NumericColumn Field="Jul" Width="@("*>75")" />
            <NumericColumn Field="Aug" Width="@("*>75")" />
            <NumericColumn Field="Sep" Width="@("*>75")" />
            <NumericColumn Field="Oct" Width="@("*>75")" />
            <NumericColumn Field="Nov" Width="@("*>75")" />
            <NumericColumn Field="Dec" Width="@("*>75")" />
        </DataGrid>
    </div>
</div>

@code {

    [Inject]
    public IJSRuntime Runtime { get; set; }

    public List<ExpenseGridInfo> GridData { get; set; }
    public List<ExpenseChartInfo> ChartData { get; set; }
    Random r = new Random();

    protected override void OnInitialized()
    {

        base.OnInitialized();
        DataGridModule.Register(IgniteUIBlazor);
        CategoryChartModule.Register(IgniteUIBlazor);

        Workbook.InProcessRuntime = (IJSInProcessRuntime)this.Runtime;

        InitData();
    }

    public void InitData()
    {
        var months = new string[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
        var groups = new string[] { "Heating", "Electricity", "Water", "Taxes" };

        var expenseKey = "Expense";
        var monthKey = "Month";

        List<ExpenseGridInfo> _gridData = new List<ExpenseGridInfo>();
        List<ExpenseChartInfo> _chartData = new List<ExpenseChartInfo>();

        for(int i=0; i<groups.Length; i++)
        {
            string group = groups[i];
            ExpenseGridInfo info = new ExpenseGridInfo() { Expense = group };
            foreach(string month in months)
            {
                double x = i * 15 * Math.PI / 180;
                double rand = r.Next(50, 100);
                double heat = Math.Abs(Math.Cos(x)) * 300 + rand;
                double ac = Math.Abs(Math.Sin(x)) * 500 + rand;

                switch (group)
                {
                    case "Heating": {
                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, Math.Round(heat));
                            break;
                        }
                    case "Electricity":
                        {
                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, Math.Round(ac));
                            break;
                        }
                    case "Water":
                        {
                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, r.Next(100, 150));
                            break;
                        }
                    case "Taxes":
                        {
                            typeof(ExpenseGridInfo).GetProperty(month).SetValue(info, r.Next(700, 800));
                            break;
                        }
                }
            }

            _gridData.Add(info);
        }


        foreach(string month in months)
        {
            ExpenseChartInfo data = new ExpenseChartInfo() { Month = month };

            foreach(ExpenseGridInfo info in _gridData)
            {
                switch (info.Expense)
                {
                    case "Heating":
                        {
                            data.Heat = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);
                            break;
                        }
                    case "Electricity":
                        {
                            data.Electricity = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);
                            break;
                        }
                    case "Water":
                        {
                            data.Water = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);
                            break;
                        }
                    case "Taxes":
                        {
                            data.Taxes = (double)typeof(ExpenseGridInfo).GetProperty(month).GetValue(info);
                            break;
                        }
                }
            }

            _chartData.Add(data);
        }


        this.GridData = _gridData;
        this.ChartData = _chartData;
    }

    public void ExportData()
    {
        var workbook = new Workbook(WorkbookFormat.Excel2007);
        var sheet = workbook.Worksheets.Add("Sheet1");

        sheet.DefaultColumnWidth = 200 * 20;

        int firstDataRow = 2;

        var headerRow = sheet.Rows[firstDataRow - 1];

        var props = typeof(ExpenseGridInfo).GetProperties();

        for(int i=0; i<props.Count(); i++)
        {
            System.Reflection.PropertyInfo prop = props[i];
            headerRow.SetCellValue(i, prop.Name);
        }

        for(int i=0; i<this.GridData.Count; i++)
        {
            var worksheetRow = sheet.Rows[i + firstDataRow];
            ExpenseGridInfo item = this.GridData[i];

            for(int j=0; j<props.Length; j++)
            {
                System.Reflection.PropertyInfo info = props[j];
                worksheetRow.SetCellValue(j, info.GetValue(item));
            }
        }

        int indexRow = firstDataRow - 1;
        int indexData = firstDataRow + this.GridData.Count - 1;
        int indexHeader = props.Length - 1;

        var tableRegion = new WorksheetRegion(sheet, indexRow, 0, indexData, indexHeader);
        var table = sheet.Tables.Add(tableRegion.ToString(), true);

        sheet.Rows[0].Height = 5000;

        var chart = sheet.Shapes.AddChart(Documents.Excel.Charts.ChartType.ColumnClustered,
            sheet.Rows[0].Cells[0], new Infragistics.Core.Point(0, 0),
            sheet.Rows[0].Cells[props.Length - 1], new Infragistics.Core.Point(100, 100));

        chart.SetSourceData(table.WholeTableRegion.ToString(), true);
        chart.AxisCollection[Infragistics.Documents.Excel.Charts.AxisType.Category].AxisBetweenCategories = true;

        var memStream = new System.IO.MemoryStream();
        workbook.Save(memStream);

        memStream.Position = 0;
        var bytes = memStream.ToArray();
        this.SaveFile(bytes, "ExelWorkbook.xlsx", string.Empty);
    }

    private void SaveFile(byte[] bytes, string fileName, string mime)
    {
        if (this.Runtime is WebAssemblyJSRuntime wasmRuntime)
            wasmRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, mime, bytes);
        else if (this.Runtime is IJSInProcessRuntime inProc)
            inProc.InvokeVoid("BlazorDownloadFile", fileName, mime, bytes);
    }


    public class ExpenseGridInfo
    {
        public string Expense { get; set; }
        public double Jan { get; set; }
        public double Feb { get; set; }
        public double Mar { get; set; }
        public double Apr { get; set; }
        public double May { get; set; }
        public double Jun { get; set; }
        public double Jul { get; set; }
        public double Aug { get; set; }
        public double Sep { get; set; }
        public double Oct { get; set; }
        public double Nov { get; set; }
        public double Dec { get; set; }
    }

    public class ExpenseChartInfo
    {
        public string Month { get; set; }
        public double Heat { get; set; }
        public double Electricity { get; set; }
        public double Water { get; set; }
        public double Taxes { get; set; }
    }
}