@using IgniteUI.Blazor.Controls
@using System.Reflection
@inject IIgniteUIBlazor IgniteUIBlazor
@inject NavigationManager NavManager

<div class="container vertical">
    <div class="options horizontal">
        <span class="options-label">Imagery Source: </span>
        <select @onchange="OnImagerySourceChanged">
            <option>OpenStreetMaps (Default)</option>
            <option>BingMaps Road</option>
            <option>BingMaps Aerial</option>
            <option>BingMaps Labels</option>
            <option>WorldStreetMap (ESRI)</option>
            <option>WorldTopographicMap (ESRI)</option>
            <option>WorldImageryMap (ESRI)</option>
            <option>WorldOceansMap (ESRI)</option>
            <option>WorldNationalGeoMap (ESRI)</option>
            <option>WorldTerrainMap (ESRI)</option>
            <option>WorldDeLormesMap (ESRI)</option>
            <option>WorldLightGrayMap (ESRI)</option>
            <option>WorldShadedReliefMap (ESRI)</option>
            <option>WorldPhysicalMap (ESRI)</option>
            <option>WorldAdminOverlay (ESRI)</option>
            <option>WorldTransportationOverlay (ESRI)</option>
            <option>WorldBoundariesDarkOverlay (ESRI)</option>
            <option>WorldBoundariesLightOverlay (ESRI)</option>
            <option>WorldLabelsLightGrayOverlay (ESRI)</option>
            <option>UsaOwnerOccupiedHousing (ESRI)</option>
            <option>UsaSoilSurvey (ESRI)</option>
            <option>UsaPopulationOlderThanAge64 (ESRI)</option>
            <option>UsaPopulationYoungerThan18 (ESRI)</option>
            <option>UsaPopulationGrowth2015 (ESRI)</option>
            <option>UsaUnemploymentRate (ESRI)</option>
            <option>UsaSocialVulnerability (ESRI)</option>
            <option>UsaRetailSpendingPotential (ESRI)</option>
            <option>UsaPopulationChange2010 (ESRI)</option>
            <option>UsaPopulationChange2000 (ESRI)</option>
            <option>UsaPopulationDensity (ESRI)</option>
            <option>UsaPopulationByGender (ESRI)</option>
            <option>UsaMedianHouseholdIncome (ESRI)</option>
            <option>UsaMedianNetWorth (ESRI)</option>
            <option>UsaMedianHomeValue (ESRI)</option>
            <option>UsaMedianAge (ESRI)</option>
            <option>UsaLaborForceParticipation (ESRI)</option>
            <option>UsaAverageHouseholdSize (ESRI)</option>
            <option>UsaDiversityIndex (ESRI)</option>
            <option>UsaRailNetwork (ESRI)</option>
        </select>
    </div>

    <div class="container vertical">
        <IgbGeographicMap Height="100%" Width="100%" Zoomable="true" BackgroundContent="@MapContent">
        </IgbGeographicMap>
    </div>
</div>

@code {

    private IgbGeographicMapImagery MapContent;
    private EsriStyle EsriRef;

    protected override void OnInitialized()
    {
        IgbGeographicMapModule.Register(IgniteUIBlazor);
        IgbDataChartInteractivityModule.Register(IgniteUIBlazor);

        EsriRef = new EsriStyle();
        this.MapContent = new IgbOpenStreetMapImagery();
    }

    private void OnImagerySourceChanged(ChangeEventArgs args)
    {
        string str = args.Value.ToString();

        if (str.Contains("ESRI"))
        {
            str = str.Replace(" (ESRI)", "");

            FieldInfo fieldInfo = typeof(EsriStyle).GetField(str);

            if (fieldInfo != null)
            {
                EsriStyle obj = new EsriStyle();
                string uri = fieldInfo.GetValue(obj).ToString();

                IgbArcGISOnlineMapImagery mapImage = new IgbArcGISOnlineMapImagery()
                {
                    MapServerUri = uri
                };

                this.MapContent = mapImage;
            }
        }
        else if (str.Contains("Bing"))
        {
            IgbBingMapsMapImagery mapImage = null;

            if (str.Contains("Aerial"))
            {
                mapImage = this.CreateBingMapsImagery(BingMapsImageryStyle.Aerial);                
            }
            else if (str.Contains("Labels"))
            {
                mapImage = this.CreateBingMapsImagery(BingMapsImageryStyle.AerialWithLabels);                
            }
            else
            {
                mapImage = this.CreateBingMapsImagery(BingMapsImageryStyle.Road);                
            }            

            this.MapContent = mapImage;
        }
        else
        {
            this.MapContent = new IgbOpenStreetMapImagery();
        }
    }

    private IgbBingMapsMapImagery CreateBingMapsImagery(BingMapsImageryStyle style)
    {
        string apiKey = MapUtils.GetBingKey();
        var bingUrl = "http://dev.virtualearth.net/REST/v1/Imagery/Metadata/{STYLE}?key={KEY}&include=ImageryProviders";
        bingUrl = bingUrl.Replace("{STYLE}", style.ToString());
        bingUrl = bingUrl.Replace("{KEY}", apiKey);

        var isHttpSecured = NavManager.Uri.StartsWith("https");
        if (isHttpSecured)
            bingUrl = bingUrl.Replace("http:", "https:");

        var imagery = new IgbBingMapsMapImagery()
        {
             ApiKey = apiKey,
             ImageryStyle = style,
             ActualBingImageryRestUri = bingUrl
        };

        return imagery;
    }
}