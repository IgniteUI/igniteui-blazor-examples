
@using IgniteUI.Blazor.Controls

<style>
    .container{
        padding: 16px;
    }
</style>

<div class="container vertical">
    <div id="nav-drawer-container" style="display: flex;">
        <IgbNavDrawer @ref="@NavDrawerRef" Open="true" style="position: relative">
            <IgbNavDrawerHeaderItem>
                Sample Drawer
            </IgbNavDrawerHeaderItem>

            <IgbNavDrawerItem @ref="HomeItemRef" @onclick='(args) => NavDrawerItemClick(args, "home")'>
                <IgbIcon @ref="@IconRef" slot="icon" Collection="material" IconName="home" />
                <span slot="content">Home</span>
            </IgbNavDrawerItem>

            <IgbNavDrawerItem @ref="SearchItemRef" @onclick='(args) => NavDrawerItemClick(args, "search")'>
                <IgbIcon @ref="@IconRef" slot="icon" Collection="material" IconName="search" />
                <span slot="content">Search</span>
            </IgbNavDrawerItem>

            <div slot="mini">
                <IgbNavDrawerItem @ref="HomeMiniRef" @onclick='(args) => NavDrawerItemClick(args, "home")'>
                    <IgbIcon slot="icon" Collection="material" IconName="home" />
                </IgbNavDrawerItem>

                <IgbNavDrawerItem @ref="SearchMiniRef" @onclick='(args) => NavDrawerItemClick(args, "search")'>
                    <IgbIcon slot="icon" Collection="material" IconName="search" />
                </IgbNavDrawerItem>
            </div>
        </IgbNavDrawer>

        <div id="content" style="width: 100%">
            <IgbButton id="toggleBtn" style="margin-left: 50px;" @onclick="OnButtonClick">Toggle</IgbButton>
        </div>
    </div>
</div>

@code {

    public IgbIcon IconRef { get; set; }

    public IgbNavDrawer NavDrawerRef { get; set; }
    public IgbNavDrawerItem HomeItemRef { get; set; }
    public IgbNavDrawerItem HomeMiniRef { get; set; }
    public IgbNavDrawerItem SearchItemRef { get; set; }
    public IgbNavDrawerItem SearchMiniRef { get; set; }

    public Dictionary<IgbNavDrawerItem, string> NavDrawerItemsIcons { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && this.IconRef != null)
        {
            await this.IconRef.EnsureReady();
            await this.IconRef.RegisterIconAsync("home",
                    "https://unpkg.com/material-design-icons@3.0.1/action/svg/production/ic_home_24px.svg",
                    "material");
            await this.IconRef.RegisterIconAsync("search",
                    "https://unpkg.com/material-design-icons@3.0.1/action/svg/production/ic_search_24px.svg",
                    "material");
        }

        if (firstRender)
        {
            NavDrawerItemsIcons = new Dictionary<IgbNavDrawerItem, string>();
            await this.HomeItemRef.EnsureReady();
            await this.HomeMiniRef.EnsureReady();
            NavDrawerItemsIcons.Add(HomeItemRef, "home");
            NavDrawerItemsIcons.Add(HomeMiniRef, "home");
            await this.SearchItemRef.EnsureReady();
            await this.SearchMiniRef.EnsureReady();
            NavDrawerItemsIcons.Add(SearchItemRef, "search");
            NavDrawerItemsIcons.Add(SearchMiniRef, "search");
        }
    }

    public void OnButtonClick()
    {
        this.NavDrawerRef.Toggle();
    }

    public void NavDrawerItemClick(MouseEventArgs args, string icon)
    {
        IEnumerable<IgbNavDrawerItem> itemsToBeActive = NavDrawerItemsIcons
                                                           .Where(pair => pair.Value == icon)
                                                           .Select(pair => pair.Key);

        foreach (IgbNavDrawerItem item in itemsToBeActive)
        {
            item.Active = true;
        }

        IEnumerable<IgbNavDrawerItem> itemsToBeInactive = NavDrawerItemsIcons
                                                            .Where(pair => pair.Value != icon)
                                                            .Select(pair => pair.Key);

        foreach (IgbNavDrawerItem item in itemsToBeInactive)
        {
            item.Active = false;
        }
    }
}