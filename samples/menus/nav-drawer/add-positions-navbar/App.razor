@using IgniteUI.Blazor.Controls


<div class="container vertical" >
    <IgbNavDrawer @ref="@NavDrawerRef" style="position: relative">
        <IgbNavDrawerHeaderItem>
            Sample Drawer
        </IgbNavDrawerHeaderItem>

        <IgbNavDrawerItem @ref="HomeItemRef" @onclick="(args) => NavDrawerItemClick(args, HomeItemRef)">
            <IgbIcon @ref="@IconRef" slot="icon" IconName="home" Collection="material" />
            <span slot="content">Home</span>
        </IgbNavDrawerItem>

        <IgbNavDrawerItem @ref="SearchItemRef" @onclick="(args) => NavDrawerItemClick(args, SearchItemRef)">
            <IgbIcon @ref="@IconRef" slot="icon" IconName="search" Collection="material" />
            <span slot="content">Search</span>
        </IgbNavDrawerItem>
    </IgbNavDrawer>

    <div id="content" style="width: 100%">
        <IgbRadioGroup id="radio-group" Alignment="RadioGroupAlignment.Horizontal">
            <IgbRadio name="position" Value="Start" LabelPosition="RadioLabelPosition.After" Checked="true" Change="OnRadioOptionClick">Start</IgbRadio>
            <IgbRadio name="position" Value="End" LabelPosition="RadioLabelPosition.After" Change="OnRadioOptionClick">End</IgbRadio>
            <IgbRadio name="position" Value="Top" LabelPosition="RadioLabelPosition.After" Change="OnRadioOptionClick">Top</IgbRadio>
            <IgbRadio name="position" Value="Bottom" LabelPosition="RadioLabelPosition.After" Change="OnRadioOptionClick">Bottom</IgbRadio>
        </IgbRadioGroup>

        <IgbNavbar>
            <IgbIcon @ref="@IconRef" slot="start" IconName="menu" Collection="material" @onclick="OnMenuIconClick" />
            <h2>@Title</h2>
        </IgbNavbar>
    </div>
</div>

@code {

    public IgbIcon IconRef { get; set; }

    public IgbNavDrawer NavDrawerRef { get; set; }
    public IgbNavDrawerItem HomeItemRef { get; set; }
    public IgbNavDrawerItem SearchItemRef { get; set; }

    public Dictionary<string, IgbNavDrawerItem> NavDrawerTitlesItemRefs { get; set; }

    public string Title { get; set; } = "Home";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && this.IconRef != null)
        {
            await this.IconRef.EnsureReady();
            await this.IconRef.RegisterIconAsync("menu", "https://unpkg.com/material-design-icons@3.0.1/navigation/svg/production/ic_menu_24px.svg", "material");
            await this.IconRef.RegisterIconAsync("home", "https://unpkg.com/material-design-icons@3.0.1/action/svg/production/ic_home_24px.svg", "material");
            await this.IconRef.RegisterIconAsync("search", "https://unpkg.com/material-design-icons@3.0.1/action/svg/production/ic_search_24px.svg", "material");
        }

        if (firstRender)
        {
            NavDrawerTitlesItemRefs = new Dictionary<string, IgbNavDrawerItem>();
            await this.HomeItemRef.EnsureReady();
            NavDrawerTitlesItemRefs.Add("Home", HomeItemRef);
            HomeItemRef.Active = true;
            await this.SearchItemRef.EnsureReady();
            NavDrawerTitlesItemRefs.Add("Search", SearchItemRef);
        }
    }

    public void OnRadioOptionClick(IgbComponentBoolValueChangedEventArgs args)
    {
        IgbRadio radio = args.Parent as IgbRadio;

        if (this.NavDrawerRef != null)
        {
            switch (radio.Value)
            {
                case "Start":
                    {
                        this.NavDrawerRef.Position = NavDrawerPosition.Start;
                        break;
                    }
                case "End":
                    {
                        this.NavDrawerRef.Position = NavDrawerPosition.End;
                        break;
                    }
                case "Top":
                    {
                        this.NavDrawerRef.Position = NavDrawerPosition.Top;
                        break;
                    }
                case "Bottom":
                    {
                        this.NavDrawerRef.Position = NavDrawerPosition.Bottom;
                        break;
                    }
            }
        }
    }

    public void OnMenuIconClick()
    {
        if(this.NavDrawerRef != null)
        {
            this.NavDrawerRef.Show();
        }
    }

    public void NavDrawerItemClick(MouseEventArgs args, IgbNavDrawerItem item)
    {
        item.Active = true;
        Title = NavDrawerTitlesItemRefs.Where(pair => pair.Value == item).Select(pair => pair.Key).ToList()[0];
        foreach (IgbNavDrawerItem i in NavDrawerTitlesItemRefs.Values)
        {
            if (i != item)
            {
                i.Active = false;
            }
        }
    }
}