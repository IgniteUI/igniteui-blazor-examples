@using IgniteUI.Blazor.Controls


<style>
    igc-textarea::part(input) {
        background-color: rgb(169, 214, 229);
        border-color: rgb(42, 111, 151);
    }

    igc-textarea::part(label) {
        color: rgb(1, 42, 74);
    }

    igc-textarea::part(prefix),
    igc-textarea::part(suffix) {
        color: white;
        border-color: rgb(42, 111, 151);
        background-color: rgb(70, 143, 175);
    }
</style>

<div class="container sample center">
    <IgbTextarea Label="Steps to reproduce">
       <IgbIcon @ref="RegisterIconRef" IconName="feedback" Collection="material" slot="prefix"></IgbIcon>
        <p slot="helper-text">Provide a detailed description of the steps that led to the issue you experienced</p>
    </IgbTextarea>
</div>

@code {

    private IgbIcon RegisterIconRef { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && this.RegisterIconRef != null)
        {
            await this.RegisterIconRef.EnsureReady();
            string feedback = "<svg xmlns='http://www.w3.org/2000/svg' height='24' viewBox='0 -960 960 960' width='24'><path d='M480-360q17 0 28.5-11.5T520-400q0-17-11.5-28.5T480-440q-17 0-28.5 11.5T440-400q0 17 11.5 28.5T480-360Zm-40-160h80v-240h-80v240ZM80-80v-720q0-33 23.5-56.5T160-880h640q33 0 56.5 23.5T880-800v480q0 33-23.5 56.5T800-240H240L80-80Zm126-240h594v-480H160v525l46-45Zm-46 0v-480 480Z'/></svg>";
            await this.RegisterIconRef.RegisterIconFromTextAsync("feedback", feedback, "material");
            
        }
    }
}